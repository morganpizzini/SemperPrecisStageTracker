@using SemperPrecisStageTracker.Contracts.Utilities
@using System.Net.WebSockets
@using SemperPrecisStageTracker.Blazor.Pages.App
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<AppLayout> L
@inject NetworkService NetworkService
@inject NavigationManager NavigationManager
@inject IAuthenticationService authService
@inject IHttpService httpService
@inject ILocalStorageService localStorage

<div class="page @CurrentTheme">

    <div class="sidebar">
        <AppNavMenu/>
    </div>
    <div class="main">
        <div class="top-row px-4 auth">
            @if (ShowNotificationAlertStatus)
            {
                <Button Class="mr-2" Size="Size.Small" Color="Color.Warning" Clicked="@SubscribeToNotification">@L["SubscribeToNotification"]</Button>
            }
            <strong>@L["Theme"]:</strong>
            <select class="form-control" @bind="CurrentTheme" style="width:150px; margin: 0 10px;">
                <option value="light">@L["Light"]</option>
                <option value="dark">@L["Dark"]</option>
            </select>
            <CultureSelector />
            <AuthorizeView>
                <Authorized>
                    <span>@L["Hello"]&nbsp;<NavLink Class="ml-0" href="/profile">@context.User.Identity.Name</NavLink>!</span>
                    <NavLink class="nav-link" href="@(RouteHelper.GetUrl<Logout>())">@L["Logout"]</NavLink>
                </Authorized>
                <NotAuthorized>
                    <NavLink class="nav-link" href="@(RouteHelper.GetUrl<Login>())">@L["Login"]</NavLink>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <div class="content px-4">
            @if (NetworkService.IsOnline)
            {
                @Body
            }
            else
            {
                <span style="color: red">@L["Offline"]</span>
            }
        </div>
    </div>
</div>
<Modal @ref="modalInstallRef">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <ModalTitle>
                @L["InstallPWA"]
            </ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Text>@L["InstallPWAInfo"]</Text>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideInstallModal(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Success" Clicked="@(() => HideInstallModal(true))">@L["Approve"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code{
    private static Action action;
    private Modal modalInstallRef;
    private static Action actionNotification;
    private bool ShowNotificationAlertStatus;
    string _currentTheme;
    string CurrentTheme
    {
        get => _currentTheme;
        set
        {
            _currentTheme = value;
            localStorage.SetItem("theme",_currentTheme);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        action = ShowIntallModal;
        actionNotification = ShowNotificationAlert;
        // In the background, ask if they want to be notified about order updates
        await RequestNotificationSubscriptionAsync();


        // set theme
        _currentTheme = await localStorage.GetItem<string>("theme");


        await base.OnInitializedAsync();
    }


    async Task RequestNotificationSubscriptionAsync()
    {
        if (!authService.IsAuth)
            return;
        await JSRuntime.InvokeAsync<NotificationSubscriptionCreateRequest>("BlazorPWA.requestSubscription");
    }

    [JSInvokable]
    public static Task PromptNotificationAlert()
    {
        actionNotification.Invoke();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public static Task BlazorInstallHandler()
    {
        action.Invoke();
        return Task.CompletedTask;
    }

    public void ShowIntallModal()
    {
        modalInstallRef.Show();
    }

    public void ShowNotificationAlert()
    {
        ShowNotificationAlertStatus = true;
    }

    public async Task SubscribeToNotification()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscriptionCreateRequest>("BlazorPWA.createSubscription");

        if (subscription == null)
            return;
        try
        {
            var response = await httpService.Post<OkResponse>("api/notification/CreateNotificationSubscription", subscription);
            if (response.Status)
            {
                ShowNotificationAlertStatus = false;
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }
    private async Task HideInstallModal(bool choice)
    {
        if (choice)
        {
            await JSRuntime.InvokeVoidAsync("BlazorPWA.installPWA");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("BlazorPWA.dismissInstallPWA");
        }
        modalInstallRef.Hide();
    }
}