@using SemperPrecisStageTracker.Blazor.Pages
@using Permissions = SemperPrecisStageTracker.Shared.Permissions.Permissions
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IStringLocalizer<NavMenu> L
@inject IAuthenticationService AuthService
@inject MainServiceLayer mainServiceLayer
@inject IState<SettingsState> SettingState

<div class="top-row pl-4 navbar navbar-dark">
    <NavLink class="navbar-brand px-3" href="@(RouteHelper.GetUrl<Home>())">
        SemperPrecis Tracker
    </NavLink>
    <AuthorizeView>
        <Authorized>
            <button class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </Authorized>
    </AuthorizeView>
</div>
<AuthorizeView>
    <Authorized>
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <ul class="nav flex-column">
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="@(RouteHelper.GetUrl<Home>())" Match="NavLinkMatch.All">
                        <Icon Name="FontAwesomeIcons.Book"/> @L["Home"]
                    </NavLink>
                </li>
                @if (!SettingState.Value.Offline)
                {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="@(RouteHelper.GetUrl<Associations>())">
                            <Icon Name="FontAwesomeIcons.Book"/> @L["Associations"]
                        </NavLink>
                    </li>
                }
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="@(RouteHelper.GetUrl<Matches>())">
                        <Icon Name="FontAwesomeIcons.Book"/> @L["Matches"]
                    </NavLink>
                </li>
                @if (!SettingState.Value.Offline)
                {
                    @if (AuthService.CheckPermissions(PermissionCtor.ManageShooters.CreateShooters.EditShooter))
                    {
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href="@(RouteHelper.GetUrl<Shooters>())">
                                <Icon Name="FontAwesomeIcons.Book"/> @L["Shooters"]
                            </NavLink>
                        </li>
                    }
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="@(RouteHelper.GetUrl<Teams>())">
                            <Icon Name="FontAwesomeIcons.Book"/> @L["Teams"]
                        </NavLink>
                    </li>
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="@(RouteHelper.GetUrl<Places>())">
                            <Icon Name="FontAwesomeIcons.Book"/> @L["Places"]
                        </NavLink>
                    </li>
                    @if (AuthService.CheckPermissions(Permissions.ManagePermissions))
                    {
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href="@(RouteHelper.GetUrl<PermissionsHandling>())">
                                <Icon Name="FontAwesomeIcons.Book"/> @L["Permissions"]
                            </NavLink>
                        </li>
                    }
                }
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="@(RouteHelper.GetUrl<Settings>())">
                        <Icon Name="FontAwesomeIcons.Book"/> @L["Settings"]
                    </NavLink>
                </li>
            </ul>
        </div>
    </Authorized>

</AuthorizeView>


@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : string.Empty;

    protected override void Dispose(bool disposed)
    {
      base.Dispose(disposed);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
