@using SemperPrecisStageTracker.Contracts.Utilities
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<MainLayout> L
@inject NetworkService NetworkService
@inject NavigationManager NavigationManager

<div class="page">
    
            <div class="sidebar">
                <NavMenu />
            </div>
            <div class="main">
                <div class="top-row px-4 auth">
                    <CultureSelector />
                    <AuthorizeView>
                        <Authorized>
                            <span>@L["Hello"]!, @context.User.Identity.Name!</span>
                            <NavLink class="nav-link" href="logout">@L["Logout"]</NavLink>
                        </Authorized>
                        <NotAuthorized>
                            <NavLink class="nav-link" href="login">@L["Login"]</NavLink>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>

                <div class="content px-4">
                    @if (NetworkService.IsOnline)
                    {
                        @Body
                    }
                    else
                    {
                        <span style="color: red">@L["Offline"]</span>
                    }
                </div>
            </div>
    </div>
<Modal @ref="modalInstallRef">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <ModalTitle>
                @L["InstallPWA"]
            </ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Text>@L["InstallPWAInfo"]</Text>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideInstallModal(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Success" Clicked="@(() => HideInstallModal(true))">@L["Approve"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code{
    private static Action action;
    private Modal modalInstallRef;

    protected override async Task OnInitializedAsync()
    {
        action = ShowIntallModal;
        // In the background, ask if they want to be notified about order updates
        await RequestNotificationSubscriptionAsync();

        await base.OnInitializedAsync();
    }
    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscriptionCreateRequest>("BlazorPWA.requestSubscription");
        if (subscription != null)
        {
            try
            {
                //var response = await httpClient.PutAsJsonAsync("notifications/subscribe", subscription);
                // response.EnsureSuccessStatusCode();
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }

    [JSInvokable]
    public static Task BlazorInstallHandler()
    {
        action.Invoke();
        return Task.CompletedTask;
    }

    public void ShowIntallModal()
    {
        modalInstallRef.Show();
    }
    private async Task HideInstallModal(bool choice)
    {
        if (choice)
        {
            await JSRuntime.InvokeVoidAsync("BlazorPWA.installPWA");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("BlazorPWA.dismissInstallPWA");
        }
        modalInstallRef.Hide();
    }
}