@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject NavigationManager NavigationManager
@inject IState<UserState> UserState
@inject IState<SettingsState> SettingsState

<Fluxor.Blazor.Web.StoreInitializer />
@if (SettingsState.Value.Ready)
{
    <CascadingAuthenticationState>
        <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData"
                                DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        @if(context.User?.Identity?.IsAuthenticated ?? false)
                        {
                            <p>
                                You are not authorized to access
                                this resource.
                            </p>
                        }
                        else
                        {
                            <RedirectToLogin />
                        }
                    </NotAuthorized>
                    <Authorizing>
                        <h1>Authorization in progress</h1>
                        <p>Only visible while authorization is in progress.</p>
                    </Authorizing>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
        <NotificationAlert />
    </CascadingAuthenticationState>
}
@code {
    override protected async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
}