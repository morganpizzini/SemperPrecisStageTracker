@page "/teams/new"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<TeamNew> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["NewTeam"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<Teams>())">@L["BackToList"]</NavLink>
<Divider />
<AuthorizeView Roles="@(PermissionCtor.ManageTeams.CreateTeams.ToString())">
    <Authorizing>
        <h3 class="mt-5">@L["Loading"]</h3>
    </Authorizing>
    <NotAuthorized>
        <h3 class="mt-5">@L["NoAuth"]</h3>
    </NotAuthorized>
    <Authorized>
        <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@model">
            <Validation Validator="@ValidationRule.IsNotEmpty">
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Name"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                        <TextEdit Placeholder="@L["Name"]" @bind-Text="@model.Name">
                            <Feedback>
                                <ValidationError>@L["WrongName"]</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>
            <Field Horizontal="true" JustifyContent="JustifyContent.End">
                <FieldBody ColumnSize="ColumnSize.Is10.Is2.WithOffset">
                    <Button Size="Size.Small" Color="Color.Primary" Clicked="@Submit" Loading="ApiLoading" Disabled="ApiLoading">
                        <LoadingTemplate><Icon Name="FontAwesomeIcons.AnimationSpinner" />&nbsp;@L["Submit"]</LoadingTemplate>
                        <ChildContent>@L["Submit"]</ChildContent>
                    </Button>
                </FieldBody>
            </Field>
        </Validations>
    </Authorized>
</AuthorizeView>
@code {

    Validations validations = default!;
    TeamCreateRequest model = new();
    void ValidateDate(ValidatorEventArgs e)
    {
        var date = e.Value as DateTime?;

        if (date == null)
        {
            e.Status = ValidationStatus.Error;
        }
        else if (date.Value.Date <= DateTime.Now.Date.AddDays(1))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = L["WrongDate"];
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    async Task Submit()
    {
        if (! (await validations.ValidateAll()))
            return;
        await validations.ClearAll();
        var response = await Post<TeamContract>("/api/Team/CreateTeam", model);
        if (response != null)
        UriHelper.NavigateTo(RouteHelper.GetUrl<TeamDetail>(new { id = response.TeamId }));
    }
}
