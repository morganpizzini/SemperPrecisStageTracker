@page "/"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<Home> L
@inject NavigationManager UriHelper
@inject IState<UserState> UserState 
@inject IState<SettingsState> SettingState 

@if (!SettingState.Value.Offline)
{
    
<Row>
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.IsFull.OnTablet">
        <Card Margin="Margin.Is4.OnY">
            <CardBody>
                <CardTitle>
                    @L["MatchRegistration"]
                </CardTitle>
                <ShooterInGroup SubmitCallback="Submit" Model="model" Shooter="UserState.Value.User" AvailableMatches="AvailableMatches"></ShooterInGroup>
            </CardBody>
        </Card>
    </Column>
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.IsFull.OnTablet">
        <Card Margin="Margin.Is4.OnY">
            <CardBody>
                <CardTitle>
                    @L["NextMatches"]
                </CardTitle>
                <Table Striped="true" Hoverable="true">
                    <TableHeader ThemeContrast="ThemeContrast.Dark">
                        <TableRow>
                            <TableHeaderCell>@L["Name"]</TableHeaderCell>
                            <TableHeaderCell>@L["Association"]</TableHeaderCell>
                            <TableHeaderCell>@L["Date"] / @L["Location"]</TableHeaderCell>
                            <TableHeaderCell>@L["Group"]</TableHeaderCell>
                            <TableHeaderCell></TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @if (ApiLoading)
                        {
                            <TableRow>
                                <TableRowCell ColumnSpan="5" TextAlignment="@TextAlignment.Center"><Icon Name="FontAwesomeIcons.AnimationSpinner2x"/></TableRowCell>
                            </TableRow>
                        }
                        else
                        {
                            @if (UserState.Value.Info.ShooterMatchInfos.Count == 0)
                            {
                                <TableRow>
                                    <TableRowCell ColumnSpan="5" TextAlignment="@TextAlignment.Center">@L["NoMatches"]</TableRowCell>
                                </TableRow>
                            }
                            else
                            {
                                <Virtualize Items="@UserState.Value.Info.ShooterMatchInfos" Context="match">
                                    <TableRow>
                                        <TableRowHeader><NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new { id = match.MatchId }))">@match.Name</NavLink></TableRowHeader>
                                        <TableRowCell>@match.AssociationName</TableRowCell>
                                        <TableRowCell>@match.MatchDateTimeStart.ToString("d") ~ @match.MatchDateTimeEnd.ToString("d")<br/>@match.PlaceName</TableRowCell>
                                        <TableRowCell>
                                            @if (!string.IsNullOrEmpty(match.GroupName))
                                            {
                                                <span>@match.GroupName</span>
                                            }
                                            else
                                            {
                                                <Icon Name="FontAwesomeIcons.ExclamationTriangle" TextColor="TextColor.Danger"/>
                                            }
                                        </TableRowCell>
                                        <TableRowCell>
                                            <Button class="me-2" Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<MatchDetail>(new { id = match.MatchId }))"><Icon Name="IconName.Search"/></Button>
                                        </TableRowCell>
                                    </TableRow>
                                </Virtualize>
                            }
                        }
                    </TableBody>
                </Table>
            </CardBody>
        </Card>
    </Column>
</Row>
}

@code
{
    IList<MatchContract> AvailableMatches = new List<MatchContract>();
    BaseShooterInMatchCreateRequest model = new();
    protected override async Task OnInitializedAsync()
    {
        if (!SettingState.Value.Offline)
        {
            var result = await Post<IList<MatchContract>>("api/Match/FetchAvailableMatches");

            if (result != null)
                AvailableMatches = result;
        }
        await base.OnInitializedAsync();
    }

    async Task Submit()
    {
        var request = new MatchShooterCreateRequest()
        {
            ShooterId = model.ShooterId,
            DivisionId = model.DivisionId,
            TeamId = model.TeamId,
            MatchId = model.MatchId
        };

        var result = await Post<OkResponse>("/api/GroupShooter/AddGroupShooter", request);
        if (result is {Status: true })
        {
            UriHelper.NavigateTo(RouteHelper.GetUrl<MatchGroups>(new {id = request.MatchId}));
        }
        
    }
}
