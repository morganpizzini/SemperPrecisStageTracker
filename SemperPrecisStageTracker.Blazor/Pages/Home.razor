@page "/"
@using SemperPrecisStageTracker.Blazor.Store
@inherits SemperPrecisBaseMainComponent
@inject IStringLocalizer<Home> L
@inject NavigationManager UriHelper
@inject IState<UserState> UserState 
@inject IState<SettingsState> SettingState 
@inject IDispatcher Dispatcher
@inject IFeatureManager _featureManager

@if (!SettingState.Value.Offline)
{
<FeatureFlag FlagName="@MyFeatureFlags.MatchHandling">
    <Row>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop.IsFull.OnTablet">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <CardTitle>
                        @L["MatchRegistration"]
                    </CardTitle>
                    <ShooterInGroup SubmitCallback="Submit" Model="model" Shooter="UserState.Value.User" AvailableMatches="AvailableMatches"></ShooterInGroup>
                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop.IsFull.OnTablet">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <CardTitle>
                        @L["NextMatches"]
                    </CardTitle>
                    <Table Striped="true" Hoverable="true">
                        <TableHeader ThemeContrast="ThemeContrast.Dark">
                            <TableRow>
                                <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                <TableHeaderCell>@L["Association"]</TableHeaderCell>
                                <TableHeaderCell>@L["Date"] / @L["Location"]</TableHeaderCell>
                                <TableHeaderCell>@L["Group"]</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @if (ApiLoading)
                            {
                                <TableRow>
                                    <TableRowCell ColumnSpan="5" TextAlignment="@TextAlignment.Center"><Icon Name="FontAwesomeIcons.AnimationSpinner2x"/></TableRowCell>
                                </TableRow>
                            }
                            else
                            {
                                @if (UserState.Value.Info.ShooterMatchInfos.Count == 0)
                                {
                                    <TableRow>
                                        <TableRowCell ColumnSpan="5" TextAlignment="@TextAlignment.Center">@L["NoMatches"]</TableRowCell>
                                    </TableRow>
                                }
                                else
                                {
                                    <Virtualize Items="@UserState.Value.Info.ShooterMatchInfos" Context="match">
                                        <TableRow>
                                            <TableRowHeader><NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new { id = match.MatchId }))">@match.Name</NavLink></TableRowHeader>
                                            <TableRowCell>@match.AssociationName</TableRowCell>
                                            <TableRowCell>@match.MatchDateTimeStart.ToString("d") ~ @match.MatchDateTimeEnd.ToString("d")<br/>@match.PlaceName</TableRowCell>
                                            <TableRowCell>
                                                @if (!string.IsNullOrEmpty(match.GroupName))
                                                {
                                                    <span>@match.GroupName</span>
                                                }
                                                else
                                                {
                                                    <Icon Name="FontAwesomeIcons.ExclamationTriangle" TextColor="TextColor.Danger"/>
                                                }
                                            </TableRowCell>
                                            <TableRowCell>
                                                <Button class="me-2" Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<MatchDetail>(new { id = match.MatchId }))"><Icon Name="IconName.Search"/></Button>
                                            </TableRowCell>
                                        </TableRow>
                                    </Virtualize>
                                }
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
    </Row>
</FeatureFlag>
<Row>
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.IsFull.OnTablet">
        <Card Margin="Margin.Is4.OnY">
            <CardBody>
                <CardTitle>
                    @L["Places"]
                </CardTitle>
                    <Row>
                        @foreach(var place in UserPlaces)
                        {
                            <Column ColumnSize="ColumnSize.IsFull.OnMobile.Is6.OnDesktop" Class="mb-2">
                                <Card Background="Background.Secondary" WhiteText>
                                    <CardBody>
                                        <CardTitle Size="3">
                                            @place.Name
                                        </CardTitle>
                                        <CardText>
                                            @place.CompleteAddress
                                        </CardText>
                                        <Button Color="Color.Primary" Margin="Margin.Is2.FromTop" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<PlaceManage>(new { id = place.PlaceId }))">
                                            @L["Details"] <Icon Name="IconName.ArrowRight" />
                                        </Button>
                                    </CardBody>
                                </Card>
                            </Column>
                        }
                    </Row>
                </CardBody>
        </Card>
    </Column>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop.IsFull.OnTablet">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <CardTitle>
                        @L["Teams"]
                    </CardTitle>
                    <Row>
                        @foreach (var team in teams)
                        {
                            <Column ColumnSize="ColumnSize.IsFull.OnMobile.Is6.OnDesktop" Class="mb-2">
                                <Card Background="Background.Secondary" WhiteText>
                                    <CardBody>
                                        <CardTitle Size="3">
                                            @team.Name
                                        </CardTitle>
                                        <Button Color="Color.Primary" Margin="Margin.Is2.FromTop" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<TeamDetail>(new { id = team.TeamId}))">
                                            @L["Details"] <Icon Name="IconName.ArrowRight" />
                                        </Button>
                                    </CardBody>
                                </Card>
                            </Column>
                        }
                    </Row>
                </CardBody>
            </Card>
        </Column>
</Row>
}

@code
{
    IList<MatchContract> AvailableMatches = new List<MatchContract>();
    IList<PlaceContract> UserPlaces = new List<PlaceContract>();
    IList<TeamContract> teams = new List<TeamContract>();
    BaseShooterInMatchCreateRequest model = new();
    protected override async Task OnInitializedAsync()
    {
        if (!SettingState.Value.Offline)
        {
            if (await _featureManager.IsEnabledAsync(MyFeatureFlags.MatchHandling)){

                AvailableMatches = await Post<List<MatchContract>>("api/Match/FetchAvailableMatches");
            }

            var userPlaces = Call<List<PlaceContract>>(Models.RequestType.Get, $"api/v2/users/{UserState.Value.User?.UserId}/places-managed");
            var userTeams = Call<List<TeamContract>>(Models.RequestType.Get, $"api/v2/teams");

            await Task.WhenAll(userPlaces, userTeams);

            UserPlaces = userPlaces.Result.Data;
            teams = userTeams.Result.Data;
        }
        await base.OnInitializedAsync();
    }

    async Task Submit()
    {
        var request = new MatchShooterCreateRequest()
        {
            ShooterId = model.ShooterId,
            DivisionId = model.DivisionId,
            TeamId = model.TeamId,
            MatchId = model.MatchId
        };

        var result = await Post<OkResponse>("/api/GroupShooter/AddGroupShooter", request);
        if (result is {Status: true })
        {
            Dispatcher.Dispatch(new UpdateUserInfoAction());
            UriHelper.NavigateTo(RouteHelper.GetUrl<MatchGroups>(new {id = request.MatchId}));
        }
        
    }
}
