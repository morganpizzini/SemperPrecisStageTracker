@page "/profile"
@inherits SemperPrecisBaseMainComponent
@inject IStringLocalizer<PlaceDetail> L
@inject IAuthenticationService authService
@inject IState<UserState> UserState 

<Heading Size="HeadingSize.Is1">@L["Profile"]</Heading>
@if (ApiLoading)
{
    <p class="text-center">
        <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
    </p>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.IsHalf.OnDesktop.IsHalf.OnTablet">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    @if (!showEditModel)
                    {
                        <Row>
                            <Column ColumnSize="ColumnSize.IsFull.OnMobile.Is6.OnDesktop">
                                <CardTitle>@L["FirstName"]</CardTitle>
                                <CardText>@UserState.Value.User?.FirstName</CardText>
                                <CardTitle>@L["LastName"]</CardTitle>
                                <CardText>@UserState.Value.User?.LastName</CardText>
                                <CardTitle>@L["birthDate"]</CardTitle>
                                <CardText>@UserState.Value.User?.BirthDate.ToString("d")</CardText>
                            </Column>
                            <Column ColumnSize="ColumnSize.IsFull.OnMobile.Is6.OnDesktop">
                                <CardTitle>@L["Username"]</CardTitle>
                                <CardText>@UserState.Value.User?.Username</CardText>
                                <CardTitle>@L["Email"]</CardTitle>
                                <CardText>@UserState.Value.User?.Email</CardText>
                            </Column>
                        </Row>
                        <Button Size="Size.Small" Color="Color.Primary" Clicked="@EditProfile">@L["EditProfile"]</Button>
                    }
                    else
                    {
                        <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@model">
                            <Row>
                                <Column ColumnSize="ColumnSize.IsFull.OnMobile.Is6.OnDesktop">
                                    <Validation Validator="@ValidationRule.IsNotEmpty">
                                        <Field Horizontal="true">
                                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Name"]</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                                <TextEdit Placeholder="@L["FirstName"]" @bind-Text="@model.FirstName">
                                                    <Feedback>
                                                        <ValidationError>@L["WrongFirstName"]</ValidationError>
                                                    </Feedback>
                                                </TextEdit>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Validation Validator="@ValidationRule.IsNotEmpty">
                                        <Field Horizontal="true">
                                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["LastName"]</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                                <TextEdit Placeholder="@L["LastName"]" @bind-Text="@model.LastName">
                                                    <Feedback>
                                                        <ValidationError>@L["WrongLastName"]</ValidationError>
                                                    </Feedback>
                                                </TextEdit>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Validation Validator="@ValidateDate">
                                        <Field Horizontal="true" JustifyContent="JustifyContent.End">
                                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["BirthDate"]</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                                <DateEdit TValue="DateTime" @bind-Date="@model.BirthDate">
                                                    <Feedback>
                                                        <ValidationError>@L["WrongBirthDate"]</ValidationError>
                                                    </Feedback>
                                                </DateEdit>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsFull.OnMobile.Is6.OnDesktop">
                                    <Validation Validator="@ValidationRule.IsNotEmpty">
                                        <Field Horizontal="true">
                                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Username"]</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                                <TextEdit Placeholder="@L["Username"]" @bind-Text="@model.Username">
                                                    <Feedback>
                                                        <ValidationError>@L["WrongUsername"]</ValidationError>
                                                    </Feedback>
                                                </TextEdit>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Validation Validator="@ValidationRule.IsNotEmpty">
                                        <Field Horizontal="true" JustifyContent="JustifyContent.End">
                                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Email"]</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                                <TextEdit Placeholder="@L["Email"]" Role="TextRole.Email" @bind-Text="@model.Email">
                                                    <Feedback>
                                                        <ValidationError>@L["WrongEmail"]</ValidationError>
                                                    </Feedback>
                                                </TextEdit>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                                        <Button Size="Size.Small" Color="Color.Primary" Clicked="@Submit" Loading="ApiLoading" Disabled="ApiLoading">
                                            <LoadingTemplate><Icon Name="FontAwesomeIcons.AnimationSpinner" />&nbsp;@L["Submit"]</LoadingTemplate>
                                            <ChildContent>@L["Submit"]</ChildContent>
                                        </Button>
                                    </Field>
                                </Column>
                            </Row>
                        </Validations>
                    }

                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop.IsFull.OnTablet">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <CardTitle>@L["ShooterRequested"]</CardTitle>
                    <Table Striped="true" Hoverable="true">
                        <TableHeader ThemeContrast="ThemeContrast.Dark">
                            <TableRow>
                                <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                <TableHeaderCell>@L["RegistrationDate"]</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @if (shooterTeams.Count(x => x.UserApprove && !x.TeamApprove) > 0)
                            {
                                <Virtualize Items="@shooterTeams.Where(x => x.UserApprove && !x.TeamApprove).ToList()" Context="shooterTeam">
                                    <TableRow>
                                        <TableRowHeader>
                                            @shooterTeam.Team.Name
                                        </TableRowHeader>
                                        <TableRowCell>@shooterTeam.RegistrationDate.ToString("d")</TableRowCell>
                                        <TableRowCell>
                                            <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteTeam(shooterTeam))"><Icon Name="IconName.Delete"/></Button>
                                        </TableRowCell>
                                    </TableRow>
                                </Virtualize>
                            }
                            else
                            {
                                <TableRow>
                                    <TableRowCell ColumnSpan="4" TextAlignment="TextAlignment.Center">
                                        @L["NoTeams"]
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop.IsFull.OnTablet">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <CardTitle>@L["WaitingShooterForApproval"]</CardTitle>
                    <Table Striped="true" Hoverable="true">
                        <TableHeader ThemeContrast="ThemeContrast.Dark">
                            <TableRow>
                                <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                <TableHeaderCell>@L["RegistrationDate"]</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @if (shooterTeams.Count(x => !x.UserApprove && x.TeamApprove) > 0)
                            {
                                <Virtualize Items="@shooterTeams.Where(x => !x.UserApprove && x.TeamApprove).ToList()" Context="shooterTeam">
                                    <TableRow>
                                        <TableRowHeader>
                                            @shooterTeam.Team.Name
                                        </TableRowHeader>
                                        <TableRowCell>@shooterTeam.RegistrationDate.ToString("d")</TableRowCell>
                                        <TableRowCell>
                                            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => ApproveTeam(shooterTeam))"><Icon Name="IconName.Check"/></Button>
                                            <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteTeam(shooterTeam))"><Icon Name="IconName.Delete"/></Button>
                                        </TableRowCell>
                                    </TableRow>
                                </Virtualize>
                            }
                            else
                            {
                                <TableRow>
                                    <TableRowCell ColumnSpan="4" TextAlignment="TextAlignment.Center">
                                        @L["NoTeams"]
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
    </Row>
    <Card Margin="Margin.Is4.OnY">
        <CardBody>
            <CardTitle>@L["Teams"]</CardTitle>

            <Table Striped="true" Hoverable="true">
                <TableHeader ThemeContrast="ThemeContrast.Dark">
                    <TableRow>
                        <TableHeaderCell>@L["Name"]</TableHeaderCell>
                        <TableHeaderCell>@L["RegistrationDate"]</TableHeaderCell>
                        <TableHeaderCell></TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    @if (shooterTeams.Count(x=>x.UserApprove && x.TeamApprove) > 0)
                    {
                        <Virtualize Items="@shooterTeams.Where(x=>x.UserApprove && x.TeamApprove).ToList()" Context="shooterTeam">
                            <TableRow>
                                <TableRowHeader>@shooterTeam.Team.Name</TableRowHeader>
                                <TableRowCell>@shooterTeam.RegistrationDate.ToString("d")</TableRowCell>
                                <TableRowCell>
                                    <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteTeam(shooterTeam))"><Icon Name="IconName.Delete" /></Button>
                                </TableRowCell>
                            </TableRow>
                        </Virtualize>
                    }
                    else
                    {
                        <TableRow>
                            <TableRowCell ColumnSpan="3" TextAlignment="TextAlignment.Center">
                                @L["NoTeams"]
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        </CardBody>
    </Card>
}
<Modal @ref="modalRefTeamToApprove">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["ApproveTeam"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @{
               var team = shooterTeams.FirstOrDefault(x => x.Team.TeamId == teamToEdit.TeamId);
           }
           @if (team != null)
           {
               <Field>
                   <FieldLabel>@L["ConfirmApproval"]</FieldLabel>
                   <FieldBody>@team.Team.Name</FieldBody>
               </Field>
           }
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalTeamToEdit(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalTeamToEdit(true))">@L["Submit"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="modalRefTeamToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteTeam"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (teamToDelete.Team != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@teamToDelete.Team.Name</Text>
                </Field>
            }
            <Field>
                <FieldLabel>@L["RegistrationDate"]</FieldLabel>
                <Text>@teamToDelete.RegistrationDate.ToString("d")</Text>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalTeamToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalTeamToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    Validations validations = default!;
    UserUpdateRequest model = new();
    IList<UserTeamContract> shooterTeams = new List<UserTeamContract>();
    UserTeamContract teamToDelete = new();
    private Modal modalRefTeamToDelete = default!;
    private Modal modalRefTeamToApprove = default!;
    ShooterTeamCreateRequest teamToEdit = new();
    bool showEditModel;

    protected override async Task OnInitializedAsync()
    {
     
        await LoadShooterTeams();
        await base.OnInitializedAsync();
    }
    async Task LoadShooterTeams()
    {
        shooterTeams = await Post<List<UserTeamContract>>("api/ShooterTeam/FetchShooterTeamByShooter", new ShooterRequest() { ShooterId = UserState.Value.User?.UserId });
    }

    private void EditProfile()
    {
        model = new UserUpdateRequest()
        {
            UserId = UserState.Value.User?.UserId,
            FirstName = UserState.Value.User?.FirstName,
            LastName = UserState.Value.User?.LastName,
            BirthDate = UserState.Value.User?.BirthDate ?? DateTime.MinValue,
            Email = UserState.Value.User?.Email,
            Username = UserState.Value.User?.Username
        };
        showEditModel = true;
    }

    void ValidateDate(ValidatorEventArgs e)
    {
        var date = e.Value as DateTime?;

        if (date == null)
        {
            e.Status = ValidationStatus.Error;
        }
        else if (date <= new DateTime(1920, 1, 1))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = L["WrongBirthDate"];
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    async Task Submit()
    {
        if (! (await validations.ValidateAll()))
            return;
        await validations.ClearAll();
        var response = await Post<UserContract>("/api/Profile/UpdateProfile", model);
        if (response == null)
            return;
        authService.UpdateLogin(response);
        showEditModel = false;
    }

    void ApproveTeam(UserTeamContract shooterTeam)
    {

        teamToEdit = new ShooterTeamCreateRequest
            {
                ShooterId = UserState.Value.User?.UserId,
                TeamId = shooterTeam.Team.TeamId,
                RegistrationDate = shooterTeam.RegistrationDate
            };
        modalRefTeamToApprove.Show();
    }

    private async Task HideModalTeamToEdit(bool choice)
    {
        if (choice)
        {
            teamToEdit.FromShooter = true;
            var response = await Post<OkResponse>("/api/ShooterTeam/UpsertShooterTeam", teamToEdit);
            if (response is not { Status: true })
            {
                return;
            }
            await LoadShooterTeams();
        }
        teamToEdit = new ShooterTeamCreateRequest();
        await modalRefTeamToApprove.Hide();
    }
    void DeleteTeam(UserTeamContract team)
    {
        if (team == null)
            return;
        teamToDelete = team;
        modalRefTeamToDelete.Show();
    }
    private async Task HideModalTeamToDelete(bool choice)
    {
        if (choice && teamToDelete.Team != null)
        {
            var response = await Post<GroupContract>("/api/ShooterTeam/DeleteShooterTeam", new ShooterTeamDeleteRequest
                {
                    TeamId = teamToDelete.Team.TeamId,
                    ShooterId = UserState.Value.User?.UserId
                });
            if (response == null)
            {
                return;
            }
            await LoadShooterTeams();
        }
        teamToDelete = new UserTeamContract();
        await modalRefTeamToDelete.Hide();
    }
}