@page "/teams/{id}"
@using System.Security.Cryptography.X509Certificates
@inherits SemperPrecisBaseMainComponent
@inject IStringLocalizer<TeamDetail> L
@inject NavigationManager UriHelper
@inject IState<UserState> UserState
<Heading Size="HeadingSize.Is1">
    <Button Class="me-1" Color="Color.Primary" Size="Size.Small" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<Teams>())"><Icon Name="IconName.ArrowLeft" /></Button>
    @L["Detail"]
</Heading>
@if (PageCondition)
{
    <Button Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Link" to="@(RouteHelper.GetUrl<TeamEdit>(new{ id = Id}))"><Icon Name="IconName.Pen" /> @L["EditTeam"]</Button>
    <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteEntity())"><Icon Name="IconName.Delete" /></Button>
}

@if (UserState.Value.User?.Teams.All(x => x.TeamId != team.TeamId) ?? false && teamShooters.All(x => x.User.UserId != UserState.Value.User?.UserId))
{
    <Button Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Button" Clicked="AskToJoin"><Icon Name="IconName.PlusSquare" /> @L["AskToJoin"]</Button>
}
@if (ApiLoading)
{
    <p class="text-center">
        <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
    </p>
}
else
{

    <Row>
        <Column ColumnSize="ColumnSize.Is12.OnMobile.Is6.OnDesktop">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <CardTitle>@L["Team"]</CardTitle>
                    <CardText>@team.Name</CardText>
                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.Is12.OnMobile.Is6.OnDesktop">
            <TeamHolderManageComponent Team="team" AddTeamHolderCallback="AddUserHolderCallback"
                                       Shooters="teamShooters.Where(x=>x.UserApprove && x.TeamApprove).Select(x=>x.User).ToList()"
                                        DeleteShooterTeamCallback="DeleteUserHolderCallback"
                                        ></TeamHolderManageComponent>
        </Column>
    </Row>
    
    @if (canEditTeamShooters)
    {

        <TeamShooterManageComponent Team="team" UpsertShooterCallback="UpsertShooterCallback"
                                    Shooters="shooters"
                                    DeleteShooterTeamCallback="DeleteShooterTeamCallback"
                                    TeamShooters="teamShooters"></TeamShooterManageComponent>
    }
    @if (canSeeTeamShooters)
    {
        <TeamShooterComponent Team="team"
                              ResetPasswordCallback="ResetPasswordCallback"
                              CanEditTeamShooters="canEditTeamShooters"
                              DeleteShooterTeamCallback="DeleteShooterTeamCallback"
                              TeamShooters="teamShooters"
                              CanEditTeamShooterPayment="canEditTeamShooterPayment"></TeamShooterComponent>
    }

}

<Modal @ref="modalRefAskToJoin">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["AskToJoinTeam"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmApproval"]</FieldLabel>
                <FieldBody>@L["WantToJoin", team.Name]</FieldBody>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalAskToJoin(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalAskToJoin(true))">@L["Submit"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="modalRefEntityToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteTeam"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (team != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@team.Name</Text>
                </Field>
            }
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalEntityToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalEntityToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private bool? pageCondition = null;

    private bool PageCondition => pageCondition ??= AuthService.CheckPermissions(PermissionCtor.ManageTeams.EditTeam, Id);

    private Modal modalRefEntityToDelete = default!;

    IList<UserContract> shooters = new List<UserContract>();
    TeamContract team = new();
    private Modal modalRefAskToJoin = default!;
    private ShooterTeamCreateRequest shooterToJoin = new();
    IList<UserTeamContract> teamShooters = new List<UserTeamContract>();


    bool canEditTeamShooters;
    bool canEditTeamShooterPayment;
    bool canSeeTeamShooters;
    protected override async Task OnInitializedAsync()
    {
        team = (await LoadTeam()).Data;
        shooters = await Post<List<UserContract>>("api/Shooter/FetchAllShooters");

        canEditTeamShooters = PageCondition || AuthService.CheckPermissions(Permissions.TeamEditShooters, Id);
        canEditTeamShooterPayment = PageCondition || AuthService.CheckPermissions(Permissions.TeamEditPayment, Id);

        // faccio parte del team e vedo gli altri
        canSeeTeamShooters = (UserState.Value.User?.Teams.Any(x => x.TeamId == team.TeamId) ?? false) || canEditTeamShooters || canEditTeamShooterPayment;

        await LoadShooterTeams();

        await base.OnInitializedAsync();
    }

    void DeleteEntity()
    {
        modalRefEntityToDelete.Show();
    }

    private async Task HideModalEntityToDelete(bool choice)
    {
        if (choice && team != null)
        {
            await Post<TeamContract>("/api/Team/DeleteTeam", new TeamRequest
                {
                    TeamId = team.TeamId
                });
            UriHelper.NavigateTo(RouteHelper.GetUrl<Teams>());
        }
        await modalRefEntityToDelete.Hide();
    }

    Task<BaseResponse<TeamContract>> LoadTeam() =>
        Call<TeamContract>(Models.RequestType.Get, $"api/v2/Teams/{Id}");

    async Task LoadShooterTeams()
    {
        if (canSeeTeamShooters)
        {
            teamShooters = await Post<List<UserTeamContract>>("/api/ShooterTeam/FetchShooterTeamByTeam", new TeamRequest() { TeamId = Id });
        }
    }

    void AskToJoin()
    {
        shooterToJoin = new ShooterTeamCreateRequest
            {
                ShooterId = UserState.Value.User?.UserId,
                TeamId = team.TeamId,
                FromShooter = true,
                RegistrationDate = DateTime.Now
            };
        modalRefAskToJoin.Show();
    }

    private async Task HideModalAskToJoin(bool choice)
    {
        if (choice)
        {
            var response = await Post<OkResponse>("/api/ShooterTeam/UpsertShooterTeam", shooterToJoin);
            await LoadShooterTeams();
        }
        shooterToJoin = new ShooterTeamCreateRequest();
        await modalRefAskToJoin.Hide();
    }

    async Task UpsertShooterCallback(ShooterTeamCreateRequest model)
    {
        var response = await Post<OkResponse>("/api/ShooterTeam/UpsertShooterTeam", model);
        await LoadShooterTeams();
    }

    async Task AddUserHolderCallback(TeamHolderCreateV2Request model)
    {
        await Call(Models.RequestType.Post, $"api/v2/Teams/{Id}/team-holder",null, model);
        team = (await LoadTeam()).Data;
    }

    async Task DeleteUserHolderCallback(string userId)
    {
        await Call(Models.RequestType.Delete, $"api/v2/Teams/{Id}/team-holder/{userId}", L["TeamHolderDeleteSuccess"], null);
        team = (await LoadTeam()).Data;
    }
    
    async Task ResetPasswordCallback(ShooterRequest model)
    {
        var response = await Post<OkResponse>("/api/Authorization/ResetUserPassword", model);
        if (response != null)
        {
            if (response.Status)
                await ShowNotificationSuccess(L["ResetEmailSend"], L["Success"]);
            else
                await ShowNotificationError(string.Join(",", response.Errors), L["Error"]);
        }
    }

    async Task DeleteShooterTeamCallback(ShooterTeamDeleteRequest model)
    {
        await Post<GroupContract>("/api/ShooterTeam/DeleteShooterTeam", model);
        await LoadShooterTeams();
    }

}