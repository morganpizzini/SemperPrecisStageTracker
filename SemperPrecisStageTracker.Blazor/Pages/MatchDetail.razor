@page "/matches/{id}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<MatchDetail> L
@inject NavigationManager UriHelper
@inject IState<UserState> UserState 
@inject IState<SettingsState> SettingState

<Heading Size="HeadingSize.Is1">@L["Detail"]</Heading>
<NavLink Class="me-2" href="@(RouteHelper.GetUrl<Matches>())">@L["BackToList"]</NavLink>
@{
    var currentShooterRegistration = UserState.Value.Info.ShooterMatchInfos.FirstOrDefault(x => x.MatchId == Id);
    if (currentShooterRegistration != null)
    {
        if (!string.IsNullOrEmpty(currentShooterRegistration.GroupName))
        {
            <Alert Color="Color.Success" Visible>
                <AlertMessage>@L["Nice"]</AlertMessage>
                <AlertDescription>@L.Html("InMatchGroup",currentShooterRegistration.GroupName)</AlertDescription>
            </Alert>
        }
        else
        {
            <Alert Color="Color.Warning" Visible>
                <AlertMessage>@L["Attention"]</AlertMessage>
                <AlertDescription>@L["InMatchButNotSquad"]</AlertDescription>
            </Alert>
        }
    }
}

@if (!SettingState.Value.Offline)
{
    @if(canManageGroups){
        <Button Class="me-2" Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<GroupNew>(new{ id = Id}))"><Icon Name="IconName.PlusSquare" /> @L["NewGroup"]</Button>
    }
    <Button Class="me-2" Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<MatchGroups>(new{ id = Id}))"><Icon Name="IconName.Adjust" /> @L["ManageGroups"]</Button>
    @if(canManageStages){
        <Button Class="me-2" Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<StageNew>(new{ id = Id}))"><Icon Name="IconName.PlusSquare" /> @L["NewStage"]</Button>
    }
    @if(canManageMatch){
        <Button Class="me-2" Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<MatchEdit>(new{ id = Id}))"><Icon Name="IconName.Pen" /> @L["EditMatch"]</Button>
        <Button Class="me-2" Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteEntity())"><Icon Name="IconName.Delete" /></Button>
    }
    <Button Class="me-2" Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<MatchStats>(new{Id}))"><Icon Name="FontAwesomeIcons.ChartBar" /> @L["Stats"]</Button>
    @if(!string.IsNullOrEmpty(match.ShortLink)){
        <Button Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<MatchStats>(new{ match.ShortLink}))"><Icon Name="FontAwesomeIcons.ChartBar" /> @L["ShortLink"]</Button>
    }
}
@if (ApiLoading)
{
    <p class="text-center">
        <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
    </p>
}
else
{
    if (match != null)
    {
        @if(canManageMatch){
            <div class="my-1">
                <Switch  TValue="bool" Checked="@match.CompetitionReady" CheckedChanged="@OnCompetitionReadyChanged">@L["MatchReady"]</Switch>
            </div>
        }
        <Row>
            <Column ColumnSize="ColumnSize.IsHalf.OnDesktop.IsFull.OnTablet">
                <Card Margin="Margin.Is2.OnY">
                    <CardBody>
                        <CardTitle>@L["Match"]</CardTitle>
                        <CardText>@match.Name - @match.MatchDateTimeStart.ToString("d") ~ @match.MatchDateTimeEnd.ToString("d")</CardText>
                        <CardTitle>@L["Kind"]</CardTitle>
                        <CardText>@match.Kind</CardText>
                        <CardTitle>@L["Location"]</CardTitle>
                        <CardText>@match.Place.Name</CardText>
                        <CardTitle>@L["Cost"]</CardTitle>
                        @if (match.Cost > 0)
                        {
                            <CardText>@match.Cost</CardText>
                        }
                        else
                        {
                            <CardText>@L["Free"]</CardText>
                        }
                        @if (!string.IsNullOrEmpty(match.PaymentDetails))
                        {
                            <CardTitle>@L["PaymentDetails"]</CardTitle>
                            <CardText>@match.PaymentDetails</CardText>
                        }
                    </CardBody>
                </Card>
            </Column>
            @if (match.Association != null)
            {
                <Column ColumnSize="ColumnSize.IsHalf.OnDesktop.IsFull.OnTablet">
                    <Card Margin="Margin.Is2.OnY">
                        <CardBody>
                            <CardTitle>@L["Association"]</CardTitle>
                            <CardText><NavLink href="@(RouteHelper.GetUrl<AssociationDetail>(new{ id = match.Association.AssociationId}))">@match.Association.Name</NavLink></CardText>
                            <CardTitle>@L["Team"]</CardTitle>
                            <CardText><NavLink href="@(RouteHelper.GetUrl<TeamDetail>(new{ id = match.Team.TeamId}))">@match.Team.Name</NavLink></CardText>
                            <CardTitle>@L["MatchMD"]</CardTitle>

                            @if (canManageMD)
                            {
                                <Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Button" Clicked="@(() => NewMatchDirector())"><Icon Name="IconName.PlusSquare" /> @L["NewMatchDirector"]</Button>
                            }

                            <Table Striped="true" Hoverable="true"  Class="mt-2">
                                <TableHeader ThemeContrast="ThemeContrast.Dark">
                                    <TableRow>
                                        <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                        <TableHeaderCell></TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @if (matchDirectors.Count > 0)
                                    {
                                        <Virtualize Items="@matchDirectors" Context="matchDirector">
                                            <TableRow>
                                                <TableRowHeader>@matchDirector.Shooter.CompleteName</TableRowHeader>
                                                <TableRowCell>
                                                    @if (canManageMD)
                                                    {
                                                        <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteMatchDirector(matchDirector))"><Icon Name="IconName.Delete" /></Button>
                                                    }
                                                </TableRowCell>
                                            </TableRow>
                                        </Virtualize>
                                    }
                                    else
                                    {
                                        <TableRow>
                                            <TableRowCell ColumnSpan="4" TextAlignment="TextAlignment.Center">
                                                @L["NoMatchDirectors"]
                                            </TableRowCell>
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>

                        </CardBody>
                    </Card>
                </Column>
            }
        </Row>
        @if (!SettingState.Value.Offline)
        {
            <Row>
                <Column ColumnSize="ColumnSize.IsFull">
                    <Card Margin="Margin.Is4.OnY">
                        <CardBody>
                            <CardTitle>@L["Groups"] ( @match.Groups.Sum(x=>x.Shooters.Count) @L["Shooters"] )</CardTitle>

                            <Table Striped="true" Hoverable="true">
                                <TableHeader ThemeContrast="ThemeContrast.Dark">
                                    <TableRow>
                                        <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                        <TableHeaderCell>@L["Date"]</TableHeaderCell>
                                        <TableHeaderCell>@L["Count"]</TableHeaderCell>
                                        <TableHeaderCell></TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @if (match.Groups.Count > 0)
                                    {
                                        <Virtualize Items="@match.Groups" Context="group">
                                            <TableRow>
                                                <TableRowHeader>
                                                    <NavLink href="@(RouteHelper.GetUrl<GroupDetail>(new { id = Id, groupId = group.GroupId }))">@group.Name</NavLink>
                                                    <br/>
                                                    <span class="fw-light">@group.Description</span>
                                                </TableRowHeader>
                                                <TableRowHeader>@group.GroupDay.ToString("d")</TableRowHeader>
                                                <TableRowHeader>@group.Shooters.Count / @group.MaxShooterNumber</TableRowHeader>
                                                <TableRowCell>
                                                    <Button class="me-2" Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<GroupDetail>(new{ id = Id, groupId = group.GroupId}))"><Icon Name="IconName.Search" /></Button>
                                                    @if (canManageGroups)
                                                    {
                                                        <Button class="me-2" Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<GroupEdit>(new{ id = Id, groupId = group.GroupId}))"><Icon Name="IconName.Pen" /></Button>
                                                        <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteGroup(group))"><Icon Name="IconName.Delete" /></Button>
                                                    }
                                                </TableRowCell>
                                            </TableRow>
                                        </Virtualize>
                                    }
                                    else
                                    {
                                        <TableRow>
                                            <TableRowCell ColumnSpan="4" TextAlignment="TextAlignment.Center">
                                                @L["NoGroups"]
                                            </TableRowCell>
                                        </TableRow>
                                    }
                                </TableBody>

                            </Table>

                        </CardBody>
                    </Card>
                </Column>
            </Row>
        }

        <Row>
            <Column ColumnSize="ColumnSize.IsFull">
                <Card Margin="Margin.Is4.OnY">
                    <CardBody>
                        <CardTitle>@L["Stages"]</CardTitle>

                        <Table Striped="true" Hoverable="true">
                            <TableHeader ThemeContrast="ThemeContrast.Dark">
                                <TableRow>
                                    <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                    <TableHeaderCell></TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                @if (match.Stages.Count > 0)
                                {
                                    <Virtualize Items="@match.Stages" Context="stage">
                                        <TableRow>
                                            <TableRowHeader><NavLink href="@(RouteHelper.GetUrl<StageDetail>(new{ id = Id, stageId = stage.StageId}))">@stage.Name</NavLink></TableRowHeader>
                                            <TableRowCell>
                                                <Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" Class="me-2" To="@(RouteHelper.GetUrl<StageDetail>(new{ id = Id,stageId = stage.StageId}))"><Icon Name="IconName.Search" /></Button>
                                                @if (canManageStages)
                                                {
                                                    <Button Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<StageEdit>(new {id = Id, stageId = stage.StageId}))"><Icon Name="IconName.Pen" /></Button>
                                                    <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteStage(stage))"><Icon Name="IconName.Delete" /></Button>
                                                }
                                            </TableRowCell>
                                        </TableRow>
                                    </Virtualize>

                                }
                                else
                                {
                                    <TableRow>
                                        <TableRowCell ColumnSpan="2" TextAlignment="TextAlignment.Center">
                                            @L["NoStages"]
                                        </TableRowCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>

                    </CardBody>
                </Card>
            </Column>
        </Row>
    }
}
@if(canManageGroups){
    <Modal @ref="modalRefGroup">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteGroup"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            <Field>
                <FieldLabel>@L["Name"]</FieldLabel>
                <Text>@groupToDelete.Name</Text>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalGroup(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalGroup(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
}

@if (canManageStages) { 
    <Modal @ref="modalRefStage">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteStage"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            <Field>
                <FieldLabel>@L["Name"]</FieldLabel>
                <Text>@stageToDelete.Name</Text>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalStage(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalStage(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
}


@if (canManageMD)
{
    <Modal @ref="modalRefMatchDirectorToEdit">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["NewMatchDirector"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@matchesDirectorToEdit">
                <Validation Validator="@ValidationRule.IsSelected">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Shooter"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <Select TValue="string" @bind-SelectedValue="@matchesDirectorToEdit.ShooterId">
                                <ChildContent>
                                    <SelectItem Value="@("")"></SelectItem>
                                    @foreach (var availableMatchDirector in availableMatchDirectors)
                                    {
                                        <SelectItem Value="@availableMatchDirector.ShooterId">@availableMatchDirector.CompleteName</SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["WrongShooter"]</ValidationError>
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalMatchDirectorToEdit(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalMatchDirectorToEdit(true))">@L["Submit"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalRefMatchDirectorToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteMatchDirector"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (matchDirectorToDelete.Shooter != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@matchDirectorToDelete.Shooter.CompleteName</Text>
                </Field>
            }
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalMatchDirectorToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalMatchDirectorToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
}

@if(canManageMatch){

<Modal @ref="modalRefEntityToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteMatch"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (match != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@match.Name</Text>
                </Field>
                <Field>
                    <FieldLabel>@L["Association"]</FieldLabel>
                    <Text>@match.Association.Name</Text>
                </Field>
                <Field>
                    <FieldLabel>@L["Date"]</FieldLabel>
                    <Text>@match.MatchDateTimeStart.ToString("d") ~ @match.MatchDateTimeEnd.ToString("d")</Text>
                </Field>
            }
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalEntityToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalEntityToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
}
@code {

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private Modal modalRefEntityToDelete = default!;

    private bool? pageCondition = null;

    private bool PageCondition => pageCondition ??= AuthService.CheckPermissions(PermissionCtor.ManageMatches.MatchHandling,Id);

    // reference to the modal component
    private Modal modalRefGroup = default!;
    GroupContract groupToDelete = new();
    private Modal modalRefStage = default!;
    StageContract stageToDelete = new();


    Validations validations = default!;
    private Modal modalRefMatchDirectorToDelete = default!;
    ShooterMatchContract matchDirectorToDelete = new();
    private Modal modalRefMatchDirectorToEdit = default!;
    ShooterMatchCreateRequest matchesDirectorToEdit = new();

    MatchContract match = new();
    IList<ShooterMatchContract> matchDirectors = new List<ShooterMatchContract>();
    IList<ShooterContract> availableMatchDirectors = new List<ShooterContract>();


    bool canManageSO = false;
    bool canManageMD = false;
    bool canManageStages = false;
    bool canManageGroups = false;
    bool canManageMatch = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMatch();
        await LoadMatchDirectors();
        canManageSO = AuthService.CheckPermissions(PermissionCtor.ManageMatches.MatchManageStageSO, Id);
        canManageMD = AuthService.CheckPermissions(PermissionCtor.ManageMatches.MatchManageMD, Id);
        canManageGroups = AuthService.CheckPermissions(PermissionCtor.ManageMatches.MatchManageGroups, Id);
        canManageStages = AuthService.CheckPermissions(PermissionCtor.ManageMatches.MatchManageStages, Id);
        canManageMatch = AuthService.CheckPermissions(PermissionCtor.ManageMatches.MatchHandling, Id);

        await base.OnInitializedAsync();
    }

    async Task LoadMatch()
    {
        match = await Post(()=>MainServiceLayer.GetMatch(Id));
    }


    async Task LoadMatchDirectors()
    {
        matchDirectors = await MainServiceLayer.FetchAllMatchDirector(Id);
        if(!SettingState.Value.Offline)
            availableMatchDirectors = await Post<List<ShooterContract>>("api/Match/FetchAvailableMatchDirector", new MatchRequest() { MatchId = Id });
    }
    async Task OnCompetitionReadyChanged(bool value)
    {
        if(match.CompetitionReady == value)
            return;
        var result = await Post<OkResponse>("api/Match/UpdateMatchCompetitionReady", new MatchCompetitionReadyRequest() { MatchId = Id, Ready = value },false);

        if(result.Status)
            match.CompetitionReady = value;
    }

    void DeleteEntity()
    {
        modalRefEntityToDelete.Show();
    }

    private async Task HideModalEntityToDelete(bool choice)
    {
        if (choice && match != null)
        {
            await Post<MatchContract>("/api/Match/DeleteMatch", new MatchRequest
            {
                MatchId = match.MatchId
            });
            UriHelper.NavigateTo(RouteHelper.GetUrl<Matches>());
        }
        await modalRefEntityToDelete.Hide();
    }

    async Task DeleteGroup(GroupContract group)
    {
        if (group == null)
            return;
        groupToDelete = group;
        await modalRefGroup.Show();
    }

    void DeleteStage(StageContract stage)
    {
        if (stage == null)
            return;
        stageToDelete = stage;
        modalRefStage.Show();
    }

    private async Task HideModalGroup(bool choice)
    {
        if (choice && !string.IsNullOrEmpty(groupToDelete.GroupId))
        {
            await Post<GroupContract>("/api/Group/DeleteGroup", new GroupRequest { GroupId = groupToDelete.GroupId });
            await LoadMatch();
        }
        groupToDelete = new GroupContract();
        await modalRefGroup.Hide();
    }

    private async Task HideModalStage(bool choice)
    {
        if (choice && !string.IsNullOrEmpty(stageToDelete.StageId))
        {
            await Post<GroupContract>("/api/Stage/DeleteStage", new StageRequest { StageId = stageToDelete.StageId });
            await LoadMatch();
        }
        stageToDelete = new StageContract();
        await modalRefStage.Hide();
    }

    async Task NewMatchDirector()
    {
        matchesDirectorToEdit = new ShooterMatchCreateRequest { MatchId = match.MatchId };
        await modalRefMatchDirectorToEdit.Show();
    }

    async Task DeleteMatchDirector(ShooterMatchContract matchDirector)
    {
        if (matchDirector == null)
            return;
        matchDirectorToDelete = matchDirector;
        await modalRefMatchDirectorToDelete.Show();
    }

    private async Task HideModalMatchDirectorToEdit(bool choice)
    {
        if (choice)
        {
            if (! (await validations.ValidateAll()))
                return;
            await validations.ClearAll();
            matchDirectors = await Post<List<ShooterMatchContract>>("/api/Match/CreateMatchDirector", matchesDirectorToEdit);
            //update available match director
            availableMatchDirectors = await Post<List<ShooterContract>>("api/Match/FetchAvailableMatchDirector", new MatchRequest() { MatchId = Id });
        }
        matchesDirectorToEdit = new ShooterMatchCreateRequest();
        await modalRefMatchDirectorToEdit.Hide();
    }

    private async Task HideModalMatchDirectorToDelete(bool choice)
    {
        if (choice && matchDirectorToDelete.Shooter != null)
        {
            matchDirectors = await Post<List<ShooterMatchContract>>("/api/Match/DeleteMatchDirector", new ShooterMatchRequest
            {
                ShooterMatchId = matchDirectorToDelete.ShooterMatchId
            });
            availableMatchDirectors = await Post<List<ShooterContract>>("api/Match/FetchAvailableMatchDirector", new MatchRequest() { MatchId = Id });
            //await LoadMatchDirectors();
        }
        matchDirectorToDelete = new ShooterMatchContract();
        await modalRefMatchDirectorToDelete.Hide();
    }
}