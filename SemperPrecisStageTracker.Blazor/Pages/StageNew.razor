@page "/matches/{id}/stages/new"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<StageNew> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["NewStage"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new{ id = Id}))">@L["BackToMatch"]</NavLink>
<Divider />
<AuthorizeView Roles="@(PermissionCtor.ManageMatches.MatchManageStages.ToString())" Resource="@Id">
    <Authorizing>
        <h3 class="mt-5">@L["Loading"]</h3>
    </Authorizing>
    <NotAuthorized>
        <h3 class="mt-5">@L["NoAuth"]</h3>
    </NotAuthorized>
    <Authorized>
        <StageComponent Model="model" SubmitCallback="Submit"></StageComponent>
    </Authorized>
</AuthorizeView>

@code {

    [Parameter]
    public string Id { get; set; }

    readonly StageContract model = new();

    async Task Submit()
    {
        var request = new StageCreateRequest
            {
                GunReadyCondition = model.GunReadyCondition,
                Index = model.Index,
                MatchId = Id,
                Name = model.Name,
                Rules = model.Rules,
                Scenario = model.Scenario,
                StageProcedure = model.StageProcedure,
                StageProcedureNotes = model.StageProcedureNotes,
                Strings = model.Strings.Select(x => new StageStringCreateRequest
                {
                    StartStop = x.StartStop,
                    CoverGarment = x.CoverGarment,
                    Distance = x.Distance,
                    Name = x.Name,
                    ScoredHits = x.ScoredHits,
                    Scoring = x.Scoring,
                    Targets = x.Targets,
                    TargetsDescription = x.TargetsDescription
                }).ToList()
            };
        var response = await Post<StageContract>("/api/Stage/CreateStage", request);
        if (response != null)
            UriHelper.NavigateTo(RouteHelper.GetUrl<MatchDetail>(new { id = Id }));
    }
}
