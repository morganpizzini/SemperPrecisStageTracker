@page "/matches/{id}/groups/edit/{groupId}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<GroupEdit> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["EditGroup"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new{ id = Id}))">@L["BackToMatch"]</NavLink>
<Divider />
@if (ApiLoading)
{
    <p class="text-center">
        <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
    </p>
}
else
{
    <GroupComponent Model="model" SubmitCallback="Submit"></GroupComponent>
}
@code {

    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string GroupId { get; set; }
    
    GroupContract model = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await Post<GroupContract>("api/Group/GetGroup", new GroupRequest() { GroupId = GroupId });
        if (response == null)
        {
            await base.OnInitializedAsync();
            UriHelper.NavigateTo(RouteHelper.GetUrl<MatchDetail>(new {id = Id}));
            return;
        }
        model = response;
        await base.OnInitializedAsync();
    }

    async Task Submit()
    {
        var request = new GroupUpdateRequest
        {
            Name = model.Name,
            Description = model.Description,
            GroupId = model.GroupId,
            MaxShooterNumber = model.MaxShooterNumber,
            Index = model.Index
        };
        var response = await Post<GroupContract>("/api/Group/UpdateGroup", request);
        if (response != null)
        UriHelper.NavigateTo(RouteHelper.GetUrl<GroupDetail>(new {id = Id, groupId = response.GroupId}));
    }
}
