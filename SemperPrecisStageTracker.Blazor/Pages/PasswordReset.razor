@page "/reset-password"
@inherits SemperPrecisComponent
@inject IStringLocalizer<PasswordReset> L
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;
@inject ClientConfiguration config
@inject IState<UserState> UserState 
@inject IState<SettingsState> SettingState

<Heading Size="HeadingSize.Is1">@L["ResetPassword"]</Heading>
<Row>
    <Column ColumnSize="ColumnSize.Is8.Is2.WithOffset">
        @if (!ApiLoading)
        {
            <Card Margin="Margin.Is4.OnY">
                <CardHeader>@L["Enter your data"]</CardHeader>
                <CardBody>
                    <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@model">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <FieldBody>
                                @shooter.Username
                            </FieldBody>
                        </Field>
                        <Validation Validator="@ValidatePassword">
                            <Field Horizontal>
                                <FieldLabel>Password</FieldLabel>
                                <FieldBody>
                                    <TextEdit Role="TextRole.Password" Placeholder="Password" @bind-Text="@model.Password" @onkeydown="@Enter">
                                        <Feedback>
                                            <ValidationError>Password must be at least 6 characters long!</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation Validator="@ValidatePassword2Auto">
                            <Field Horizontal>
                                <FieldLabel>Re Password</FieldLabel>
                                <FieldBody>

                                    <TextEdit Role="TextRole.Password" Placeholder="Retype password" @onkeydown="@Enter">
                                        <Feedback>
                                            <ValidationError>Password does not match!</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Div Flex="Flex.JustifyContent.End" Margin="Margin.Is3.FromBottom">
                            <Div Padding="Padding.Is2">
                                <Button Size="Size.Small" Color="Color.Primary" Clicked="@Submit" Loading="ApiLoading" Disabled="ApiLoading">
                                    <LoadingTemplate><Icon Name="FontAwesomeIcons.AnimationSpinner" />&nbsp;@L["Submit"]</LoadingTemplate>
                                    <ChildContent>@L["Submit"]</ChildContent>
                                </Button>
                            </Div>
                        </Div>
                    </Validations>
                </CardBody>
            </Card>
        }
    </Column>
</Row>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Data { get; set; }

    Validations validations = default!;
    ResetPasswordRequest model = new();
    ShooterContract shooter = new();

    protected override async Task OnInitializedAsync()
    {
        // redirect to home if already logged in
        if (!string.IsNullOrEmpty(Data))
        {
            var result = await Post<ShooterContract>("api/Authorization/GetUserFromRestorePasswordAlias", new ShooterRequest() { ShooterId = Data });
            if(result == null){
                NavigationManager.NavigateTo(RouteHelper.GetUrl<Login>());
                return;
            }
            shooter = result;
        }

    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender && (UserState.Value.User != null || string.IsNullOrEmpty(Data)) )
        {
            NavigationManager.NavigateTo(RouteHelper.GetUrl<Home>());
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("loadScript", $"https://www.google.com/recaptcha/api.js?render={config.Recaptcha.RecaptchaToken}");
        }

        base.OnAfterRender(firstRender);
    }

    async Task Submit()
    {
        if (!(await validations.ValidateAll()))
            return;
        await validations.ClearAll();
        model.RestorePasswordAlias = Data;
        model.UserId = shooter.ShooterId;
        model.Token = await JSRuntime.InvokeAsync<string>("grecaptcha.execute", config.Recaptcha.RecaptchaToken, new { action = "passwordReset" });
        var response = await Post<OkResponse>("api/Authorization/ResetPassword", model);
        if (response?.Status ?? false)
            NavigationManager.NavigateTo(RouteHelper.GetUrl<Home>());
    }

    public Task Enter(KeyboardEventArgs e)
    {
        if (SettingState.Value.IsDevice)
            return Task.CompletedTask;
        if (e.Code != "Enter" && e.Code != "NumpadEnter")
            return Task.CompletedTask;
        return Submit();
    }

    void ValidatePassword(ValidatorEventArgs e)
    {
        e.Status = Convert.ToString(e.Value)?.Length >= 6 ? ValidationStatus.Success : ValidationStatus.Error;
    }

    void ValidatePassword2Auto(ValidatorEventArgs e)
    {
        var password2 = Convert.ToString(e.Value);

        if (password2?.Length < 6)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Password must be at least 6 characters long!";
        }
        else if (password2 != model.Password)
        {
            e.Status = ValidationStatus.Error;
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }
}