@page "/matches/edit/{id}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<MatchEdit> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["EditMatch"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<Matches>())">@L["BackToList"]</NavLink>
<Divider />
<AuthorizeView Roles="@(PermissionCtor.ManageMatches.EditMatch.ToString())" Resource="@Id">
    <Authorizing>
        <h3 class="mt-5">@L["Loading"]</h3>
    </Authorizing>
    <NotAuthorized>
        <h3 class="mt-5">@L["NoAuth"]</h3>
    </NotAuthorized>
    <Authorized>
        @if (ApiLoading)
        {
            <p class="text-center">
                <Icon Name="FontAwesomeIcons.AnimationSpinner2x"/>
            </p>
        }
        else
        {
            <MatchComponent Model="model" Associations="associations" Places="places" SubmitCallback="Submit"></MatchComponent>
        }
    </Authorized>
</AuthorizeView>



@code {
    [Parameter]
    public string Id { get; set; }
    
    MatchContract model = new();
    IList<AssociationContract> associations = new List<AssociationContract>();
    IList<PlaceContract> places = new List<PlaceContract>();

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.CheckPermissions(PermissionCtor.ManageMatches.EditMatch,Id))
        {
            await base.OnInitializedAsync();
            return;
        }
        associations = await Post<IList<AssociationContract>>("api/Association/FetchAllAssociations", null);
        places = await Post<IList<PlaceContract>>("api/Place/FetchAllPlaces", null);

        model =  await Post<MatchContract>("api/Match/GetMatch", new MatchRequest { MatchId = Id });

        await base.OnInitializedAsync();
    }
    
    async Task Submit()
    {
        // create request
        var request = new MatchUpdateRequest()
        {
            MatchId = model.MatchId,
            Name = model.Name,
            MatchDateTimeStart = model.MatchDateTimeStart,
            MatchDateTimeEnd = model.MatchDateTimeEnd,
            PlaceId = model.Place.PlaceId,
            AssociationId = model.Association.AssociationId,
            OpenMatch = model.OpenMatch,
            UnifyClassifications = model.UnifyClassifications,
            Cost = model.Cost,
            PaymentDetails = model.PaymentDetails
        };
        var response = await Post<MatchContract>("/api/Match/UpdateMatch", request);
        if (response != null)
        UriHelper.NavigateTo(RouteHelper.GetUrl<MatchDetail>(new { id = response.MatchId }));
    }
}
