@page "/places/edit/{id}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<PlaceEdit> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["EditPlace"]</Heading>
<Divider />
@if (PageLoading)
{
    <p class="text-center">
        <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
    </p>
}
else
{
<Validations @ref="validations" Mode="ValidationMode.Manual" Model="@model">
    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Name"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                <TextEdit Placeholder="@L["Name"]" @bind-Text="@model.Name">
                    <Feedback>
                        <ValidationError>@L["WrongName"]</ValidationError>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Holder"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                <TextEdit Placeholder="@L["Holder"]" @bind-Text="@model.Holder">
                    <Feedback>
                        <ValidationError>@L["WrongHolder"]</ValidationError>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Phone"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                <TextEdit Placeholder="@L["Phone"]" @bind-Text="@model.Phone" InputMode="TextInputMode.Tel">
                    <Feedback>
                        <ValidationError>@L["WrongPhone"]</ValidationError>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Email"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                <TextEdit Placeholder="@L["Email"]" @bind-Text="@model.Email" InputMode="TextInputMode.Email">
                    <Feedback>
                        <ValidationError>@L["WrongEmail"]</ValidationError>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Address"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                <TextEdit Placeholder="@L["Address"]" @bind-Text="@model.Address">
                    <Feedback>
                        <ValidationError>@L["WrongAddress"]</ValidationError>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["City"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                <TextEdit Placeholder="@L["City"]" @bind-Text="@model.City">
                    <Feedback>
                        <ValidationError>@L["WrongCity"]</ValidationError>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Region"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                <TextEdit Placeholder="@L["Region"]" @bind-Text="@model.Region">
                    <Feedback>
                        <ValidationError>@L["WrongRegion"]</ValidationError>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["PostalZipCode"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                <TextEdit Placeholder="@L["PostalZipCode"]" @bind-Text="@model.PostalZipCode">
                    <Feedback>
                        <ValidationError>@L["WrongPostalZipCode"]</ValidationError>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Country"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                <TextEdit Placeholder="@L["Country"]" @bind-Text="@model.Country">
                    <Feedback>
                        <ValidationError>@L["WrongCountry"]</ValidationError>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Field Horizontal="true" JustifyContent="JustifyContent.End">
        <FieldBody ColumnSize="ColumnSize.Is10.Is2.WithOffset">
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@Submit" Loading="ApiLoading" Disabled="ApiLoading">
                <LoadingTemplate><Icon Name="FontAwesomeIcons.AnimationSpinner" />&nbsp;@L["Submit"]</LoadingTemplate>
                <ChildContent>@L["Submit"]</ChildContent>
            </Button>
        </FieldBody>
    </Field>
</Validations>
}
@code {
    [Parameter]
    public string Id { get; set; }
    Validations validations;
    PlaceUpdateRequest model = new PlaceUpdateRequest();

    protected override async Task OnInitializedAsync()
    {
        var existing = await Post<PlaceContract>("api/Place/GetPlace", new PlaceRequest { PlaceId = Id });
        model.PlaceId = existing.PlaceId;
        model.Name = existing.Name;
        model.Holder = existing.Holder;
        model.Phone = existing.Phone;
        model.Email = existing.Email;
        model.Address = existing.Address;
        model.City = existing.City;
        model.Region = existing.Region;
        model.PostalZipCode = existing.PostalZipCode;
        model.Country = existing.Country;

        await base.OnInitializedAsync();
    }

    async Task Submit()
    {
        if (!validations.ValidateAll())
            return;
        validations.ClearAll();
        var response = await Post<PlaceContract>("/api/Place/UpdatePlace", model);
        UriHelper.NavigateTo($"/places/{response.PlaceId}");
    }
}
