@inherits SemperPrecisBasePresentationalComponent
@inject IStringLocalizer<SemperPrecisBasePresentationalComponent> L

<Card Margin="Margin.Is4.OnY">
    <CardBody>
        <CardTitle>@L["Shooters"]</CardTitle>
        <Table Striped="true" Hoverable="true">
            <TableHeader ThemeContrast="ThemeContrast.Dark">
                <TableRow>
                    <TableHeaderCell>@L["Name"]</TableHeaderCell>
                    <TableHeaderCell>@L["Birthdate"]</TableHeaderCell>
                    <TableHeaderCell>@L["RegistrationDate"]</TableHeaderCell>
                    <TableHeaderCell></TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @if (TeamShooters.Count(x => x.ShooterApprove && x.TeamApprove) > 0)
                {
                    <Virtualize Items="@TeamShooters.Where(x => x.ShooterApprove && x.TeamApprove).ToList()" Context="shooterTeam">
                        <TableRow>
                            <TableRowHeader>
                                @if (CanEditTeamShooters && shooterTeam.Shooter.HasWarning)
                        {
                            <Icon Name="FontAwesomeIcons.ExclamationTriangle" TextColor="TextColor.Danger" class="me-2" />
                        }
                        @shooterTeam.Shooter.CompleteName
                    </TableRowHeader>
                    <TableRowCell>@shooterTeam.Shooter.BirthDate.ToString("d")</TableRowCell>
                    <TableRowCell>@shooterTeam.RegistrationDate.ToString("d")</TableRowCell>
                    <TableRowCell>

                        <Buttons Role="ButtonsRole.Toolbar">
                            <Buttons Margin="Margin.Is2.FromEnd">
                                @if (AuthService.CheckPermissions(PermissionCtor.ManageShooters.ShowShooters.EditShooter, shooterTeam.Shooter.ShooterId))
                                {
                                    <Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<ShooterDetail>(new { id = shooterTeam.Shooter.ShooterId }))"><Icon Name="IconName.Search" /></Button>
                                    <Button Size="Size.Small" Color="Color.Warning" Type="ButtonType.Button" Clicked="@(() => ResetPassword(shooterTeam))"><Icon Name="IconName.Key" /> </Button>

                                }
                                @if (CanEditTeamShooterPayment)
                                {
                                    <Button Size="Size.Small" Color="Color.Info" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<ShooterTeamPayment>(new { id = shooterTeam.Shooter.ShooterId, teamId = Team.TeamId }))"><Icon Name="IconName.DollarSign" /></Button>
                                }
                            </Buttons>
                            <Buttons>
                                @if (CanEditTeamShooters)
                                {
                                    <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteShooter(shooterTeam))"><Icon Name="IconName.Delete" /></Button>
                                }
                            </Buttons>
                        </Buttons>

                    </TableRowCell>
                </TableRow>
            </Virtualize>
                }
                else
                {
                    <TableRow>
                        <TableRowCell ColumnSpan="4" TextAlignment="TextAlignment.Center">
                            @L["NoShooters"]
                        </TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>

    </CardBody>
</Card>
<Modal @ref="modalRefShooterToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteShooter"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (shooterToDelete.Shooter != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@shooterToDelete.Shooter.CompleteName</Text>
                </Field>
                <Field>
                    <FieldLabel>@L["BirthDate"]</FieldLabel>
                    <Text>@shooterToDelete.Shooter.BirthDate.ToString("d")</Text>
                </Field>
            }
            <Field>
                <FieldLabel>@L["RegistrationDate"]</FieldLabel>
                <Text>@shooterToDelete.RegistrationDate.ToString("d")</Text>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalShooterToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalShooterToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="modalRefResetPassword">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["ResetPassword"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmResetPassword"]</FieldLabel>
            </Field>
            @if (shooterToReset != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@shooterToReset.Shooter.CompleteName</Text>
                </Field>
                <Field>
                    <FieldLabel>@L["Username"]</FieldLabel>
                    <Text>@shooterToReset.Shooter.Username</Text>
                </Field>
                <Field>
                    <FieldLabel>@L["BirthDate"]</FieldLabel>
                    <Text>@shooterToReset.Shooter.BirthDate.ToString("d")</Text>
                </Field>
            }
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalResetPassword(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalResetPassword(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter, EditorRequired]
    public virtual TeamContract Team { get; set; } = new();

    [Parameter, EditorRequired]
    public virtual bool CanEditTeamShooterPayment { get; set; }
    
    [Parameter, EditorRequired]
    public virtual bool CanEditTeamShooters { get; set; }
    
    [Parameter, EditorRequired]
    public virtual IList<ShooterTeamContract> TeamShooters { get; set; } = new List<ShooterTeamContract>();
    
    [Parameter, EditorRequired]
    public EventCallback<ShooterRequest> ResetPasswordCallback { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ShooterTeamDeleteRequest> DeleteShooterTeamCallback { get; set; }

    private Modal modalRefShooterToDelete = default!;
    ShooterTeamContract shooterToDelete = new();
    private Modal modalRefResetPassword = default!;
    ShooterTeamContract shooterToReset = new();

    void ValidateDate(ValidatorEventArgs e)
    {
        var date = e.Value as DateTime?;

        if (date == null)
        {
            e.Status = ValidationStatus.Error;
        }
        else if (date <= new DateTime(1980, 1, 1))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = L["WrongRegistrationDate"];
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    void ResetPassword(ShooterTeamContract shooter)
    {
        shooterToReset = shooter;

        modalRefResetPassword.Show();
    }

    private async Task HideModalResetPassword(bool choice)
    {
        if (choice && shooterToReset != null)
        {
            await ResetPasswordCallback.InvokeAsync(new ShooterRequest
                {
                    ShooterId = shooterToReset.Shooter.ShooterId
                });
        }
        shooterToReset = new();
        await modalRefResetPassword.Hide();
    }
    async Task DeleteShooter(ShooterTeamContract shooter)
    {
        shooterToDelete = shooter;
        await modalRefShooterToDelete.Show();
    }

    private async Task HideModalShooterToDelete(bool choice)
    {
        if (choice && shooterToDelete.Team != null)
        {
            await DeleteShooterTeamCallback.InvokeAsync(new ShooterTeamDeleteRequest
                {
                    ShooterId = shooterToDelete.Shooter.ShooterId,
                    TeamId = Team.TeamId
                });
        }
        shooterToDelete = new ShooterTeamContract();
        await modalRefShooterToDelete.Hide();
    }
}
