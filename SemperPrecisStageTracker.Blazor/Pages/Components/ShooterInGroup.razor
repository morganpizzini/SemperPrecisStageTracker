@inherits SemperPrecisBasePresentationalComponent
@inject IStringLocalizer<AssociationComponent> L

<Validations @ref="validations" Mode="ValidationMode.Manual" Model="@Model">
    @if (Shooter != null)
    {
        <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@Model">
            <Validation Validator="@ValidationRule.IsSelected">
                <Field Horizontal="true" JustifyContent="JustifyContent.End">
                    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Match"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                        @if(AvailableMatches.Count >0){
                            <Select TValue="string" SelectedValue="@Model.MatchId" SelectedValueChanged="@OnSelectedMatchChanged">
                                <ChildContent>
                                    <SelectItem Value="@("")"></SelectItem>
                                    @foreach (var matchContract in AvailableMatches)
                                    {
                                        <SelectItem Value="@matchContract.MatchId">@matchContract.Name (@matchContract.MatchDateTimeStart.ToString("d") - @matchContract.MatchDateTimeEnd.ToString("d"))</SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["WrongMatch"]</ValidationError>
                                </Feedback>
                            </Select>
                        }else{
                            <p>@L["NoAvailableMatches"]</p>
                        }
                    </FieldBody>
                </Field>
            </Validation>
        </Validations>
    }
    @if (AvailableShooters.Count > 0)
    {
        <Validation Validator="@ValidationRule.IsSelected">
            <Field Horizontal="true" JustifyContent="JustifyContent.End">
                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Shooter"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                    <Select TValue="string" SelectedValue="@Model.ShooterId" SelectedValueChanged="@OnSelectedShooterChanged">
                        <ChildContent>
                            <SelectItem Value="@("")"></SelectItem>
                            @foreach (var shooter in AvailableShooters)
                            {
                                <SelectItem Value="@shooter.UserId">@shooter.LastName @shooter.FirstName (@shooter.BirthDate.ToString("d"))</SelectItem>
                            }
                        </ChildContent>
                        <Feedback>
                            <ValidationError>@L["WrongShooter"]</ValidationError>
                        </Feedback>
                    </Select>
                </FieldBody>
            </Field>
        </Validation>
    }
    <Row>
        <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnTablet">
            <Validation Validator="@ValidationRule.IsSelected">
                <Field Horizontal="true" JustifyContent="JustifyContent.End">
                    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Team"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                        <Select TValue="string" @bind-SelectedValue="@Model.TeamId" Disabled="@string.IsNullOrEmpty(Model.ShooterId)">
                            <ChildContent>
                                <SelectItem Value="@("")"></SelectItem>
                                @foreach (var team in Teams)
                                {
                                    <SelectItem Value="@team.TeamId">@team.Name</SelectItem>
                                }
                            </ChildContent>
                            <Feedback>
                                <ValidationError>@L["WrongTeam"]</ValidationError>
                            </Feedback>
                        </Select>
                    </FieldBody>
                </Field>
            </Validation>
        </Column>
        <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnTablet">
            <Validation Validator="@ValidationRule.IsSelected">
                <Field Horizontal="true" JustifyContent="JustifyContent.End">
                    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Division"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                        <Select TValue="string" @bind-SelectedValue="@Model.DivisionId" Disabled="@(string.IsNullOrEmpty(Model.ShooterId) || string.IsNullOrEmpty(Model.MatchId))">
                            <ChildContent>
                                <SelectItem Value="@("")"></SelectItem>
                                @foreach (var division in Divisions)
                                {
                                    <SelectItem Value="@division">@division</SelectItem>
                                }
                            </ChildContent>
                            <Feedback>
                                <ValidationError>@L["WrongDivision"]</ValidationError>
                            </Feedback>
                        </Select>
                    </FieldBody>
                </Field>
            </Validation>
        </Column>
        @if (AvailableShooters.Count > 0)
        {
            <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnTablet">
                <Validation Validator="@ValidateDate">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["HasPay"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <DateEdit TValue="DateTime?" @bind-Date="@Model.HasPay">
                                <Feedback>
                                    <ValidationError>@L["WrongHasPay"]</ValidationError>
                                </Feedback>
                            </DateEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Column>
        }
    </Row>
    <Field Horizontal="true" JustifyContent="JustifyContent.End">
        <FieldBody ColumnSize="ColumnSize.Is10.Is2.WithOffset">
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@Submit">@L["Submit"]</Button>
        </FieldBody>
    </Field>
</Validations>
@code {
    Validations validations = default!;

    [Parameter]

    public IList<UserContract> AvailableShooters { get; set; } = new List<UserContract>();

    [Parameter]

    public IList<MatchContract> AvailableMatches { get; set; } = new List<MatchContract>();

    private UserContract? shooter;
    [Parameter]
    public UserContract? Shooter
    {
        get => shooter;
        set
        {
            shooter = value;
            Model.ShooterId = shooter?.UserId;
        } 
    }

    //[Parameter]
    public IList<TeamContract> Teams { get; set; } = new List<TeamContract>();

    //[Parameter]
    public IList<string> Divisions { get; set; } = new List<string>();

    [Parameter]
    public MatchContract? Match { get; set; }
    
    private BaseShooterInMatchCreateRequest _model = new BaseShooterInMatchCreateRequest();

    [Parameter,EditorRequired]
    public BaseShooterInMatchCreateRequest Model
    {
        get => _model;
        set
        {
            _model = value;
            var shooter = Shooter ?? AvailableShooters.FirstOrDefault(x => x.UserId == Model.ShooterId);
            if (shooter == null)
                return;
            if (Shooter == null || Teams.Count == 0)
            {
                Teams = shooter.Teams;
            }
            if(Match != null)
                Divisions = Match.UnifyClassifications || Match.OpenMatch ? Match.Association.Divisions : shooter.Classifications.Select(x => x.Division).ToList();
        }
    }

    [Parameter,EditorRequired]
    public EventCallback SubmitCallback { get; set; }

    async Task Submit()
    {
        if (!(await validations.ValidateAll()))
            return;

        await validations.ClearAll();

        await SubmitCallback.InvokeAsync();
    }

    void ValidateDate(ValidatorEventArgs e)
    {
        var date = e.Value as DateTime?;

        if (date == null)
        {
            e.Status = ValidationStatus.Success;
        }
        // not upper than today
        else if (date.Value.Date > DateTime.Now.Date)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = L["WrongDate"];
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    void OnSelectedShooterChanged(string value)
    {
        var shooter = AvailableShooters.FirstOrDefault(x => x.UserId == value);
        if (shooter == null)
            return;
        Model.ShooterId = value;
        Model.DivisionId = string.Empty;
        Model.TeamId = string.Empty;
        Teams = shooter.Teams;
        if(Match != null)
            Divisions = Match.UnifyClassifications || Match.OpenMatch ? Match.Association.Divisions : shooter.Classifications.Select(x => x.Division).ToList();
    }

    void OnSelectedMatchChanged(string value)
    {
        if (string.IsNullOrEmpty(value))
            return;
        Match = AvailableMatches.FirstOrDefault(x => x.MatchId == value);
        if (Match == null)
            return;
        Model.MatchId = Match.MatchId;
        if(Shooter!=null)
            Divisions = Match.UnifyClassifications || Match.OpenMatch ? Match.Association.Divisions : Shooter.Classifications.Select(x => x.Division).ToList();   

    }
}
