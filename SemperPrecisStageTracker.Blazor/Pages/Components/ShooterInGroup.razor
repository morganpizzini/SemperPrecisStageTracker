@inherits SemperPrecisBasePresentationalComponent
@inject IStringLocalizer<AssociationComponent> L

<Row>
    <Column ColumnSize="ColumnSize.IsFull">
        <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@Model">
            <Validation Validator="@ValidationRule.IsSelected">
                <Field Horizontal="true" JustifyContent="JustifyContent.End">
                    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Shooter"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">                                
                        <Select TValue="string" SelectedValue="@Model.ShooterId" SelectedValueChanged="@OnSelectedShooterChanged">
                            <ChildContent>
                                <SelectItem Value="@("")"></SelectItem>
                                @foreach (var shooter in AvailableShooters)
                                {
                                    <SelectItem Value="@shooter.ShooterId">@shooter.LastName @shooter.FirstName (@shooter.BirthDate.ToString("d"))</SelectItem>
                                }
                            </ChildContent>
                            <Feedback>
                                <ValidationError>@L["WrongShooter"]</ValidationError>
                            </Feedback>
                        </Select>
                    </FieldBody>
                </Field>
            </Validation>
            <Row>
                <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnTablet">
                    <Validation Validator="@ValidationRule.IsSelected">
                        <Field Horizontal="true" JustifyContent="JustifyContent.End">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Team"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                <Select TValue="string" @bind-SelectedValue="@Model.TeamId" Disabled="string.IsNullOrEmpty(Model.ShooterId)">
                                    <ChildContent>
                                        <SelectItem Value="@("")"></SelectItem>
                                        @foreach (var team in Teams)
                                        {
                                            <SelectItem Value="@team.TeamId">@team.Name</SelectItem>
                                        }
                                    </ChildContent>
                                    <Feedback>
                                        <ValidationError>@L["WrongTeam"]</ValidationError>
                                    </Feedback>
                                </Select>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Column>
                <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnTablet">
                    <Validation Validator="@ValidationRule.IsSelected">
                        <Field Horizontal="true" JustifyContent="JustifyContent.End">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Division"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                <Select TValue="string" @bind-SelectedValue="@Model.DivisionId" Disabled="string.IsNullOrEmpty(Model.ShooterId)">
                                    <ChildContent>
                                        <SelectItem Value="@("")"></SelectItem>
                                        @foreach (var division in Divisions)
                                        {
                                            <SelectItem Value="@division">@division</SelectItem>
                                        }
                                    </ChildContent>
                                    <Feedback>
                                        <ValidationError>@L["WrongDivision"]</ValidationError>
                                    </Feedback>
                                </Select>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Column>
                <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnTablet">
                    <Validation Validator="@ValidateDate">
                        <Field Horizontal="true" JustifyContent="JustifyContent.End">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["HasPay"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                <DateEdit TValue="DateTime?" @bind-Date="@Model.HasPay">
                                    <Feedback>
                                        <ValidationError>@L["WrongHasPay"]</ValidationError>
                                    </Feedback>
                                </DateEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Column>

            </Row>
            <Field Horizontal="true" JustifyContent="JustifyContent.End">
                <FieldBody ColumnSize="ColumnSize.Is10.Is2.WithOffset">
                    <Button Size="Size.Small" Color="Color.Primary" Clicked="@Submit">@L["Submit"]</Button>
                </FieldBody>
            </Field>
        </Validations>
    </Column>
</Row>
@code {
    Validations validations;

    [Parameter,EditorRequired]

    public IList<ShooterContract> AvailableShooters { get; set; } = new List<ShooterContract>();

    //[Parameter]
    public IList<TeamContract> Teams { get; set; } = new List<TeamContract>();

    //[Parameter]
    public IList<string> Divisions { get; set; } = new List<string>();

    [Parameter,EditorRequired]
    public MatchContract Match { get; set; } = new ();
    
    private GroupShooterCreateRequest _model = new();
    [Parameter,EditorRequired]
    public GroupShooterCreateRequest Model
    {
        get => _model;
        set
        {
            _model = value;
            var shooter = AvailableShooters.FirstOrDefault(x => x.ShooterId == Model.ShooterId);
            if (shooter == null)
                return;
            Teams = shooter.Teams;
            Divisions = Match.UnifyClassifications || Match.OpenMatch ? Match.Association.Divisions : shooter.Classifications.Select(x => x.Division).ToList();
        }
    }

    [Parameter,EditorRequired]
    public EventCallback SubmitCallback { get; set; }

    async Task Submit()
    {
        if (!(await validations.ValidateAll()))
            return;

        await validations.ClearAll();

        await SubmitCallback.InvokeAsync();
    }

    void ValidateDate(ValidatorEventArgs e)
    {
        var date = e.Value as DateTime?;

        if (date == null)
        {
            e.Status = ValidationStatus.Success;
        }
        // not upper than today
        else if (date.Value.Date > DateTime.Now.Date)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = L["WrongDate"];
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    void OnSelectedShooterChanged(string value)
    {
        var shooter = AvailableShooters.FirstOrDefault(x => x.ShooterId == value);
        if (shooter == null)
            return;
        Model.ShooterId = value;
        Model.DivisionId = string.Empty;
        Model.TeamId = string.Empty;
        Teams = shooter.Teams;
        Divisions = Match.UnifyClassifications || Match.OpenMatch ? Match.Association.Divisions : shooter.Classifications.Select(x => x.Division).ToList();
    }
}
