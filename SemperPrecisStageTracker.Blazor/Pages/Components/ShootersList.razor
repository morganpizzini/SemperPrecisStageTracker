@inject IJSRuntime JSRuntime
@inherits SemperPrecisBasePresentationalComponent
@inject IStringLocalizer<ShootersList> L

<div class="form-group">
    <input @ref="searchInput" class="form-control" @bind-value="SearchText"
           @bind-value:event="oninput" placeholder="@L["Search"]" />
</div>
@if (AuthService.CheckPermissions(PermissionCtor.ManageUsers.CreateShooters))
{
    <Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" to="@(RouteHelper.GetUrl<ShooterNew>())"><Icon Name="IconName.PlusSquare" /> @L["NewShooter"]</Button>
}
<Divider />
<Table Striped="true" Hoverable="true">
    <TableHeader ThemeContrast="ThemeContrast.Dark">
        <TableRow>
            <TableHeaderCell>@L["Name"]</TableHeaderCell>
            <TableHeaderCell>@L["Username"]</TableHeaderCell>
            <TableHeaderCell>@L["BirthDate"]</TableHeaderCell>
            <TableHeaderCell></TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @if (ApiLoading)
        {
            <TableRow>
                <TableRowCell ColumnSpan="4" TextAlignment="@TextAlignment.Center"><Icon Name="FontAwesomeIcons.AnimationSpinner2x" /></TableRowCell>
            </TableRow>
        }
        else
        {
            @if (FilteredList.Count == 0)
            {
                <TableRow>
                    <TableRowCell ColumnSpan="4" TextAlignment="@TextAlignment.Center">@L["NoData"]</TableRowCell>
                </TableRow>
            }
            else
            {
                <Virtualize Items="@FilteredList" Context="shooter">
                    <TableRow>
                        <TableRowHeader>
                            @if (shooter.HasWarning)
                            {
                                <Icon Name="FontAwesomeIcons.ExclamationTriangle" TextColor="TextColor.Danger" class="me-2"/>
                            }
                            <NavLink href="@(RouteHelper.GetUrl<ShooterDetail>(new { id = shooter.UserId }))">@shooter.CompleteName</NavLink>
                        </TableRowHeader>
                        <TableRowCell>@shooter.Username</TableRowCell>
                        @if (AuthService.CheckPermissions(PermissionCtor.ManageUsers.ShowShooters.EditShooter, shooter.UserId))
                {
                    <TableRowCell>@shooter.BirthDate.ToString("d")</TableRowCell>
                }
                else
                {
                    <TableRowCell></TableRowCell>
                }
                        <TableRowCell>
                            <Buttons Role="ButtonsRole.Toolbar">
                                <Buttons Margin="Margin.Is2.FromEnd">
                                    @if (AuthService.CheckPermissions(PermissionCtor.ManageUsers.EditShooter, shooter.UserId))
                                    {
                                        <Button Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<ShooterEdit>(new { id = shooter.UserId }))"><Icon Name="IconName.Pen"/></Button>
                                    }
                                    @if (AuthService.CheckPermissions(PermissionCtor.ManageUsers.ShowShooters.EditShooter, shooter.UserId))
                                    {
                                        <Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<ShooterDetail>(new { id = shooter.UserId }))"><Icon Name="IconName.Search"/></Button>
                                    }
                                </Buttons>
                                <Buttons>
                                    @if (AuthService.CheckPermissions(PermissionCtor.ManageUsers, shooter.UserId))
                                    {
                                        <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteEntity(shooter))"><Icon Name="IconName.Delete"/></Button>
                                    }
                                </Buttons>
                            </Buttons>
                        </TableRowCell>
            </TableRow>
        </Virtualize>
            }
        }
    </TableBody>
</Table>
<Modal @ref="modalRefEntityToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteShooter"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (entityToDelete != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@entityToDelete.CompleteName</Text>
                </Field>
                <Field>
                    <FieldLabel>@L["Username"]</FieldLabel>
                    <Text>@entityToDelete.Username</Text>
                </Field>
                <Field>
                    <FieldLabel>@L["BirthDate"]</FieldLabel>
                    <Text>@entityToDelete.BirthDate.ToString("d")</Text>
                </Field>
            }
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalEntityToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalEntityToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    ElementReference searchInput;
    public string SearchText = string.Empty;
    [Parameter]
    public IList<UserContract> Shooters { get; set; } = new List<UserContract>();

    [Parameter]
    public bool TeamDetailView { get; set; } = false;

    [Parameter]
    public EventCallback ReloadListCallback { get; set; }

    [Parameter]
    public EventCallback<string> DeleteShooterCallback { get; set; }

    IList<UserContract> FilteredList
    {
        get
        {
            var search = SearchText.Split(new[] { " " }, StringSplitOptions.RemoveEmptyEntries)
                        .Select(s => s.ToLower().Trim()).ToArray();
            return Shooters.Where( tags =>
                search.All(s => tags.Searchable.Any(t => t.Contains(s)))).ToList();
        }
    }

    private Modal modalRefEntityToDelete = default!;
    UserContract entityToDelete = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await JSRuntime.DebounceEvent(searchInput, "input", TimeSpan.FromMilliseconds(500));
        }
    }

    void DeleteEntity(UserContract entity)
    {
        if (entity == null)
            return;
        entityToDelete = entity;
        modalRefEntityToDelete.Show();
    }

    private async Task HideModalEntityToDelete(bool choice)
    {
        if (choice && entityToDelete != null)
        {
            await DeleteShooterCallback.InvokeAsync(entityToDelete.UserId);
        }
        entityToDelete = new UserContract();
        await modalRefEntityToDelete.Hide();
    }

}