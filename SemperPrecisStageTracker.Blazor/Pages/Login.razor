@page "/login"
@using System.ComponentModel.DataAnnotations
@using SemperPrecisStageTracker.Contracts.Utilities
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Login> L
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider auth

<Heading Size="HeadingSize.Is1">@L["Login"]</Heading>
<Alert Color="Color.Success">
    <AlertDescription>
        Username: test<br />
        Password: test
    </AlertDescription>
</Alert>
<Row>
    <Column ColumnSize="ColumnSize.Is6.Is3.WithOffset">
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>@L["Login"]</CardHeader>
            <CardBody>
                <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@model">
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull">@L["Username"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull">
                                <TextEdit Placeholder="@L["Username"]" @bind-Text="@model.Username">
                                    <Feedback>
                                        <ValidationError>@L["WrongUsername"]</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull">@L["Password"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull">
                                <TextEdit Placeholder="@L["Password"]" Role="TextRole.Password" @bind-Text="@model.Password">
                                    <Feedback>
                                        <ValidationError>@L["WrongPassword"]</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                    @if (!string.IsNullOrEmpty(error))
                    {
                        <Alert Color="Color.Danger">
                            <AlertDescription>
                                @error
                            </AlertDescription>
                        </Alert>
                    }
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldBody ColumnSize="ColumnSize.Is10.Is2.WithOffset">
                            <Button Size="Size.Small" Color="Color.Primary" Clicked="@Submit">@L["Submit"]</Button>
                        </FieldBody>
                    </Field>
                </Validations>
            </CardBody>
        </Card>
    </Column>
</Row>

@code {
    Validations validations;
    private SignInRequest model = new SignInRequest();
    private bool loading;
    private string error;

    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (AuthenticationService.User != null)
        {
            NavigationManager.NavigateTo("");
        }
    }

    private async void Submit()
    {
        if (!validations.ValidateAll())
            return;
        validations.ClearAll();
        try
        {
            var loginResult = await AuthenticationService.Login(model.Username, model.Password);
            if (loginResult)
            {
                await JSRuntime.InvokeAsync<NotificationSubscriptionCreateRequest>("BlazorPWA.requestSubscription");
                var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
                NavigationManager.NavigateTo(returnUrl);
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

}