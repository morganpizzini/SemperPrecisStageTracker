@page "/matches/{id}/stages/edit/{stageId}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<StageEdit> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["EditStage"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new{ id = Id}))">@L["BackToMatch"]</NavLink>
<Divider />

<AuthorizeView Roles="@(PermissionCtor.ManageMatches.MatchManageStages.ToString())" Resource="@Id">
    <Authorizing>
        <h3 class="mt-5">@L["Loading"]</h3>
    </Authorizing>
    <NotAuthorized>
        <h3 class="mt-5">@L["NoAuth"]</h3>
    </NotAuthorized>
    <Authorized>
        <StageComponent Model="model" SubmitCallback="Submit" ApiLoading="ApiLoading"></StageComponent>
    </Authorized>
</AuthorizeView>

@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string StageId { get; set; }

    StageContract model = new();

    protected override async Task OnInitializedAsync()
    {
        model = await Post<StageContract>("api/Stage/GetStage", new StageRequest() { StageId = StageId }) ?? new StageContract();
        await base.OnInitializedAsync();
    }

    async Task Submit()
    {
        var request = new StageUpdateRequest
        {
            StageId = model.StageId,
            GunReadyCondition = model.GunReadyCondition,
            Index = model.Index,
            Name = model.Name,
            Rules = model.Rules,
            Scenario = model.Scenario,
            StageProcedure = model.StageProcedure,
            StageProcedureNotes = model.StageProcedureNotes,
            Strings = model.Strings.Select(x => new StageStringUpdateRequest
            {
                StageStringId = x.StageStringId,
                StartStop = x.StartStop,
                CoverGarment = x.CoverGarment,
                Distance = x.Distance,
                Name = x.Name,
                ScoredHits = x.ScoredHits,
                Scoring = x.Scoring,
                Targets = x.Targets,
                TargetsDescription = x.TargetsDescription
            }).ToList()
        };
        var response = await Post<StageContract>("/api/Stage/UpdateStage", request);
        if (response != null)
            UriHelper.NavigateTo(RouteHelper.GetUrl<StageDetail>(new { id = Id, stageId = response.StageId }));
    }
}
