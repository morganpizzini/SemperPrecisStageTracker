@page "/shooters/{id}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<ShooterDetail> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["Detail"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<Shooters>())">@L["BackToList"]</NavLink>

<Divider />
<AuthorizeView Roles="@(PermissionCtor.ManageShooters.ShowShooters.EditShooter.ToString())" Resource="@Id">
    <Authorizing>
        <h3 class="mt-5">@L["Loading"]</h3>
    </Authorizing>
    <NotAuthorized>
        <h3 class="mt-5">@L["NoAuth"]</h3>
    </NotAuthorized>
    <Authorized>
        @if (PageCondition)
        {
            <Button Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<ShooterEdit>(new {id = Id}))"><Icon Name="IconName.Pen" /> @L["EditShooter"]</Button>
            <Button Size="Size.Small" Color="Color.Danger" Type="ButtonType.Button" Clicked="@(() => DeleteEntity())"><Icon Name="IconName.Delete" /> @L["DeleteShooter"]</Button>
        }
        @if (ApiLoading)
        {
            <p class="text-center">
                <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
            </p>
        }
        else
        {
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <Card Margin="Margin.Is4.OnY">
                        <CardBody>
                            <CardTitle>@L["Shooter"]</CardTitle>
                            <CardText>@shooter.LastName @shooter.FirstName</CardText>
                            <CardTitle>@L["Born"]</CardTitle>
                            <CardText>@shooter.BirthLocation @L["on"] @shooter.BirthDate.ToString("d")</CardText>
                            <CardTitle>@L["Address"]</CardTitle>
                            <CardText>@shooter.CompleteAddress</CardText>
                            <CardTitle>@L["FiscalCode"]</CardTitle>
                            <CardText>@shooter.FiscalCode</CardText>
                            <CardTitle>@L["Phone"]</CardTitle>
                            <CardText>@shooter.Phone</CardText>
                        </CardBody>
                    </Card>
                </Column>

                <Column ColumnSize="ColumnSize.Is6">
                    <Card Margin="Margin.Is4.OnY">
                        <CardBody>
                            <CardTitle>@L["Email"]</CardTitle>
                            <CardText>@shooter.Email</CardText>
                            <CardTitle>@L["FireArmLicence"]</CardTitle>
                            <CardText>
                                @if (shooter.FirearmsLicenceExpireDate.Date <= DateTime.Now)
                                {
                                    <Icon Name="FontAwesomeIcons.ExclamationTriangle" TextColor="TextColor.Danger" class="me-2" />
                                }
                                @shooter.FirearmsLicence (@shooter.FirearmsLicenceExpireDate.ToString("d"))
                            </CardText>
                            <CardTitle>@L["MedicalExaminationExpireDate"]</CardTitle>
                            <CardText>
                                @if (!shooter.MedicalExaminationExpireDate.HasValue || shooter.MedicalExaminationExpireDate.Value.Date <= DateTime.Now)
                                {
                                    <Icon Name="FontAwesomeIcons.ExclamationTriangle" TextColor="TextColor.Danger" class="me-2" />
                                }
                                @if (shooter.MedicalExaminationExpireDate.HasValue)
                                {
                                    @shooter.MedicalExaminationExpireDate.Value.ToString("d")
                                }
                            </CardText>
                        </CardBody>
                    </Card>
                </Column>
            </Row>

            <Row>
                <Column ColumnSize="ColumnSize.IsFull">
                    @if (PageCondition)
                    {
                        <Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Button" Clicked="@(() => NewTeam())"><Icon Name="IconName.PlusSquare" /> @L["NewTeam"]</Button>
                    }
                    @if (PageCondition)
                    {
                        <Row>
                            <Column ColumnSize="ColumnSize.Is6.OnDesktop.IsFull.OnTablet">
                                <Card Margin="Margin.Is4.OnY">
                                    <CardBody>
                                        <CardTitle>@L["ShooterRequested"]</CardTitle>
                                        <Table Striped="true" Hoverable="true">
                                            <TableHeader ThemeContrast="ThemeContrast.Dark">
                                                <TableRow>
                                                    <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                                    <TableHeaderCell>@L["RegistrationDate"]</TableHeaderCell>
                                                    <TableHeaderCell></TableHeaderCell>
                                                </TableRow>
                                            </TableHeader>
                                            <TableBody>
                                                @if (shooterTeams.Count(x => x.ShooterApprove && !x.TeamApprove) > 0)
                                                {
                                                    <Virtualize Items="@shooterTeams.Where(x => x.ShooterApprove && !x.TeamApprove).ToList()" Context="shooterTeam">
                                                        <TableRow>
                                                            <TableRowHeader>
                                                                @shooterTeam.Team.Name
                                                            </TableRowHeader>
                                                            <TableRowCell>@shooterTeam.RegistrationDate.ToString("d")</TableRowCell>
                                                            <TableRowCell>
                                                                <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteTeam(shooterTeam))"><Icon Name="IconName.Delete"/></Button>
                                                            </TableRowCell>
                                                        </TableRow>
                                                    </Virtualize>
                                                }
                                                else
                                                {
                                                    <TableRow>
                                                        <TableRowCell ColumnSpan="4" TextAlignment="TextAlignment.Center">
                                                            @L["NoTeams"]
                                                        </TableRowCell>
                                                    </TableRow>
                                                }
                                            </TableBody>
                                        </Table>
                                    </CardBody>
                                </Card>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is6.OnDesktop.IsFull.OnTablet">
                                <Card Margin="Margin.Is4.OnY">
                                    <CardBody>
                                        <CardTitle>@L["WaitingShooterForApproval"]</CardTitle>
                                        <Table Striped="true" Hoverable="true">
                                            <TableHeader ThemeContrast="ThemeContrast.Dark">
                                                <TableRow>
                                                    <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                                    <TableHeaderCell>@L["RegistrationDate"]</TableHeaderCell>
                                                    <TableHeaderCell></TableHeaderCell>
                                                </TableRow>
                                            </TableHeader>
                                            <TableBody>
                                                @if (shooterTeams.Count(x => !x.ShooterApprove && x.TeamApprove) > 0)
                                                {
                                                    <Virtualize Items="@shooterTeams.Where(x => !x.ShooterApprove && x.TeamApprove).ToList()" Context="shooterTeam">
                                                        <TableRow>
                                                            <TableRowHeader>
                                                                @shooterTeam.Team.Name
                                                            </TableRowHeader>
                                                            <TableRowCell>@shooterTeam.RegistrationDate.ToString("d")</TableRowCell>
                                                            <TableRowCell>
                                                                <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => EditShooter(shooterTeam))"><Icon Name="IconName.Check"/></Button>
                                                                <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteTeam(shooterTeam))"><Icon Name="IconName.Delete"/></Button>
                                                            </TableRowCell>
                                                        </TableRow>
                                                    </Virtualize>
                                                }
                                                else
                                                {
                                                    <TableRow>
                                                        <TableRowCell ColumnSpan="4" TextAlignment="TextAlignment.Center">
                                                            @L["NoTeams"]
                                                        </TableRowCell>
                                                    </TableRow>
                                                }
                                            </TableBody>
                                        </Table>
                                    </CardBody>
                                </Card>
                            </Column>
                        </Row>
                    }
                    <Card Margin="Margin.Is4.OnY">
                        <CardBody>
                            <CardTitle>@L["Teams"]</CardTitle>

                            <Table Striped="true" Hoverable="true">
                                <TableHeader ThemeContrast="ThemeContrast.Dark">
                                    <TableRow>
                                        <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                        <TableHeaderCell>@L["RegistrationDate"]</TableHeaderCell>
                                        <TableHeaderCell></TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @if (shooterTeams.Count(x=>x.ShooterApprove && x.TeamApprove) > 0)
                                    {
                                        <Virtualize Items="@shooterTeams.Where(x=>x.ShooterApprove && x.TeamApprove).ToList()" Context="shooterTeam">
                                            <TableRow>
                                                <TableRowHeader>@shooterTeam.Team.Name</TableRowHeader>
                                                <TableRowCell>@shooterTeam.RegistrationDate.ToString("d")</TableRowCell>
                                                <TableRowCell>
                                                    @if (PageCondition)
                                                    {
                                                        <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => EditTeam(shooterTeam))"><Icon Name="IconName.Pen" /></Button>
                                                        <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteTeam(shooterTeam))"><Icon Name="IconName.Delete" /></Button>
                                                    }
                                                </TableRowCell>
                                            </TableRow>
                                        </Virtualize>
                                    }
                                    else
                                    {
                                        <TableRow>
                                            <TableRowCell ColumnSpan="3" TextAlignment="TextAlignment.Center">
                                                @L["NoTeams"]
                                            </TableRowCell>
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>
                        </CardBody>
                    </Card>
                </Column>
                <Column ColumnSize="ColumnSize.Is5">
                    @if (PageCondition && associationNotAssigned.Count > 0)
                    {
                        <Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Button" Clicked="@(() => NewAssociationInfo())"><Icon Name="IconName.PlusSquare" /> @L["NewAssociation"]</Button>
                    }
                    <Card Margin="Margin.Is4.OnY">
                        <CardBody>
                            <CardTitle>@L["Associations"]</CardTitle>

                            <Table Striped="true" Hoverable="true">
                                <TableHeader ThemeContrast="ThemeContrast.Dark">
                                    <TableRow>
                                        <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                        <TableHeaderCell>@L["CardNumber"]</TableHeaderCell>
                                        <TableHeaderCell>@L["Categories"]</TableHeaderCell>
                                        <TableHeaderCell>@L["RegistrationDate"]</TableHeaderCell>
                                        <TableHeaderCell></TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @if (shooterAssociationInfos.Count > 0)
                                    {
                                        <Virtualize Items="@shooterAssociationInfos" Context="classification">
                                            <TableRow>
                                                <TableRowHeader>@classification.Association.Name @classification.SafetyOfficier.ParseBoolean($"({L["SO"]})")</TableRowHeader>
                                                <TableRowCell>@classification.CardNumber</TableRowCell>
                                                <TableRowCell>@string.Join(", ", classification.Categories)</TableRowCell>
                                                <TableRowCell>@classification.RegistrationDate.ToString("d")</TableRowCell>
                                                <TableRowCell>
                                                    @if (PageCondition)
                                            {
                                                <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => EditAssociationInfo(classification))"><Icon Name="IconName.Pen" /></Button>
                                                <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteAssociationInfo(classification))"><Icon Name="IconName.Delete" /></Button>
                                            }
                                        </TableRowCell>
                                    </TableRow>
                                </Virtualize>
                                    }
                                    else
                                    {
                                        <TableRow>
                                            <TableRowCell ColumnSpan="5" TextAlignment="TextAlignment.Center">
                                                @L["NoAssociations"]
                                            </TableRowCell>
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>

                        </CardBody>
                    </Card>
                </Column>
                <Column ColumnSize="ColumnSize.Is7">
                    @if (PageCondition)
                    {
                        <Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Button" Clicked="@(() => NewClassification())"><Icon Name="IconName.PlusSquare" /> @L["NewClassification"]</Button>
                    }
                    <Card Margin="Margin.Is4.OnY">
                        <CardBody>
                            <CardTitle>@L["Classifications"]</CardTitle>

                            <Table Striped="true" Hoverable="true">
                                <TableHeader ThemeContrast="ThemeContrast.Dark">
                                    <TableRow>
                                        <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                        <TableHeaderCell>@L["Classification"]</TableHeaderCell>
                                        <TableHeaderCell>@L["RegistrationDate"]</TableHeaderCell>
                                        <TableHeaderCell></TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @if (activeShooterClassifications.Count > 0)
                                    {
                                        <Virtualize Items="@activeShooterClassifications" Context="classification">
                                            <TableRow>
                                                <TableRowHeader>@classification.Association.Name</TableRowHeader>
                                                <TableRowCell>@classification.Division @classification.Classification</TableRowCell>
                                                <TableRowCell>@classification.RegistrationDate.ToString("d")</TableRowCell>
                                                <TableRowCell>
                                                    @if (PageCondition)
                                            {
                                                <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => EditClassification(classification))"><Icon Name="IconName.Pen" /></Button>
                                                <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteClassification(classification))"><Icon Name="IconName.Delete" /></Button>
                                            }
                                        </TableRowCell>
                                    </TableRow>
                                </Virtualize>
                                    }
                                    else
                                    {
                                        <TableRow>
                                            <TableRowCell ColumnSpan="4" TextAlignment="TextAlignment.Center">
                                                @L["NoAssociations"]
                                            </TableRowCell>
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>

                        </CardBody>
                    </Card>
                </Column>
                @if (expiredShooterClassifications.Count > 0)
                {
                    <Column ColumnSize="ColumnSize.IsFull">
                        <Card Margin="Margin.Is4.OnY">
                            <CardBody>
                                <CardTitle>@L["ExpiredAssociations"]</CardTitle>
                                <Table Striped="true" Hoverable="true">
                                    <TableHeader ThemeContrast="ThemeContrast.Dark">
                                        <TableRow>
                                            <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                            <TableHeaderCell>@L["Classification"]</TableHeaderCell>
                                            <TableHeaderCell>@L["RegistrationDate"]</TableHeaderCell>
                                            <TableHeaderCell>@L["ExpireDate"]</TableHeaderCell>
                                            <TableHeaderCell></TableHeaderCell>
                                        </TableRow>
                                    </TableHeader>
                                    <TableBody>
                                        <Virtualize Items="@expiredShooterClassifications" Context="classification">
                                            <TableRow>
                                                <TableRowHeader>@classification.Association.Name</TableRowHeader>
                                                <TableRowCell>@classification.Division @classification.Classification</TableRowCell>
                                                <TableRowCell>@classification.RegistrationDate.ToString("d")</TableRowCell>
                                                <TableRowCell>@classification.ExpireDate.Value.ToString("d")</TableRowCell>
                                                <TableRowCell>
                                                    @if (PageCondition)
                                            {
                                                <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteClassification(classification))"><Icon Name="IconName.Delete" /></Button>
                                            }
                                        </TableRowCell>
                                    </TableRow>
                                </Virtualize>
                            </TableBody>
                        </Table>

                    </CardBody>
                </Card>
            </Column>
                }
            </Row>

        }
    </Authorized>
</AuthorizeView>

<Modal @ref="modalRefAssociationInfoToEdit">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["EditAssociationInfo"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validationInfos" Mode="ValidationMode.Manual" Model="@associationInfoToEdit">
                @if (string.IsNullOrEmpty(associationInfoToEdit.ShooterAssociationInfoId))
                {
                    <Validation Validator="@ValidationRule.IsSelected">
                        <Field Horizontal="true" JustifyContent="JustifyContent.End">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Association"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                <Select TValue="string" SelectedValue="@associationInfoToEdit.AssociationId" SelectedValueChanged="@OnSelectedAssociationInfoChanged">
                                    <ChildContent>
                                        <SelectItem Value="@("")"></SelectItem>
                                        @foreach (var association in associationNotAssigned)
                                    {
                                        <SelectItem Value="@association.AssociationId">@association.Name</SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["WrongAssociation"]</ValidationError>
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
                }
                else
                {
                    <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Association"]</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                        @(associations.FirstOrDefault(x=>x.AssociationId == associationInfoToEdit.AssociationId)?.Name ?? string.Empty)
                    </FieldBody>
                }
                <Validation Validator="@ValidationRule.IsNotEmpty">
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["cardNumber"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <TextEdit Placeholder="@L["CardNumber"]" @bind-Text="@associationInfoToEdit.CardNumber">
                                <Feedback>
                                    <ValidationError>@L["WrongCardNumber"]</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["categories"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <Select TValue="string" @bind-SelectedValues="@categoriesEdit" Multiple>
                                <ChildContent>
                                    @if (string.IsNullOrEmpty(associationInfoToEdit.ShooterAssociationInfoId))
                                            {
                                    @foreach (var category in associationNotAssigned.FirstOrDefault(x => x.AssociationId == associationInfoToEdit.AssociationId)?.Categories ?? new List<string>())
                                    {
                                        <SelectItem TValue="string" Value="@category" @key="@category">@category</SelectItem>
                                    }
                                            }
                                            else
                                            {
                                    @foreach (var category in associations.FirstOrDefault(x => x.AssociationId == associationInfoToEdit.AssociationId)?.Categories ?? new List<string>())
                                    {
                                        <SelectItem TValue="string" Value="@category" @key="@category">@category</SelectItem>
                                    }
                                            }

                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["WrongCategories"]</ValidationError>
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is4">&nbsp;</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <Check TValue="bool" @bind-Checked="@associationInfoToEdit.SafetyOfficier">@L["SafetyOfficier"]</Check>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidateDate">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["RegistrationDate"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <DateEdit TValue="DateTime" @bind-Date="@associationInfoToEdit.RegistrationDate">
                                <Feedback>
                                    <ValidationError>@L["WrongRegistrationDate"]</ValidationError>
                                </Feedback>
                            </DateEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalAssociationInfoToEdit(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalAssociationInfoToEdit(true))">@L["Submit"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalRefAssociationToEdit">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["EditAssociation"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@associationToEdit">
                <Validation Validator="@ValidationRule.IsSelected">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Association"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <Select TValue="string" SelectedValue="@associationToEdit.AssociationId" SelectedValueChanged="@OnSelectedAssociationChanged">
                                <ChildContent>
                                    <SelectItem Value="@("")"></SelectItem>
                                    @foreach (var association in associations)
                                            {
                                    <SelectItem Value="@association.AssociationId">@association.Name</SelectItem>
                                            }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["WrongAssociation"]</ValidationError>
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.IsSelected">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["division"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <Select TValue="string" @bind-SelectedValue="@associationToEdit.Division">
                                <ChildContent>
                                    <SelectItem Value="@("")"></SelectItem>
                                    @foreach (var division in divisions)
                                            {
                                    <SelectItem Value="@division">@division</SelectItem>
                                            }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["Wrongdivision"]</ValidationError>
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.IsSelected">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["classification"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <Select TValue="string" @bind-SelectedValue="@associationToEdit.Classification">
                                <ChildContent>
                                    <SelectItem Value="@("")"></SelectItem>
                                    @foreach (var classification in classifications)
                                            {
                                    <SelectItem Value="@classification">@classification</SelectItem>
                                            }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["Wrongclassification"]</ValidationError>
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidateDate">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["RegistrationDate"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <DateEdit TValue="DateTime" @bind-Date="@associationToEdit.RegistrationDate">
                                <Feedback>
                                    <ValidationError>@L["WrongRegistrationDate"]</ValidationError>
                                </Feedback>
                            </DateEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalAssociationToEdit(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalAssociationToEdit(true))">@L["Submit"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalRefAssociationInfoToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteAssociation"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (associationInfoToDelete.Association != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@associationInfoToDelete.Association.Name</Text>
                </Field>
            }
            <Field>
                <FieldLabel>@L["CardNumber"]</FieldLabel>
                <Text>@associationInfoToDelete.CardNumber</Text>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalAssociationInfoToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalAssociationInfoToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalRefAssociationToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteAssociation"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (associationToDelete.Association != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@associationToDelete.Association.Name</Text>
                </Field>
            }
            <Field>
                <FieldLabel>@L["Classification"]</FieldLabel>
                <Text>@associationToDelete.Classification</Text>
            </Field>
            <Field>
                <FieldLabel>@L["RegistrationDate"]</FieldLabel>
                <Text>@associationToDelete.RegistrationDate.ToString("d")</Text>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalAssociationToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalAssociationToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalRefTeamToApprove">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["ApproveTeam"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @{
               var team = shooterTeams.FirstOrDefault(x => x.Team.TeamId == teamToEdit.TeamId);
           }
           @if (team != null)
           {
               <Field>
                   <FieldLabel>@L["ConfirmApproval"]</FieldLabel>
                   <FieldBody>@team.Team.Name</FieldBody>
               </Field>
           }
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalTeamToEdit(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalTeamToEdit(true))">@L["Submit"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="modalRefTeamToEdit">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["EditTeam"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="teamValidations" Mode="ValidationMode.Manual" Model="@teamToEdit">
                <Validation Validator="@ValidationRule.IsSelected">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Team"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <Select TValue="string" @bind-SelectedValue="@teamToEdit.TeamId">
                                <ChildContent>
                                    <SelectItem Value="@("")"></SelectItem>
                                    @foreach (var team in teams)
                                            {
                                    <SelectItem Value="@team.TeamId">@team.Name</SelectItem>
                                            }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["WrongTeam"]</ValidationError>
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidateDate">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["RegistrationDate"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <DateEdit TValue="DateTime" @bind-Date="@teamToEdit.RegistrationDate">
                                <Feedback>
                                    <ValidationError>@L["WrongRegistrationDate"]</ValidationError>
                                </Feedback>
                            </DateEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalTeamToEdit(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalTeamToEdit(true))">@L["Submit"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalRefTeamToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteTeam"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (teamToDelete.Team != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@teamToDelete.Team.Name</Text>
                </Field>
            }
            <Field>
                <FieldLabel>@L["RegistrationDate"]</FieldLabel>
                <Text>@teamToDelete.RegistrationDate.ToString("d")</Text>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalTeamToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalTeamToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="modalRefEntityToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteShooter"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (shooter != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@shooter.CompleteName</Text>
                </Field>
                <Field>
                    <FieldLabel>@L["Username"]</FieldLabel>
                    <Text>@shooter.Username</Text>
                </Field>
                <Field>
                    <FieldLabel>@L["BirthDate"]</FieldLabel>
                    <Text>@shooter.BirthDate.ToString("d")</Text>
                </Field>
            }
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalEntityToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalEntityToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    [Parameter]
    public string Id { get; set; }

    private bool? pageCondition = null;

    private bool PageCondition => pageCondition ??= AuthService.CheckPermissions(PermissionCtor.ManageShooters.EditShooter, Id);


    private Modal modalRefEntityToDelete;

    ShooterContract shooter = new();
    Validations validations;
    Validations validationInfos;
    Validations teamValidations;
    private Modal modalRefAssociationToDelete;
    private Modal modalRefAssociationInfoToDelete;
    ShooterAssociationContract associationToDelete = new();
    ShooterAssociationInfoContract associationInfoToDelete = new();
    private Modal modalRefAssociationToEdit;
    private Modal modalRefAssociationInfoToEdit;
    private IReadOnlyList<string> categoriesEdit = new List<string>();
    ShooterAssociationCreateRequest associationToEdit = new();
    ShooterAssociationInfoUpdateRequest associationInfoToEdit = new();
    IList<ShooterAssociationContract> shooterClassifications = new List<ShooterAssociationContract>();
    IList<ShooterAssociationContract> activeShooterClassifications => shooterClassifications.Where(x => x.ExpireDate == null).ToList();
    IList<ShooterAssociationContract> expiredShooterClassifications => shooterClassifications.Where(x => x.ExpireDate != null).ToList();
    IList<ShooterAssociationInfoContract> shooterAssociationInfos = new List<ShooterAssociationInfoContract>();
    IList<AssociationContract> associationNotAssigned = new List<AssociationContract>();
    IList<AssociationContract> associations = new List<AssociationContract>();
    IList<string> classifications = new List<string>();

    IList<string> divisions = new List<string>();

    private Modal modalRefTeamToDelete;

    ShooterTeamContract teamToDelete = new();
    private Modal modalRefTeamToEdit;
    private Modal modalRefTeamToApprove;
    ShooterTeamCreateRequest teamToEdit = new();
    IList<TeamContract> teams = new List<TeamContract>();
    IList<ShooterTeamContract> shooterTeams = new List<ShooterTeamContract>();
    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.CheckPermissions(PermissionCtor.ManageTeams.ShowShooters.EditShooter, Id))
        {
            await base.OnInitializedAsync();
            return;
        }

        shooter = await Post<ShooterContract>("api/Shooter/GetShooter", new ShooterRequest() { ShooterId = Id });
        teams = await Post<IList<TeamContract>>("api/Team/FetchAllTeams", null);
        await LoadShooterAssociationInfo();
        await LoadShooterClassifications();
        await LoadShooterTeams();
        await base.OnInitializedAsync();
    }

    async Task LoadShooterTeams()
    {
        shooterTeams = await Post<IList<ShooterTeamContract>>("api/ShooterTeam/FetchShooterTeamByShooter", new ShooterRequest() { ShooterId = Id });
    }
    async Task LoadShooterClassifications()
    {
        shooterClassifications = await Post<IList<ShooterAssociationContract>>("api/ShooterAssociation/FetchShooterAssociation", new ShooterRequest() { ShooterId = Id });
    }

    async Task LoadShooterAssociationInfo()
    {
        categoriesEdit = new List<string>();
        var request = new ShooterRequest() { ShooterId = Id };
        associationNotAssigned = await Post<IList<AssociationContract>>("api/Association/FetchAssociationsNotAssignedForShooter", request);
        associations = await Post<IList<AssociationContract>>("api/Association/FetchAvailableAssociationsForShooter", request);
        shooterAssociationInfos = await Post<IList<ShooterAssociationInfoContract>>("api/ShooterAssociationInfo/FetchShooterAssociationInfo", request);

    }

    void DeleteEntity()
    {
        modalRefEntityToDelete.Show();
    }

    private async Task HideModalEntityToDelete(bool choice)
    {
        if (choice && shooter != null)
        {
            await Post<ShooterContract>("/api/Shooter/DeleteShooter", new ShooterRequest
                {
                    ShooterId = shooter.ShooterId
                });
            UriHelper.NavigateTo(RouteHelper.GetUrl<Shooters>());
        }
        await modalRefEntityToDelete.Hide();
    }

    void ValidateDate(ValidatorEventArgs e)
    {
        var date = e.Value as DateTime?;

        if (date == null)
        {
            e.Status = ValidationStatus.Error;
        }
        else if (date <= new DateTime(1980, 1, 1))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = L["WrongRegistrationDate"];
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    void OnSelectedAssociationInfoChanged(string value)
    {
        associationInfoToEdit.AssociationId = value;
    }

    void OnSelectedAssociationChanged(string value)
    {
        associationToEdit.AssociationId = value;
        associationToEdit.Classification = string.Empty;
        associationToEdit.Division = string.Empty;
        SelectClassificationBasedOnAssociationId(value);
    }
    void SelectClassificationBasedOnAssociationId(string value)
    {
        var existingAssociation = associations.FirstOrDefault(x => x.AssociationId == value);
        if (existingAssociation == null)
            return;

        classifications = existingAssociation.Classifications;
        divisions = existingAssociation.Divisions;
    }
    void NewClassification()
    {
        associationToEdit = new ShooterAssociationCreateRequest { ShooterId = shooter.ShooterId };
        modalRefAssociationToEdit.Show();
    }

    void NewAssociationInfo()
    {
        associationInfoToEdit = new ShooterAssociationInfoUpdateRequest { ShooterId = shooter.ShooterId };
        modalRefAssociationInfoToEdit.Show();
    }

    void EditAssociationInfo(ShooterAssociationInfoContract shooterAssociation)
    {
        associationInfoToEdit = new ShooterAssociationInfoUpdateRequest
            {
                ShooterAssociationInfoId = shooterAssociation.ShooterAssociationInfoId,
                ShooterId = shooter.ShooterId,
                AssociationId = shooterAssociation.Association.AssociationId,
                CardNumber = shooterAssociation.CardNumber,
                Categories = shooterAssociation.Categories,
                SafetyOfficier = shooterAssociation.SafetyOfficier,
                RegistrationDate = shooterAssociation.RegistrationDate
            };
        categoriesEdit = shooterAssociation.Categories.ToList();
        modalRefAssociationInfoToEdit.Show();
    }

    void EditClassification(ShooterAssociationContract shooterAssociation)
    {
        SelectClassificationBasedOnAssociationId(shooterAssociation.Association.AssociationId);
        associationToEdit = new ShooterAssociationCreateRequest
            {
                ShooterId = shooter.ShooterId,
                AssociationId = shooterAssociation.Association.AssociationId,
                Classification = shooterAssociation.Classification,
                Division = shooterAssociation.Division,
                RegistrationDate = shooterAssociation.RegistrationDate
            };

        modalRefAssociationToEdit.Show();
    }

    private async Task HideModalAssociationInfoToEdit(bool choice)
    {
        if (choice)
        {
            if (!(await validationInfos.ValidateAll()))
                return;
            await validationInfos.ClearAll();
            associationInfoToEdit.Categories = categoriesEdit.ToList();
            var response = await Post<ShooterAssociationInfoContract>(string.IsNullOrEmpty(associationInfoToEdit.ShooterAssociationInfoId) ? "/api/ShooterAssociationInfo/CreateShooterAssociationInfo" : "/api/ShooterAssociationInfo/UpdateShooterAssociationInfo", associationInfoToEdit);
            if (response == null)
            {
                return;
            }
            await LoadShooterAssociationInfo();
        }
        associationInfoToEdit = new ShooterAssociationInfoUpdateRequest();
        await modalRefAssociationInfoToEdit.Hide();
    }

    private async Task HideModalAssociationToEdit(bool choice)
    {
        if (choice)
        {
            if (!(await validations.ValidateAll()))
                return;
            await validations.ClearAll();
            var response = await Post<OkResponse>("/api/ShooterAssociation/UpsertShooterAssociation", associationToEdit);
            if (response is not { Status: true })
            {
                return;
            }
            await LoadShooterClassifications();
        }
        associationToEdit = new ShooterAssociationCreateRequest();
        await modalRefAssociationToEdit.Hide();
    }

    void DeleteAssociationInfo(ShooterAssociationInfoContract association)
    {
        if (association == null)
            return;
        associationInfoToDelete = association;
        modalRefAssociationInfoToDelete.Show();
    }

    void DeleteClassification(ShooterAssociationContract association)
    {
        if (association == null)
            return;
        associationToDelete = association;
        modalRefAssociationToDelete.Show();
    }
    private async Task HideModalAssociationInfoToDelete(bool choice)
    {
        if (choice && associationInfoToDelete.Association != null)
        {
            var response = await Post<OkResponse>("/api/ShooterAssociationInfo/DeleteShooterAssociationInfo", new ShooterAssociationInfoRequest
                {
                    ShooterAssociationInfoId = associationInfoToDelete.ShooterAssociationInfoId
                });
            if (response is not { Status: true })
            {
                return;
            }
            await LoadShooterAssociationInfo();
        }
        associationInfoToDelete = new ShooterAssociationInfoContract();
        await modalRefAssociationInfoToDelete.Hide();
    }
    private async Task HideModalAssociationToDelete(bool choice)
    {
        if (choice && associationToDelete.Association != null)
        {
            var response = await Post<OkResponse>("/api/ShooterAssociation/DeleteShooterAssociation", new ShooterAssociationRequest
                {
                    ShooterAssociationId = associationToDelete.ShooterAssociationId
                });
            if (response is not { Status: true })
            {
                return;
            }
            await LoadShooterClassifications();
        }
        associationToDelete = new ShooterAssociationContract();
        await modalRefAssociationToDelete.Hide();
    }

    void NewTeam()
    {
        teamToEdit = new ShooterTeamCreateRequest { ShooterId = shooter.ShooterId };
        modalRefTeamToEdit.Show();
    }
    void EditTeam(ShooterTeamContract shooterTeam)
    {

        teamToEdit = new ShooterTeamCreateRequest
            {
                ShooterId = shooter.ShooterId,
                TeamId = shooterTeam.Team.TeamId,
                RegistrationDate = shooterTeam.RegistrationDate
            };
        modalRefTeamToEdit.Show();
    }
    void ApproveTeam(ShooterTeamContract shooterTeam)
    {

        teamToEdit = new ShooterTeamCreateRequest
            {
                ShooterId = shooter.ShooterId,
                TeamId = shooterTeam.Team.TeamId,
                RegistrationDate = shooterTeam.RegistrationDate
            };
        modalRefTeamToApprove.Show();
    }

    private async Task HideModalTeamToEdit(bool choice)
    {
        if (choice)
        {
            if (!(await teamValidations.ValidateAll()))
                return;
            await teamValidations.ClearAll();
            teamToEdit.FromShooter = true;
            var response = await Post<OkResponse>("/api/ShooterTeam/UpsertShooterTeam", teamToEdit);
            if (response is not { Status: true })
            {
                return;
            }
            await LoadShooterTeams();
        }
        teamToEdit = new ShooterTeamCreateRequest();
        await modalRefTeamToEdit.Hide();
        await modalRefTeamToApprove.Hide();
    }
    void DeleteTeam(ShooterTeamContract team)
    {
        if (team == null)
            return;
        teamToDelete = team;
        modalRefTeamToDelete.Show();
    }
    private async Task HideModalTeamToDelete(bool choice)
    {
        if (choice && teamToDelete.Team != null)
        {
            var response = await Post<GroupContract>("/api/ShooterTeam/DeleteShooterTeam", new ShooterTeamDeleteRequest
                {
                    TeamId = teamToDelete.Team.TeamId,
                    ShooterId = shooter.ShooterId
                });
            if (response == null)
            {
                return;
            }
            await LoadShooterTeams();
        }
        teamToDelete = new ShooterTeamContract();
        await modalRefTeamToDelete.Hide();
    }
}