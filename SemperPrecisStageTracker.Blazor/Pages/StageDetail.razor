@page "/matches/{id}/stages/{stageId}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<StageDetail> L
@inject NetworkService networkService
@inject IState<UserState> UserState
@inject IState<SettingsState> SettingState

<Heading Size="HeadingSize.Is1">@L["Detail"]</Heading>
@if (canManageStages)
{
    <Button Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<StageEdit>(new { id = Id, stageId = StageId }))"><Icon Name="IconName.Pen" /> @L["EditStage"]</Button>
}
<NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new{ id = Id}))">@L["BackToMatch"]</NavLink>
<Divider />
@if (ApiLoading)
{
    <p class="text-center">
        <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
    </p>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.IsHalf.OnDesktop.IsFull.OnTablet">
            <Card Margin="Margin.Is2.OnY">
                <CardBody>
                    <CardTitle>@L["Stage"]</CardTitle>
                    <CardText>@stage.Name</CardText>
                    <CardTitle>@L["Index"]</CardTitle>
                    <CardText>@stage.Index</CardText>
                    <CardTitle>@L["Scenario"]</CardTitle>
                    <CardText>@stage.Scenario</CardText>
                    <CardTitle>@L["Strings"]:</CardTitle>
                    <CardText>@stage.Strings.Count</CardText>
                    <CardTitle>@L["Rules"]:</CardTitle>
                    <CardText>@stage.Rules</CardText>
                    <CardTitle>@L["GunReadyCondition"]</CardTitle>
                    <CardText>@stage.GunReadyCondition</CardText>
                    <CardTitle>@L["StageProcedure"]</CardTitle>
                    <CardText>@stage.StageProcedure</CardText>
                    @if (!string.IsNullOrEmpty(stage.StageProcedureNotes))
                    {
                        <CardTitle>@L["Notes"]</CardTitle>
                        <CardText>@stage.StageProcedureNotes</CardText>
                    }
                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.IsHalf.OnDesktop.IsFull.OnTablet">
            <Card Margin="Margin.Is2.OnY">
                <CardBody>
                    <CardTitle>@L["Match"]</CardTitle>
                    <CardText><NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new {id = match.MatchId}))">@match.Name</NavLink> - @match.MatchDateTimeStart.ToString("d") ~ @match.MatchDateTimeEnd.ToString("d")</CardText>

                    <CardTitle>@L["MatchDirectors"]</CardTitle>

                    <Table Striped="true" Hoverable="true">
                        <TableHeader ThemeContrast="ThemeContrast.Dark">
                            <TableRow>
                                <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @if (matchDirectors.Count > 0)
                            {
                                <Virtualize Items="@matchDirectors" Context="matchDirector">
                                    <TableRow>
                                        <TableRowHeader>@matchDirector.Shooter.CompleteName</TableRowHeader>
                                        <TableRowCell>
                                            @if (SettingState.Value.Online && canInsertScore)
                                    {
                                        <Button Size="Size.Small" Color="Color.Success" Clicked="@(() => CallMatchDirector(matchDirector))" Loading="matchDirectorCall" Disabled="matchDirectorCall">
                                            <LoadingTemplate><Icon Name="FontAwesomeIcons.AnimationSpinner" />&nbsp;<Icon Name="IconName.Phone" /></LoadingTemplate>
                                            <ChildContent><Icon Name="IconName.Phone" /></ChildContent>
                                        </Button>
                                    }
                                </TableRowCell>
                            </TableRow>
                        </Virtualize>
                            }
                            else
                            {
                                <TableRow>
                                    <TableRowCell ColumnSpan="4" TextAlignment="TextAlignment.Center">
                                        @L["NoMatchDirectors"]
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                    @if (MainServiceLayer.Online && canManageSO)
                    {
                        <Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Button" Clicked="@(() => NewStageSo())"><Icon Name="IconName.PlusSquare" /> @L["NewStageSo"]</Button>
                    }

                    <CardTitle>@L["So"]</CardTitle>
                    <Table Striped="true" Hoverable="true">
                        <TableHeader ThemeContrast="ThemeContrast.Dark">
                            <TableRow>
                                <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                <TableHeaderCell>@L["Role"]</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @if (stageSos.Count > 0)
                            {
                                <Virtualize Items="@stageSos" Context="stageSo">
                                    <TableRow>
                                        <TableRowHeader>@stageSo.Shooter.CompleteName</TableRowHeader>
                                        <TableRowHeader>@stageSo.Role</TableRowHeader>
                                        <TableRowCell>
                                            @if (MainServiceLayer.Online && canManageSO)
                                    {
                                        <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteStageSo(stageSo))"><Icon Name="IconName.Delete" /></Button>
                                    }
                                </TableRowCell>
                            </TableRow>
                        </Virtualize>
                            }
                            else
                            {
                                <TableRow>
                                    <TableRowCell ColumnSpan="4" TextAlignment="TextAlignment.Center">
                                        @L["NoSecurityOfficier"]
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
    </Row>
    <Virtualize Items="@stage.Strings" Context="stageString">
        <Card Margin="Margin.Is2.OnY">
            <CardBody>
                <CardTitle>@stageString.Name</CardTitle>
                <Row>
                    <Column ColumnSize="ColumnSize.IsFull.OnTablet.IsHalf.OnDesktop">
                        <Row>
                            <CardTitle ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Targets"]:</CardTitle>
                            <CardText ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">@stageString.Targets</CardText>
                        </Row>
                        <Row>
                            <CardTitle ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Scoring"]:</CardTitle>
                            <CardText ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">@stageString.Scoring</CardText>
                        </Row>
                        <Row>
                            <CardTitle ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["TargetsDescription"]:</CardTitle>
                            <CardText ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">@stageString.TargetsDescription</CardText>
                        </Row>
                    </Column>
                    <Column ColumnSize="ColumnSize.IsFull.OnTablet.IsHalf.OnDesktop">
                        <Row>
                            <CardTitle ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["ScoredHits"]:</CardTitle>
                            <CardText ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">@stageString.ScoredHits</CardText>
                        </Row>
                        <Row>
                            <CardTitle ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["StartStop"]:</CardTitle>
                            <CardText ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">@stageString.StartStop</CardText>
                        </Row>
                        <Row>
                            <CardTitle ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Distance"]:</CardTitle>
                            <CardText ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">@stageString.Distance</CardText>
                        </Row>
                        <Row>
                            <CardTitle ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["CoverGarment"]:</CardTitle>
                            <CardText ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">@(stageString.CoverGarment ? @L["Yes"] : @L["No"])</CardText>
                        </Row>
                    </Column>
                </Row>
            </CardBody>
        </Card>
    </Virtualize>
    @if (canInsertScore)
    {
        <Divider />
        <Card>
            <CardBody>
                <CardTitle>@L["Groups"]</CardTitle>

                <Table Striped="true" Hoverable="true">
                    <TableHeader ThemeContrast="ThemeContrast.Dark">
                        <TableRow>
                            <TableHeaderCell>@L["Name"]</TableHeaderCell>
                            <TableHeaderCell></TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @if (match.Groups.Count > 0)
                        {
                            <Virtualize Items="@match.Groups" Context="group">
                                <TableRow>
                                    <TableRowHeader><NavLink href="@(RouteHelper.GetUrl<StageGroupDetail>(new {id = match.MatchId, stageId = stage.StageId, groupId = group.GroupId}))">@group.Name</NavLink></TableRowHeader>
                                    <TableRowCell>
                                        <Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" to="@(RouteHelper.GetUrl<StageGroupDetail>(new {id = match.MatchId, stageId = stage.StageId, groupId = group.GroupId}))"><Icon Name="IconName.Search" /></Button>
                                    </TableRowCell>
                                </TableRow>
                            </Virtualize>
                        }
                        else
                        {
                            <TableRow>
                                <TableRowCell ColumnSpan="2" TextAlignment="TextAlignment.Center">
                                    @L["NoGroups"]
                                </TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>

            </CardBody>
        </Card>
    }

}
@if (canManageSO)
{
    <Modal @ref="modalRefStageSoToEdit">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>@L["NewStageSo"]</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@stageSoToEdit">
                    <Validation Validator="@ValidationRule.IsSelected">
                        <Field Horizontal="true" JustifyContent="JustifyContent.End">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Shooter"]</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                <Select TValue="string" @bind-SelectedValue="@stageSoToEdit.Shooter.ShooterId">
                                    <ChildContent>
                                        <SelectItem Value="@("")"></SelectItem>
                                        @foreach (var availableMatchDirector in availableStageSo)
                                    {
                                        <SelectItem Value="@availableMatchDirector.ShooterId">@availableMatchDirector.CompleteName</SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["WrongShooter"]</ValidationError>
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.IsSelected">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Role"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <Select TValue="string" @bind-SelectedValue="@stageSoToEdit.Shooter.Role">
                                <ChildContent>
                                    <SelectItem Value="@("")"></SelectItem>
                                    @foreach (var soRole in match.Association.SoRoles)
                                    {
                                        <SelectItem Value="@soRole">@soRole</SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["WrongRole"]</ValidationError>
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalMatchDirectorToEdit(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalMatchDirectorToEdit(true))">@L["Submit"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
    <Modal @ref="modalRefStageSoToDelete">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>@L["DeleteStageSo"]</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
                </Field>
                @if (stageSoToDelete.Shooter != null)
                {
                    <Field>
                        <FieldLabel>@L["Name"]</FieldLabel>
                        <Text>@stageSoToDelete.Shooter.CompleteName</Text>
                    </Field>
                }
            </ModalBody>
            <ModalFooter>
                <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalMatchDirectorToDelete(false))">@L["Close"]</Button>
                <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalMatchDirectorToDelete(true))">@L["Yes"]</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

<Modal @ref="modalRefCallMatchDirector">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["CallMatchDirectorModalTitle"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (callMatchDirectorSuccess)
            {
                <Text>
                    @L["CallMatchDirectorSuccess"]
                </Text>
            }
            else
            {
                <Text>
                    @L["CallMatchDirectorFail"]
                    @L[$"{callMatchDirectorError}"]
                </Text>
            }
        </ModalBody>
    </ModalContent>
</Modal>
@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string StageId { get; set; }

    StageContract stage = new();

    MatchContract match = new();

    IList<ShooterMatchContract> matchDirectors = new List<ShooterMatchContract>();
    private bool matchDirectorCall;
    private bool callMatchDirectorSuccess;
    private string callMatchDirectorError;
    private Modal modalRefCallMatchDirector;


    Validations validations;
    private Modal modalRefStageSoToDelete;
    ShooterSOStageContract stageSoToDelete = new();
    private Modal modalRefStageSoToEdit;
    ShooterSOStageCreateRequest stageSoToEdit = new();
    IList<ShooterSOStageContract> stageSos = new List<ShooterSOStageContract>();
    IList<ShooterContract> availableStageSo = new List<ShooterContract>();

    bool canManageSO;
    bool canManageStages;
    bool canInsertScore;
    protected override async Task OnInitializedAsync()
    {
        match = await Post(async () =>
        {
            stage = await MainServiceLayer.GetStage(Id, StageId);
            matchDirectors = await MainServiceLayer.FetchAllMatchDirector(Id);
            return await MainServiceLayer.GetMatch(Id);
        });
        canManageSO = AuthService.CheckPermissions(PermissionCtor.ManageMatches.MatchManageStageSO, Id);
        canManageStages = AuthService.CheckPermissions(PermissionCtor.ManageMatches.MatchManageStages, Id);

        var userThatCanInsertScore = (await MainServiceLayer.FetchAllMatchDirector(Id)).Select(x => x.Shooter.ShooterId);
        userThatCanInsertScore = userThatCanInsertScore.Concat((await MainServiceLayer.FetchAllShooterSOStages(StageId)).Select(x => x.Shooter.ShooterId).ToList());
        canInsertScore = AuthService.CheckPermissions(PermissionCtor.ManageMatches) ||
                         (AuthService.CheckPermissions(PermissionCtor.ManageMatches.MatchInsertScore, Id) && userThatCanInsertScore.Contains(UserState.Value.User.ShooterId));

        await LoadSO();

        await base.OnInitializedAsync();
    }


    async Task LoadSO()
    {
        stageSos = await MainServiceLayer.FetchAllShooterSOStages(StageId);
        if (MainServiceLayer.Online)
        {
            availableStageSo = await Post<IList<ShooterContract>>("api/Match/FetchAvailableStageSO", new StageRequest { StageId = StageId });
        }
    }

    void NewStageSo()
    {
        stageSoToEdit = new ShooterSOStageCreateRequest { StageId = StageId };
        modalRefStageSoToEdit.Show();
    }

    void DeleteStageSo(ShooterSOStageContract matchDirector)
    {
        if (matchDirector == null)
            return;
        stageSoToDelete = matchDirector;
        modalRefStageSoToDelete.Show();
    }

    private async Task HideModalMatchDirectorToEdit(bool choice)
    {
        if (choice)
        {
            if (!(await validations.ValidateAll()))
                return;
            await validations.ClearAll();
            stageSos = await Post<IList<ShooterSOStageContract>>("/api/Match/CreateStageSO", stageSoToEdit);
            //update available match director
            availableStageSo = await Post<IList<ShooterContract>>("api/Match/FetchAvailableStageSO", new StageRequest() { StageId = StageId });
        }
        stageSoToEdit = new ShooterSOStageCreateRequest();
        await modalRefStageSoToEdit.Hide();
    }

    private async Task HideModalMatchDirectorToDelete(bool choice)
    {
        if (choice && stageSoToDelete.Shooter != null)
        {
            stageSos = await Post<IList<ShooterSOStageContract>>("/api/Match/DeleteStageSO", new ShooterSOStageRequest
                {
                    ShooterSOStageId = stageSoToDelete.ShooterSOStageId
                });
            availableStageSo = await Post<IList<ShooterContract>>("api/Match/FetchAvailableStageSO", new StageRequest() { StageId = StageId });
            //await LoadSO();
        }
        stageSoToDelete = new ShooterSOStageContract();
        await modalRefStageSoToDelete.Hide();
    }

    async Task CallMatchDirector(ShooterMatchContract matchDirector)
    {
        if (matchDirector == null)
            return;
        matchDirectorCall = true;
        var result = await Post<OkResponse>("api/Notification/CallShooter", new CallShooterRequest()
            {
                MatchId = Id,
                ShooterId = matchDirector.Shooter.ShooterId,
                Context = CallShooterContextEnum.MatchDirector
            });
        matchDirectorCall = false;
        callMatchDirectorSuccess = result.Status;

        if (!result.Status)
            callMatchDirectorError = result.Errors.FirstOrDefault() ?? string.Empty;

        await modalRefCallMatchDirector.Show();
    }

}
