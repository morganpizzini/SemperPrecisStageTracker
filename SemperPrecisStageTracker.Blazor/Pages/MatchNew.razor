@page "/matches/new"
@inject HttpClientService Client
@inject IStringLocalizer<MatchNew> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["NewMatch"]</Heading>
<Divider />
<Validations @ref="validations" Mode="ValidationMode.Manual" Model="@model">
    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Name"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                <TextEdit Placeholder="@L["Name"]" @bind-Text="@model.Name">
                    <Feedback>
                        <ValidationError>@L["WrongName"]</ValidationError>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation Validator="@ValidateDate">
        <Field Horizontal="true" JustifyContent="JustifyContent.End">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Date"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                <DateEdit TValue="DateTime" @bind-Date="@model.MatchDateTime">
                    <Feedback>
                        <ValidationError>@L["WrongValidDate"]</ValidationError>
                    </Feedback>
                </DateEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Field Horizontal="true" JustifyContent="JustifyContent.End">
        <FieldBody ColumnSize="ColumnSize.Is10.Is2.WithOffset">
            <Button Color="Color.Primary" Clicked="@Submit">@L["Submit"]</Button>
        </FieldBody>
    </Field>
</Validations>

@code {

    Validations validations;
    MatchCreateRequest model = new MatchCreateRequest();

    void ValidateDate(ValidatorEventArgs e)
    {
        var date = e.Value as DateTime?;

        if (date == null)
        {
            e.Status = ValidationStatus.Error;
        }
        else if (date <= DateTime.Now.AddDays(1))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = L["WrongDate"];
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    async Task Submit()
    {
        if (!validations.ValidateAll())
            return;
        validations.ClearAll();
        var response = await Client.PostAsync<MatchContract>("/api/Match/CreateMatch", model);
        UriHelper.NavigateTo($"/matches/{response.MatchId}");
    }
}
