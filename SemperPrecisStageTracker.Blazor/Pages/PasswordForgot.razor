@page "/forgot-password"
@attribute [AllowAnonymous]
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<PasswordForgot> L
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;
@inject ClientConfiguration config
@inject IState<UserState> UserState 

<Heading Size="HeadingSize.Is1">@L["ForgotPassword"]</Heading>
    <Row>
        <Column ColumnSize="ColumnSize.Is8.Is2.WithOffset">
            <Card Margin="Margin.Is4.OnY">
                <CardHeader>@L["Enter your data"]</CardHeader>
                <CardBody>
                        <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@model">
                            <Field>
                                <FieldLabel>@L["Name"]</FieldLabel>
                                <FieldBody>
                                     <TextEdit Placeholder="@L["Username"]" @bind-Text="@model.Username" @onkeydown="@Enter">
                                    <Feedback>
                                        <ValidationError>@L["WrongUsername"]</ValidationError>
                                    </Feedback>
                                </TextEdit>
                                </FieldBody>
                            </Field>
                            <Div Flex="Flex.JustifyContent.End" Margin="Margin.Is3.FromBottom">
                                <Div Padding="Padding.Is2">
                                    <Button Size="Size.Small" Color="Color.Primary" Clicked="@Submit" Loading="ApiLoading" Disabled="ApiLoading">
                                        <LoadingTemplate><Icon Name="FontAwesomeIcons.AnimationSpinner"/>&nbsp;@L["Submit"]</LoadingTemplate>
                                        <ChildContent>@L["Submit"]</ChildContent>
                                    </Button>
                                </Div>
                            </Div>
                        </Validations>
                </CardBody>
            </Card>
        </Column>
    </Row>

    @code {
    Validations validations;
    ForgotPasswordRequest model = new();

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender && UserState.Value.User != null)
        {
            NavigationManager.NavigateTo(RouteHelper.GetUrl<Home>());
        }
        return base.OnAfterRenderAsync(firstRender);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("loadScript", $"https://www.google.com/recaptcha/api.js?render={config.Recaptcha.RecaptchaToken}");
        }
        base.OnAfterRender(firstRender);
    }
    public Task Enter(KeyboardEventArgs e)
    {
        if (e.Code != "Enter" && e.Code != "NumpadEnter")
            return Task.CompletedTask;
        return Submit();
    }
    async Task Submit()
    {
        if (! (await validations.ValidateAll()))
            return;
        await validations.ClearAll();
        model.Token = await JSRuntime.InvokeAsync<string>("grecaptcha.execute", config.Recaptcha.RecaptchaToken, new { action = "passwordForgot" });
        var response = await Post<OkResponse>("api/Authorization/PasswordForgot", model);
        if(response!= null && response.Status)
        {
            await ShowNotificationSuccess(L["Email send"], L["Success"]);
            NavigationManager.NavigateTo(RouteHelper.GetUrl<Home>());
        }
    }
}