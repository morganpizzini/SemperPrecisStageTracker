@page "/associations/edit/{id}"
@inherits SemperPrecisBaseMainComponent
@inject IStringLocalizer<AssociationEdit> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["EditAssociation"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<Associations>())">@L["BackToList"]</NavLink>
<Divider />
<AuthorizeView Roles="@(PermissionCtor.ManageAssociations.AssociationEdit.ToString())" Resource="@model.AssociationId">
    <Authorizing>
        <h3 class="mt-5">@L["Loading"]</h3>
    </Authorizing>
    <NotAuthorized>
        <h3 class="mt-5">@L["NoAuth"]</h3>
    </NotAuthorized>
    <Authorized>
        @if (ApiLoading)
        {
            <p class="text-center">
                <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
            </p>
        }
        else
        {
            <AssociationComponent Model="model" SubmitCallback="Submit"></AssociationComponent>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;
    AssociationContract model = new();

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.CheckPermissions(PermissionCtor.ManageAssociations.AssociationEdit, Id))
        {
            await base.OnInitializedAsync();
            return;
        }
        var result = await Post<AssociationContract>("api/Association/GetAssociation", new AssociationRequest { AssociationId = Id });

        if (result == null)
        {
            await base.OnInitializedAsync();
            return;
        }

        model = result;
        await base.OnInitializedAsync();
    }

    async Task Submit()
    {
    // create request
        var request = new AssociationUpdateRequest()
        {
            AssociationId = model.AssociationId,
            Name = model.Name,
            Divisions = model.Divisions.OrderBy(x => x).ToList(),
            Classifications = model.Classifications,
            Categories = model.Categories,
            FirstPenaltyLabel = model.FirstPenaltyLabel,
            HitOnNonThreatPointDown = model.HitOnNonThreatPointDown,
            FirstProceduralPointDown = model.FirstProceduralPointDown,
            SecondPenaltyLabel = model.SecondPenaltyLabel,
            SecondProceduralPointDown = model.SecondProceduralPointDown,
            ThirdPenaltyLabel = model.ThirdPenaltyLabel,
            ThirdProceduralPointDown = model.ThirdProceduralPointDown,
            SoRoles = model.SoRoles,
            MatchKinds = model.MatchKinds
        };
        var response = await Post<AssociationContract>("/api/Association/UpdateAssociation", request);
        if (response != null)
            UriHelper.NavigateTo(RouteHelper.GetUrl<AssociationDetail>(new { id = response.AssociationId }));
    }
}
