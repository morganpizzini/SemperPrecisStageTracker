@page "/todo"
@using SemperPrecisStageTracker.Blazor.Services.IndexDB
@inject ClientConfiguration config
@inject MatchServiceIndexedDb matchServiceIndexDb


@if (config.IsLocal)
{
    <Button Clicked="@Add">aggiungi</Button>
    <Button Clicked="@Get">get</Button>
    <Button Clicked="@Clear">clear</Button>
    @matches.Count
    <ul>
        gestione degli stage multi-string
        
        permessi su dettaglio team per vedere i tiratori
      
        assegnazione shooter al team deve essere duplice, il team e lo shooter devono confermare l'associazione, mettere filtri in tutte le chiamate di recupero tiratori, mostrare 2 boc con "in attesa di conferma" e "in attesa di approvazione dal tiratore"
        pagina profilo tiratore
        richieste in attesa del tiratore
        
        Inserire un metodo per chiusura del match che calcola le stats di ogni tiratore e le inserisce in una tabella ad-hoc segnando la posizione ottenuta in classificazione, divisione e in generale (informazioni riguardo piazzamento su altri tiratori nella stessa divisione e con classificazioni più alte)

        cancellazione logica dei groupshooter? in modo che non si possano re-iscrivere

        Bottone nella pagina del team per resettare la password
        Smtp server per invio email
        salvare il numero di volte in cui il risultato viene editato (all'interno dell'upsert) e salvare risultato precedente

        [Blazor]
        In caso di match unclassified (senza suddivisioni MA/EX/SS/MM/NV), in fase di registrazione le divisioni disponibili dovranno essere presa dal match e non dall'utente es:
        se ho classificazione ESP Limited, posso comunque andare in CDP o SSP, il tiratore dovrà avere solo la registrazione verso l'associazione
        In caso di match open, tutti possono iscriversi, indipendentemente dall'iscrizione all'associazione o a classificazioni
        Se il match è open, i tiratori non iscritti all'associazione sceglieranno la divisione e faranno classifica a parte
        possibilità cambiare la tipologia di match solo se non ho shooter registrati

        controllo dei tempi già inseriti, tramite una schermata che mostra il prima e dopo, con radio button per accettazione

        Quando uno shooter viene escluso da un match, solo chi ha il permesso di gestione dei gruppi/aggiunta tiratori può re-inserirlo (per evitare le re-iscrizioni continue) (possible implementando cancellazione logica oppure con tabella parallela, in cui salvo chi ho eliminato dal match)
        
        tutte le chiamate MainServiceLayer.Online dovrebbero essere gestite dallo state 

        Creare uno shooter che gestisca il place e l'associazione
        
        
        [trainer]
        play audio https://exceptionnotfound.net/how-to-play-a-sound-with-blazor-and-javascript/

        [controllare interfaccia]
        se match è unclassified non mostrare la colonna classificazione, ma solo la divisione nella pagina del dettaglio gruppo e dettaglio stage
        inserimento di uno shooter in un match open
        nei metodi del dettaglio ruolo => quando aggiungo o rimuovo un'entità restituire la lista aggiornata, e non OkResponse
        applicazione dello score

        [permessi]
        se elimino un ruolo i permessi associati e gli utenti associati dovrebbero sparire
        se elimino un ruolo tutta la cache degli utenti associati dovrebbe scomparire
        test per aggiornamenti permessi riguardo alla cache, se eseguo un'aggiornamento sui permessi la chiamata di login successiva dovrebbe rispettare i permessi applicati

        [memory cache e/o response cache]
        getgroup
        FetchAvailableGroupShooter
        caching sulla base di GetGroupShooterContractByGroupId(string groupId,string matchId = null)
        utenti per authn/authz

        [infra]
        aggiungere subdomain all'appservice e caricare l'applicazione per visualizzare solo i risultati, configurare la pipeline
        nel frontend devo poter mostrare le stats del match, utilizzando lo shortlink

        [chakra]
        mettere un metodo per gestire una transazione più grossa, cross metodo
        aggiungere extension method AsAsync
        
        
        offuscamento dati API se non ho i permessi di vedere determinate info (es: se ho pagato nel dettaglio gruppo nel match, la lista di tiratori all'interno di un team)

        login con AAD
        https://docs.microsoft.com/en-us/aspnet/core/blazor/security/webassembly/standalone-with-azure-active-directory?view=aspnetcore-6.0
        altri providers
        https://docs.microsoft.com/en-us/aspnet/core/security/authentication/social/?view=aspnetcore-6.0&tabs=visual-studio

        provider esterni
        https://docs.microsoft.com/en-us/aspnet/core/security/authentication/social/?view=aspnetcore-6.0&tabs=visual-studio
        bottoni https://github.com/dotnet/AspNetCore.Docs/issues/10563

        fare encrypt della FK sulla tabella anagrafica
        https://docs.microsoft.com/en-us/sql/relational-databases/security/encryption/always-encrypted-enclaves?view=sql-server-ver16

        usare il masking per utilizzare il db al di fuori dell'applicazione principale (l'app che mostrerà solo i risultati avrà l'utente sul db con meno permessi e quindi vedrà tutto in blur)
        https://docs.microsoft.com/en-us/sql/relational-databases/security/dynamic-data-masking?view=sql-server-ver16
        
        hamburger menu

        [sviluppo]
        <li>Gestire parimerito con punti down (fare calcolo inverso, chi ha il tempo maggiore vince, perchè ha avuto minor punti down, ed è stato quindi più preciso)</li>

        [mettere i test]
        tests per UpsertShooterStages
        controllare tutti i test che aggiungono/rimuovono permessi
        Ogni associazione ha i suoi ruoli per SO CSO SSO
        Ogni associazione impostare quanto vale la penalità
        shooterController campi: data rilascio porto d'armi, nato a, residenza, via, cap, provincia, country, codice fiscale, telefono
        matchcontroller campi: cost, paymentDetails
        permission controller: create e delete user role
        matchstats controllare che l'ordinamento sia sempre corretto
        match controller FetchMatchSO - recupero dei match per offline / aggregation controller FetchDataForMatch
        metodo UpsertShooterSOStage controllare che vengano aggiunti i permessi giusti
        metodi UpsertShooterStages e UpsertShooterStage
        tutti i metodi che riguardano unifyclassification e openmatch
        aggiunta groupshooter senza inserire il gruppo e tutti i metodi associati alla selezione di un gruppo
        nuovi metodi creazione gruppo in match
        aggiunta groupshooter disponibilità all'interno del gruppo come numero
        authorization controller SignIn
        impossibilità di modificare i bersagli su uno stage se sono già stati inseriti dei punteggi

        [deployment]
        Backup del db

        permessi -> ruolo mettere field per aggiornare name e description

        nel team:
        modalità per iscrizione annuale o solare
        
        nell'UpsertShooterStages' far risalire il messaggio di errore fino alla risposta

        alla cancellazione di un shooterassociationInfo cancellare anche le shooterassociation (inserire anche test)

        controllare ed aggiornare i permessi quando accedo all'applicazione e sono già loggato
        quando aggiorno punti down di una associazione, aggiornare tutti i punti down di shooterstages per i match aperti

        <li>creare interfaccia per creare più di un gruppo alla volta</li>

        <li>Controllare top bar in mobile</li>

        <li>Creare un test UI per verificare l'aggiunta di uno shooter in un gruppo</li>

        @*rimuovere i Validator="@ValidationRule.IsNotEmpty"*@
        <li>Nelle associazioni e società inserire regolamento, link e allegato (creare un servizio che carica su blob storage e uno mock che salva in locale)</li>
        <li>All'aggiunta di un punteggio inviare una notifica al tiratore, ogni match ha una flag che permette di disabilitare questo meccanismo, aggiungere anche un pulsante che permette di aggiornare tutti i tiratori in 1 colpo solo</li>
        <li>Bloccare possibilità di reason in shooterteampayment (??)</li>
        <li>Verificare UI per divisione shooter association</li>
        <li>UI per assegnazione teamHolder</li>
        <li>assegnazione permessi accesso teamHolder</li>
        <li>UI per assegnazione permessi manuale</li>
        <li>Correggere test che danno rosso per permessi, guardare MatchControllerTest per esempi, mancano tutti i test di update/delete</li>

        <li>Nella action UpsertShooterAssociation gestire il doppio salvataggio con una transazione</li>

        <li>Ogni stage ordine randomico dei tiratori, ma stabile sullo stesso stage</li>
        <li>Possibilità di mescolare l'ordine direttamente sulla pagina</li>
        <li>Se entro come SO ho link rapido per stage in homepage</li>

        <li>Creare punti di ritrovo per sparare (sicuro/forse/poco probabile) con piccola chat di messaggi</li>

        <li>uniformare customauthservice pescando le informazioni da localstorage https://github.com/Naveen512/Blazor-webassembly-authentication-scratch/tree/main/BlazorWasm.JwtAuthLearning</li>

        <li>upload foto https://www.aspitalia.com/script/1376/Effettuare-Upload-File-Blazor-Azure-Blob-Storage.aspx</li>


        <li>Evidenziare Migliori 3 (oro/argento/bronzo) per ogni stage</li>
        <li>Inserimento link per download immagini</li>
        <li>caricamento immagini per posizione stage</li>
        <li>Opzione lotteria /elimina all'uscita o mantieni</li>
        <li>virtualization sulle liste e loading dinamico itemprovider e placeholder https://docs.microsoft.com/it-it/aspnet/core/blazor/components/virtualization?view=aspnetcore-5.0 </li>

        <li>Dividere la creazione di un match con un wizard, in modo che prima possa settare l'associazione e poi tutto il resto</li>

        Per ogni place segnare i materiali

        <li>Font MV boli</li>

        <li>Controllare tastierino numerico su Ios: numberEdit potrebbe non mettere la virgola</li>
    </ul>
}

@code
{
    private IList<MatchContract> matches = new List<MatchContract>();

    private async Task Add()
    {
        var openResult = await matchServiceIndexDb.OpenIndexedDb();
        await matchServiceIndexDb.AddItems(new List<MatchContract> { new() { MatchId = Guid.NewGuid().ToString(), Name = "Match01" } });
    }

    private async Task Get()
    {
        var openResult = await matchServiceIndexDb.OpenIndexedDb();

        matches = await matchServiceIndexDb.GetAll<MatchContract>();

    }
    private async Task Clear()
    {
        var openResult = await matchServiceIndexDb.OpenIndexedDb();

        await matchServiceIndexDb.DeleteAll<MatchContract>();

    }
}
