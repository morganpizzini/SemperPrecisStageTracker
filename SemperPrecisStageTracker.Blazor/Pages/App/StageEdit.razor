@page "/app/matches/{id}/stages/edit/{stageId}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<StageEdit> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["EditStage"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new{ id = Id}))">@L["BackToMatch"]</NavLink>
<Divider />
@if (PageLoading)
{
    <p class="text-center">
        <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
    </p>
}
else
{
    <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@model">
        <Validation Validator="@ValidationRule.IsNotEmpty">
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Name"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                    <TextEdit Placeholder="@L["Name"]" @bind-Text="@model.Name">
                        <Feedback>
                            <ValidationError>@L["WrongName"]</ValidationError>
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
        <Validation Validator="@ValidationRule.None">
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Targets"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                    <NumericEdit Placeholder="@L["Targets"]" TValue="int" @bind-Value="@model.Targets">
                        <Feedback>
                            <ValidationError>@L["WrongTargets"]</ValidationError>
                        </Feedback>
                    </NumericEdit>
                </FieldBody>
            </Field>
        </Validation>
        <Validation Validator="@ValidationRule.None">
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Index"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                    <NumericEdit Placeholder="@L["Index"]" TValue="int" @bind-Value="@model.Index">
                        <Feedback>
                            <ValidationError>@L["WrongIndex"]</ValidationError>
                        </Feedback>
                    </NumericEdit>
                </FieldBody>
            </Field>
        </Validation>
        <Row>
            <Column ColumnSize="ColumnSize.IsFull.OnTablet.IsHalf.OnDesktop">
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["PSO"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <TextEdit Placeholder="@L["PSO"]" @bind-Text="@model.SO">
                                <Feedback>
                                    <ValidationError>@L["WrongSO"]</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Scenario"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <MemoEdit Rows="5" Placeholder="@L["Scenario"]" @bind-Text="@model.Scenario">
                                <Feedback>
                                    <ValidationError>@L["WrongScenario"]</ValidationError>
                                </Feedback>
                            </MemoEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["GunReadyCondition"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <MemoEdit Rows="3" Placeholder="@L["GunReadyCondition"]" @bind-Text="@model.GunReadyCondition">
                                <Feedback>
                                    <ValidationError>@L["WrongGunReadyCondition"]</ValidationError>
                                </Feedback>
                            </MemoEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["StageProcedure"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <MemoEdit Rows="5" Placeholder="@L["StageProcedure"]" @bind-Text="@model.StageProcedure">
                                <Feedback>
                                    <ValidationError>@L["WrongStageProcedure"]</ValidationError>
                                </Feedback>
                            </MemoEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Notes"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <MemoEdit Rows="2" Placeholder="@L["Notes"]" @bind-Text="@model.StageProcedureNotes">
                                <Feedback>
                                    <ValidationError>@L["WrongNotes"]</ValidationError>
                                </Feedback>
                            </MemoEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Column>
            <Column ColumnSize="ColumnSize.IsFull.OnTablet.IsHalf.OnDesktop">
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Strings"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <NumericEdit Placeholder="@L["Strings"]" TValue="int" @bind-Value="@model.Strings">
                                <Feedback>
                                    <ValidationError>@L["WrongStrings"]</ValidationError>
                                </Feedback>
                            </NumericEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Scoring"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <TextEdit Placeholder="@L["Scoring"]" @bind-Text="@model.Scoring">
                                <Feedback>
                                    <ValidationError>@L["WrongScoring"]</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["TargetsDescription"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <TextEdit Placeholder="@L["TargetsDescription"]" @bind-Text="@model.TargetsDescription">
                                <Feedback>
                                    <ValidationError>@L["WrongTargetsDescription"]</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["ScoredHits"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <TextEdit Placeholder="@L["ScoredHits"]" @bind-Text="@model.ScoredHits">
                                <Feedback>
                                    <ValidationError>@L["WrongScoredHits"]</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["StartStop"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <TextEdit Placeholder="@L["StartStop"]" @bind-Text="@model.StartStop">
                                <Feedback>
                                    <ValidationError>@L["WrongStartStop"]</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Rules"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <TextEdit Placeholder="@L["Rules"]" @bind-Text="@model.Rules">
                                <Feedback>
                                    <ValidationError>@L["WrongRules"]</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Distance"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <TextEdit Placeholder="@L["Distance"]" @bind-Text="@model.Distance">
                                <Feedback>
                                    <ValidationError>@L["WrongDistance"]</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field>
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">&nbsp;</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <Check TValue="bool" @bind-Checked="@model.CoverGarment">@L["CoverGarment"]</Check>
                        </FieldBody>
                    </Field>
                </Validation>
            </Column>
        </Row>
        <Field Horizontal="true" JustifyContent="JustifyContent.End">
            <FieldBody ColumnSize="ColumnSize.Is10.Is2.WithOffset">
                <Button Size="Size.Small" Color="Color.Primary" Clicked="@Submit" Loading="ApiLoading" Disabled="ApiLoading">
                    <LoadingTemplate><Icon Name="FontAwesomeIcons.AnimationSpinner" />&nbsp;@L["Submit"]</LoadingTemplate>
                    <ChildContent>@L["Submit"]</ChildContent>
                </Button>
            </FieldBody>
        </Field>
    </Validations>
}
@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string StageId { get; set; }

    Validations validations;

    StageUpdateRequest model = new();

    protected override async Task OnInitializedAsync()
    {
        var existing = await Post<StageContract>("api/Stage/GetStage", new StageRequest() { StageId = StageId });
        model.Name = existing.Name;
        model.Targets = existing.Targets;
        model.StageId = StageId;
        model.Index = existing.Index;
        model.SO = existing.SO;
        model.Scenario = existing.Scenario;
        model.GunReadyCondition = existing.GunReadyCondition;
        model.StageProcedure = existing.StageProcedure;
        model.StageProcedureNotes = existing.StageProcedureNotes;
        model.Strings = existing.Strings;
        model.Scoring = existing.Scoring;
        model.TargetsDescription = existing.TargetsDescription;
        model.ScoredHits = existing.ScoredHits;
        model.StartStop = existing.StartStop;
        model.Rules = existing.Rules;
        model.Distance = existing.Distance;
        model.CoverGarment = existing.CoverGarment;
        await base.OnInitializedAsync();
    }

    async Task Submit()
    {
        if (! (await validations.ValidateAll()))
            return;
        await validations.ClearAll();
        var response = await Post<StageContract>("/api/Stage/UpdateStage", model);
        if (response != null)
        UriHelper.NavigateTo(RouteHelper.GetUrl<StageDetail>(new { id = Id, stageId = response.StageId }));
    }
}
