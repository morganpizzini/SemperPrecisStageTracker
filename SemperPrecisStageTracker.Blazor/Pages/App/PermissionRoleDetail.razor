@page "/app/permissions/role/{id}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<PermissionRoleDetail> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["RoleDetail"]</Heading>
<Divider />
<NavLink href="@(RouteHelper.GetUrl<PermissionsHandling>())">@L["BackToList"]</NavLink>
<AuthorizeView Roles="@(Permissions.ManagePermissions.ToDescriptionString())">
    <Authorizing>
        <h3 class="mt-5">@L["Loading"]</h3>
    </Authorizing>
    <NotAuthorized>
        <h3 class="mt-5">@L["NoAuth"]</h3>
    </NotAuthorized>
    <Authorized>
        <PermissionRoleComponent Permissions="permissions" 
                                 Users="users" 
                                 Role="role" 
                                 SubmitCallbackNewPermission="CreatePermission" 
                                 SubmitCallbackDeletePermission="DeletePermission"
                                 SubmitCallbackNewUser="CreateUser" 
                                 SubmitCallbackDeleteUser="DeleteUser"
                                 SubmitCallbackSaveEntity="SaveEntity"
                                 SubmitCallbackDeleteEntity="DeleteEntity"></PermissionRoleComponent>
    </Authorized>
</AuthorizeView>

@code {

    [Parameter]
    public string Id { get; set; }
    
    RoleContract role = new();
    IList<PermissionContract> permissions= new List<PermissionContract>();
    IList<ShooterContract> users= new List<ShooterContract>();
    

    protected override async Task OnInitializedAsync()
    {
        await LoadRole();
        permissions = await Post<IList<PermissionContract>>("api/Permission/FetchPermissions");
        users = await Post<IList<ShooterContract>>("api/Shooter/FetchAllShooters");
        await base.OnInitializedAsync();
    }

    async Task LoadRole()
    {
        role = await Post<RoleContract>("api/Permission/GetRole", new RoleRequest() { RoleId = Id });
    }

    async Task CreatePermission(RolePermissionCreateRequest request)
    {
        
        var response = await Post<OkResponse>("/api/Permission/CreatePermissionOnRole", request);
        if (response == null)
            return;
        await LoadRole();
    }
    
    private async Task DeletePermission(RolePermissionRequest request)
    {
        var response = await Post<OkResponse>("/api/Permission/DeletePermissionOnRole", request);
        if (response == null)
            return;
        await LoadRole();
    }

    async Task CreateUser(UserRoleCreateRequest request)
    {
        
        var response = await Post<OkResponse>("/api/Permission/CreateUserRole", request);
        if (response == null)
            return;
        await LoadRole();
    }
    
    private async Task DeleteUser(UserRoleRequest request)
    {
        var response = await Post<OkResponse>("/api/Permission/DeleteUserRole", request);
        if (response == null)
            return;
        await LoadRole();
    }
    
    
    private async Task SaveEntity(RoleContract request)
    {
        if (request== null)
            return;
        var response = await Post<RoleContract>("/api/Permission/UpdateRole", new RoleUpdateRequest
        {
            RoleId = request.RoleId,
            Description = request.Description,
            Name = request.Name
        });
        if (response == null)
            return;
        role = response;
    }
    private async Task DeleteEntity(string roleId)
    {
        if (string.IsNullOrEmpty(roleId))
            return;
        var response = await Post<PlaceContract>("/api/Permission/DeleteRole", new RoleRequest
            {
                RoleId = roleId
            });
        if (response == null)
            return;
        UriHelper.NavigateTo(RouteHelper.GetUrl<PermissionsHandling>());
    }
}