@page "/app/places/{id}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<PlaceDetail> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["Detail"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<Places>())">@L["BackToList"]</NavLink>
@if (AuthService.CheckPermissions(Permissions.ManagePlaces.AndList(Permissions.EditPlace), Id))
{
    <Button Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<PlaceEdit>(new{ id = Id}))"><Icon Name="IconName.Pen" /> @L["EditPlace"]</Button>
}
@if (AuthService.CheckPermissions(Permissions.ManagePlaces, Id))
{
    <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteEntity())"><Icon Name="IconName.Delete" /></Button>
}
@if (ApiLoading)
{
    <p class="text-center">
        <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
    </p>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <Row>
                        <Column ColumnSize="ColumnSize.IsFull.OnMobile.Is6.OnDesktop">
                            <CardTitle>@L["Place"]</CardTitle>
                            <CardText>@place.Name</CardText>
                            <CardTitle>@L["Holder"]</CardTitle>
                            <CardText>@place.Holder</CardText>
                            <CardTitle>@L["Phone"]</CardTitle>
                            <CardText>@place.Phone</CardText>
                            <CardTitle>@L["Email"]</CardTitle>
                            <CardText>@place.Email</CardText>
                        </Column>
                        <Column ColumnSize="ColumnSize.IsFull.OnMobile.Is6.OnDesktop">
                            <CardTitle>@L["Address"]</CardTitle>
                            <CardText>@place.Address</CardText>
                            <CardTitle>@L["City"]</CardTitle>
                            <CardText>@place.City</CardText>
                            <CardTitle>@L["Region"]</CardTitle>
                            <CardText>@place.Region</CardText>
                            <CardTitle>@L["PostalZipCode"]</CardTitle>
                            <CardText>@place.PostalZipCode</CardText>
                            <CardTitle>@L["Country"]</CardTitle>
                            <CardText>@place.Country</CardText>
                        </Column>
                    </Row>
                </CardBody>
            </Card>
        </Column>
    </Row>
}
<Modal @ref="modalRefEntityToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteMatch"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (place != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@place.Name</Text>
                </Field>
                <Field>
                    <FieldLabel>@L["Holder"]</FieldLabel>
                    <Text>@place.Holder</Text>
                </Field>
            }
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalEntityToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalEntityToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {

    [Parameter]
    public string Id { get; set; }
    private Modal modalRefEntityToDelete;
    PlaceContract place = new();

    protected override async Task OnInitializedAsync()
    {
        place = await Post<PlaceContract>("api/Place/GetPlace", new PlaceRequest() { PlaceId = Id });

        await base.OnInitializedAsync();
    }

    void DeleteEntity()
    {
        modalRefEntityToDelete.Show();
    }

    private async Task HideModalEntityToDelete(bool choice)
    {
        if (choice && place != null)
        {
            await Post<PlaceContract>("/api/Place/DeletePlace", new PlaceRequest
            {
                PlaceId = place.PlaceId
            });
            UriHelper.NavigateTo(RouteHelper.GetUrl<Places>());
        }
        await modalRefEntityToDelete.Hide();
    }
}