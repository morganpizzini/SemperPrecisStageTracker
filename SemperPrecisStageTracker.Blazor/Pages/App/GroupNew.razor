@page "/app/matches/{id}/groups/new"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<GroupNew> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["NewGroup"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new{ id = Id}))">@L["BackToMatch"]</NavLink>
<Divider />
<Validations @ref="validations" Mode="ValidationMode.Manual" Model="@model">
    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Name"]</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                <TextEdit Placeholder="@L["Name"]" @bind-Text="@model.Name">
                    <Feedback>
                        <ValidationError>@L["WrongName"]</ValidationError>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Field Horizontal="true" JustifyContent="JustifyContent.End">
        <Button Size="Size.Small" Color="Color.Primary" Clicked="@Submit" Loading="ApiLoading" Disabled="ApiLoading">
            <LoadingTemplate><Icon Name="FontAwesomeIcons.AnimationSpinner" />&nbsp;@L["Submit"]</LoadingTemplate>
            <ChildContent>@L["Submit"]</ChildContent>
        </Button>
    </Field>
</Validations>

@code {

    [Parameter]
    public string Id { get; set; }

    Validations validations;
    GroupCreateRequest model = new GroupCreateRequest();

    async Task Submit()
    {
        if (! (await validations.ValidateAll()))
            return;
        await validations.ClearAll();
        model.MatchId = Id;
        var response = await Post<GroupContract>("/api/Group/CreateGroup", model);
        UriHelper.NavigateTo(RouteHelper.GetUrl<GroupDetail>(new { id = Id, groupId = response.GroupId }));
    }
}
