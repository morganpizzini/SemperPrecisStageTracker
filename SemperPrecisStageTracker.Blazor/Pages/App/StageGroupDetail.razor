@page "/app/matches/{id}/stages/{stageId}/group/{groupId}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<StageGroupDetail> L
@inject IJSRuntime JSRuntime

<Heading Size="HeadingSize.Is1">@L["Detail"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new{ id = Id}))">@L["BackToMatch"]</NavLink>
<NavLink href="@(RouteHelper.GetUrl<StageDetail>(new{ id = Id, stageId = stage.StageId}))">@L["BackToStage"]</NavLink>
<Divider />
@if (PageLoading)
{
    <p class="text-center">
        <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
    </p>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.Is6">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <CardTitle>@L["Group"]</CardTitle>
                    <CardText>@group.Name</CardText>
                    <CardTitle>@L["Shooters"]</CardTitle>
                    <CardText>@group.Shooters.Count</CardText>
                </CardBody>
            </Card>
        </Column>
        @if (group.Match != null)
        {
            <Column ColumnSize="ColumnSize.Is6">
                <Card Margin="Margin.Is4.OnY">
                    <CardBody>
                        <CardTitle>@L["Match"]</CardTitle>
                        <CardText><NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new{ id = Id}))">@group.Match.Name</NavLink> - @group.Match.MatchDateTime.ToString("d")</CardText>
                        <CardTitle>@L["Stage"]</CardTitle>
                        <CardText><NavLink href="@(RouteHelper.GetUrl<StageDetail>(new{ id = Id, stageId = stage.StageId}))">@stage.Name</NavLink></CardText>
                    </CardBody>
                </Card>
            </Column>
        }
    </Row>
    <Divider />
    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <CardTitle>@L["Shooters"]</CardTitle>
                    
                        <Table Striped="true" Hoverable="true">
                            <TableHeader ThemeContrast="ThemeContrast.Dark">
                                <TableRow>
                                    <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                    <TableHeaderCell>@L["Total"]</TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                @if (shooters.Count > 0)
                                {
                                    <Virtualize Context="shooter" Items="@shooters">
                                        <TableRow Class="@(shooter.ShooterStatus ==  ShooterStatusEnum.IsDisqualified ? "bg-danger": shooter.ShooterStatus ==  ShooterStatusEnum.HasWarning ? "bg-warning":"")">
                                            <TableRowHeader>
                                                @{
                                                    if (shooter.ShooterStatus == ShooterStatusEnum.IsDisqualified)
                                                    {
                                                        if (shooter.ShooterStage.Total < 0)
                                                        {
                                                            <Button Color="Color.Link" Clicked="@(() => FillShooter(shooter))">
                                                                @shooter.Shooter.LastName @shooter.Shooter.FirstName
                                                            </Button>
                                                        }
                                                        else
                                                        {
                                                            @shooter.Shooter.LastName @shooter.Shooter.FirstName
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <Button Color="Color.Link" Clicked="@(() => FillShooter(shooter))">
                                                            @shooter.Shooter.LastName @shooter.Shooter.FirstName
                                                        </Button>
                                                    }
                                                }
                                            </TableRowHeader>
                                            <TableRowCell>@(shooter.ShooterStage.Total> 0 ? shooter.ShooterStage.Total.ToString() : shooter.ShooterStage.Total<0 ? @L["Disqualified"] : "")</TableRowCell>
                                        </TableRow>
                                    </Virtualize>
                                }
                                else
                                {
                                    <TableRow>
                                        <TableRowCell ColumnSpan="2" TextAlignment="TextAlignment.Center">
                                            @L["NoShooters"]
                                        </TableRowCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                    
                </CardBody>
            </Card>
        </Column>
    </Row>
}
<Modal @ref="modalRef" Size="@ModalSize.ExtraLarge">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["FillShooter"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <Text Weight="TextWeight.Bold">@L["Name"]</Text>
                    <Text>@shooterToFill.LastName @shooterToFill.FirstName - @shooterToFill.BirthDate.ToString("d")</Text>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Text Weight="TextWeight.Bold">@L["Stage"]</Text>
                    <Text>@stage.Name</Text>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Button Size="Size.Small" Color="Color.Link" Clicked="@(() => HideLegendModal(true))"><Icon Name="IconName.Info" /></Button>
                </Column>
            </Row>
            <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@model">

                <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
                    <Items>
                        <Tab Name="penalties">@L["Penalities"]</Tab>
                        <Tab Name="downs">@L["DownPoints"]</Tab>
                        <Tab Name="recap">@L["Recap"]</Tab>
                    </Items>
                    <Content>
                        <TabPanel Name="penalties">
                            <Validation Validator="@ValidationRule.None">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is4">@L["Time"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is8">
                                        @*<TextEdit Placeholder="@L["Time"]" @bind-Value="@model.Time" InputMode="TextInputMode.Decimal" ElementId="time" OnFocus="@(async () => await OnFocus("time"))">
                                            <Feedback>
                                                <ValidationError>@L["WrongCountry"]</ValidationError>
                                            </Feedback>
                                        </TextEdit>*@
                                        <NumericEdit Placeholder="@L["Time"]" TValue="decimal" ElementId="time" @bind-Value="@model.Time" >
                                            <Feedback>
                                                <ValidationError>@L["WrongTime"]</ValidationError>
                                            </Feedback>
                                        </NumericEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation Validator="@ValidationRule.None">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is4">@L["Procedurals"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is8">
                                        <Addons>
                                            <Addon AddonType="AddonType.Body">
                                                <NumericEdit Placeholder="@L["Procedurals"]" TValue="int" @bind-Value="@model.Procedurals">
                                                    <Feedback>
                                                        <ValidationError>@L["WrongProcedurals"]</ValidationError>
                                                    </Feedback>
                                                </NumericEdit>
                                            </Addon>
                                            <Addon AddonType="AddonType.End">
                                                <Button Size="Size.Small" Type="ButtonType.Button" Color="Color.Danger" disabled="@(model.Procedurals < 1 ? true : false)" Clicked="@(() => { model.Procedurals--; })"><Icon Name="IconName.MinusSquare" /></Button>
                                                <Button Size="Size.Small" Type="ButtonType.Button" Color="Color.Success" Clicked="@(() => { model.Procedurals++; })"><Icon Name="IconName.PlusSquare" /></Button>
                                            </Addon>
                                        </Addons>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation Validator="@ValidationRule.None">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is4">@L["FlagrantPenalties"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is8">
                                        <Addons>
                                            <Addon AddonType="AddonType.Body">
                                                <NumericEdit Placeholder="@L["FlagrantPenalties"]" TValue="int" @bind-Value="@model.FlagrantPenalties">
                                                    <Feedback>
                                                        <ValidationError>@L["WrongFlagrantPenalties"]</ValidationError>
                                                    </Feedback>
                                                </NumericEdit>
                                            </Addon>
                                            <Addon AddonType="AddonType.End">
                                                <Button Size="Size.Small" Type="ButtonType.Button" Color="Color.Danger" disabled="@(model.FlagrantPenalties < 1 ? true : false)" Clicked="@(() => { model.FlagrantPenalties--; })"><Icon Name="IconName.MinusSquare" /></Button>
                                                <Button Size="Size.Small" Type="ButtonType.Button" Color="Color.Success" Clicked="@(() => { model.FlagrantPenalties++; })"><Icon Name="IconName.PlusSquare" /></Button>
                                            </Addon>
                                        </Addons>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation Validator="@ValidationRule.None">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is4">@L["Ftdr"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is8">
                                        <Addons>
                                            <Addon AddonType="AddonType.Body">
                                                <NumericEdit Placeholder="@L["Ftdr"]" TValue="int" @bind-Value="@model.Ftdr">
                                                    <Feedback>
                                                        <ValidationError>@L["WrongFtdr"]</ValidationError>
                                                    </Feedback>
                                                </NumericEdit>
                                            </Addon>
                                            <Addon AddonType="AddonType.End">
                                                <Button Size="Size.Small" Type="ButtonType.Button" Color="Color.Danger" disabled="@(model.Ftdr < 1 ? true : false)" Clicked="@(() => { model.Ftdr--; })"><Icon Name="IconName.MinusSquare" /></Button>
                                                <Button Size="Size.Small" Type="ButtonType.Button" Color="Color.Success" Clicked="@(() => { model.Ftdr++; })"><Icon Name="IconName.PlusSquare" /></Button>
                                            </Addon>
                                        </Addons>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Row>
                                <Column ColumnSize="ColumnSize.IsHalf">
                                    <Validation Validator="@ValidationRule.None">
                                        <Field Horizontal="true">
                                            <FieldLabel ColumnSize="ColumnSize.Is4">&nbsp;</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is8">
                                                <Check TValue="bool" @bind-Checked="@model.Warning">@L["Warning"]</Check>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf">
                                    <Validation Validator="@ValidationRule.None">
                                        <Field Horizontal="true">
                                            <FieldLabel ColumnSize="ColumnSize.Is4">&nbsp;</FieldLabel>
                                            <FieldBody ColumnSize="ColumnSize.Is8">
                                                <Check TValue="bool" @bind-Checked="@model.Disqualified">@L["Disqualified"]</Check>
                                            </FieldBody>
                                        </Field>
                                    </Validation>
                                </Column>
                            </Row>
                        </TabPanel>
                        <TabPanel Name="downs">
                            <Validation Validator="@ValidationRule.None">
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is4">@L["HitOnNonThreat"]</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is8">
                                        <Addons>
                                            <Addon AddonType="AddonType.Body">
                                                <NumericEdit Placeholder="@L["HitOnNonThreat"]" TValue="int" @bind-Value="@model.HitOnNonThreat">
                                                    <Feedback>
                                                        <ValidationError>@L["WrongHitOnNonThreat"]</ValidationError>
                                                    </Feedback>
                                                </NumericEdit>
                                            </Addon>
                                            <Addon AddonType="AddonType.End">
                                                <Button Size="Size.Small" Type="ButtonType.Button" Color="Color.Danger" disabled="@(model.HitOnNonThreat < 1 ? true : false)" Clicked="@(() => { model.HitOnNonThreat--; })"><Icon Name="IconName.MinusSquare" /></Button>
                                                <Button Size="Size.Small" Type="ButtonType.Button" Color="Color.Success" Clicked="@(() => { model.HitOnNonThreat++; })"><Icon Name="IconName.PlusSquare" /></Button>
                                            </Addon>
                                        </Addons>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            @for (int i = 0; i < model.DownPoints.Count; i++)
                            {
                                var tmp = i;
                                <Field Horizontal="true">
                                    <FieldLabel ColumnSize="ColumnSize.Is4">@L["Target"]&nbsp;@(tmp + 1)</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is8">
                                        <Addons>
                                            <Addon AddonType="AddonType.Body">
                                                <input id="@($"target{tmp}")" type="number" value="@model.DownPoints[tmp]" class="form-control"
                                                       onfocus="this.select();"
                                                       @onkeydown="@((e) => Focus(e, tmp + 1))"
                                                       @onchange="@(e => model.DownPoints[tmp] = e.Value != null ? Convert.ToInt32(e.Value) : 0)" />

                                            </Addon>
                                            <Addon AddonType="AddonType.End">
                                                <Button Size="Size.Small" Type="ButtonType.Button" Color="Color.Warning" Clicked="@(() => { model.DownPoints[tmp]+=5; })">@L["NN"]</Button>
                                                <Button Size="Size.Small" Type="ButtonType.Button" Color="Color.Danger" disabled="@(model.DownPoints[tmp] < 1 ? true : false)" Clicked="@(() => { model.DownPoints[tmp]--; })"><Icon Name="IconName.MinusSquare" /></Button>
                                                <Button Size="Size.Small" Type="ButtonType.Button" Color="Color.Success" Clicked="@(() => { model.DownPoints[tmp]++; })"><Icon Name="IconName.PlusSquare" /></Button>
                                            </Addon>
                                        </Addons>
                                    </FieldBody>
                                </Field>
                            }
                        </TabPanel>
                        <TabPanel Name="recap">
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is8">@L["Time"]</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is4">
                                    <Text>@String.Format("{0:f2}", model.Time)</Text>
                                </FieldBody>
                            </Field>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is8">@L["Procedurals"] (x3)</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is4">
                                    <Text>@model.Procedurals</Text>
                                </FieldBody>
                            </Field>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is8">@L["HitOnNonThreat"] (x5)</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is4">
                                    <Text>@model.HitOnNonThreat</Text>
                                </FieldBody>
                            </Field>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is8">@L["FlagrantPenalties"] (x10)</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is4">
                                    <Text>@model.FlagrantPenalties</Text>
                                </FieldBody>
                            </Field>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is8">@L["Ftdr"] (x20)</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is4">
                                    <Text>@model.Ftdr</Text>
                                </FieldBody>
                            </Field>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is8">@L["DownPoints"]</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is4">
                                    <Text>@model.DownPoints.Sum()</Text>
                                </FieldBody>
                            </Field>
                            <Divider />
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is8">@L["Total"]</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is4">
                                    <Text>@(model.Total> 0 ? String.Format("{0:f2}", model.Total) : model.Total<0 ? @L["Disqualified"] : "" )</Text>
                                </FieldBody>
                            </Field>
                        </TabPanel>
                    </Content>
                </Tabs>

            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModal(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModal(true))" Loading="ApiLoading" Disabled="ApiLoading">
                <LoadingTemplate><Icon Name="FontAwesomeIcons.AnimationSpinner" />&nbsp;@L["Submit"]</LoadingTemplate>
                <ChildContent>@L["Submit"]</ChildContent>
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="modalConfirmRef">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <ModalTitle>
                @L["ConfirmTime"]
            </ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <Text Weight="TextWeight.Bold">@L["Shooter"]</Text>
                    <Text>@shooterToFill.LastName @shooterToFill.FirstName</Text>
                </Column>
                <Column ColumnSize="ColumnSize.Is6">
                    <Text Weight="TextWeight.Bold">@L["Stage"]</Text>
                    <Text>@stage.Name</Text>
                </Column>
            </Row>
            <Text Weight="TextWeight.Bold">@L["Total"]</Text>
            <Text>@(model.Total> 0 ? String.Format("{0:f2}", model.Total) : model.Total<0 ? @L["Disqualified"] : "" )</Text>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideConfirmModal(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Success" Clicked="@(() => HideConfirmModal(true))">@L["Approve"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="modalLegendRef">
    <ModalContent Size="ModalSize.Small" Centered="true">
        <ModalHeader>
            <ModalTitle>
                @L["Legend"]
            </ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Text><span class="font-weight-bold">@L["NN"]</span> @L["NotNeutralized"]</Text>
            <Text><Icon Name="IconName.MinusSquare" /> @L["RemoveOne"]</Text>
            <Text><Icon Name="IconName.PlusSquare" /> @L["AddOne"]</Text>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideLegendModal(false))">@L["Close"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string StageId { get; set; }

    [Parameter]
    public string GroupId { get; set; }

    string selectedTab = "penalties";

    private void OnSelectedTabChanged(string name)
    {
        selectedTab = name;
    }
    // reference to the modal component
    private Modal modalConfirmRef;
    private Modal modalRef;
    private Modal modalLegendRef;
    ShooterContract shooterToFill = new ShooterContract();

    StageContract stage = new StageContract();

    GroupContract group = new GroupContract();
    IList<ShooterStageAggregationResult> shooters = new List<ShooterStageAggregationResult>();

    Validations validations;
    ShooterStageRequest model = new ShooterStageRequest();


    protected override async Task OnInitializedAsync()
    {
        await LoadShooters();
        stage = await Post<StageContract>("api/Stage/GetStage", new StageRequest() { StageId = StageId });
        model.StageId = stage.StageId;
        InitModelList();

        group = await Post<GroupContract>("api/Group/GetGroup", new GroupRequest() { GroupId = GroupId });

        await base.OnInitializedAsync();
    }

    async Task LoadShooters()
    {
        shooters = await Post<IList<ShooterStageAggregationResult>>("api/GroupShooter/FetchGroupShooterStage", new GroupStageRequest() { GroupId = GroupId, StageId = StageId });
    }
    void FillShooter(ShooterStageAggregationResult shooter)
    {
        if (shooter == null)
            return;

        shooterToFill = shooter.Shooter;
        model.ShooterId = shooterToFill.ShooterId;
        model.Disqualified = shooter.ShooterStage.Disqualified;
        model.DownPoints = shooter.ShooterStage.DownPoints;
        model.FlagrantPenalties = shooter.ShooterStage.FlagrantPenalties;
        model.Ftdr = shooter.ShooterStage.Ftdr;
        model.HitOnNonThreat = shooter.ShooterStage.HitOnNonThreat;
        model.Procedurals = shooter.ShooterStage.Procedurals;
        model.Time = shooter.ShooterStage.Time;
        InitModelList();
        selectedTab = "penalties";

        modalRef.Show();
    }

    void InitModelList()
    {
        if (model.DownPoints.Count > 0)
            return;
        var tmp = new List<int>();
        for (int i = 0; i < stage.Targets; i++)
        {
            tmp.Add(0);
        }
        model.DownPoints = tmp;
    }
    private void HideLegendModal(bool choice)
    {
        if (choice)
        {
            modalLegendRef.Show();
        }
        else
        {
            modalLegendRef.Hide();
        }
    }
    private void HideModal(bool choice)
    {
        if (choice)
        {
            if (!validations.ValidateAll())
                return;
            validations.ClearAll();
            modalConfirmRef.Show();
        }
        else
        {
            shooterToFill = new ShooterContract();
            InitModelList();
            modalRef.Hide();
        }

    }
    private async Task HideConfirmModal(bool choice)
    {
        if (choice)
        {
            if (!validations.ValidateAll())
                return;
            validations.ClearAll();
            var response = await Post<OkResponse>("/api/ShooterStage/UpsertShooterStage", model);
            await LoadShooters();
            shooterToFill = new ShooterContract();
            InitModelList();
            modalRef.Hide();
        }
        modalConfirmRef.Hide();
    }

    private async Task OnFocus(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("customFunctions.selectElement", elementId);
    }
    public async Task Focus(KeyboardEventArgs e, int elementId)
    {
        if (await JSRuntime.InvokeAsync<bool>("customFunctions.isDevice"))
            return;
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (elementId < 0 || elementId >= model.DownPoints.Count)
                return;
            await JSRuntime.InvokeVoidAsync("customFunctions.focusElement", $"target{elementId}");
        }
    }
}