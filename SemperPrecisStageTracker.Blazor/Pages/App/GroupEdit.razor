@page "/app/matches/{id}/groups/edit/{groupId}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<GroupEdit> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["EditGroup"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new{ id = Id}))">@L["BackToMatch"]</NavLink>
<Divider />
@if (PageLoading)
{
    <p class="text-center">
        <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
    </p>
}
else
{
    <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@model">
        <Validation Validator="@ValidationRule.IsNotEmpty">
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Name"]</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                    <TextEdit Placeholder="@L["Name"]" @bind-Text="@model.Name">
                        <Feedback>
                            <ValidationError>@L["WrongName"]</ValidationError>
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
        <Field Horizontal="true" JustifyContent="JustifyContent.End">
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@Submit" Loading="ApiLoading" Disabled="ApiLoading">
                <LoadingTemplate><Icon Name="FontAwesomeIcons.AnimationSpinner" />&nbsp;@L["Submit"]</LoadingTemplate>
                <ChildContent>@L["Submit"]</ChildContent>
            </Button>
        </Field>
    </Validations>
}
@code {

    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string GroupId { get; set; }

    Validations validations;

    GroupCreateRequest model = new GroupCreateRequest();

    protected override async Task OnInitializedAsync()
    {
        var existing = await Post<GroupContract>("api/Group/GetGroup", new GroupRequest() { GroupId = GroupId });
        model.Name = existing.Name;
        model.MatchId = Id;

        await base.OnInitializedAsync();
    }

    async Task Submit()
    {
        if (!validations.ValidateAll())
            return;
        validations.ClearAll();
        var response = await Post<GroupContract>("/api/Group/CreateGroup", model);
        UriHelper.NavigateTo(RouteHelper.GetUrl<GroupDetail>(new {id = Id, groupId = response.GroupId}));
    }
}
