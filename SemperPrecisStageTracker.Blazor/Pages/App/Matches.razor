@page "/app/matches"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<Matches> L
@inject NavigationManager UriHelper

<Heading Size="HeadingSize.Is1">@L["Matches"]</Heading>
@if (AuthService.CheckPermissions(AdministrationPermissions.ManageMatches.AndList(AdministrationPermissions.CreateMatches)))
{
    <Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" to="@(RouteHelper.GetUrl<MatchNew>())"><Icon Name="IconName.PlusSquare" /> @L["NewMatch"]</Button>
}
<Divider />
<Table Striped="true" Hoverable="true">
    <TableHeader ThemeContrast="ThemeContrast.Dark">
        <TableRow>
            <TableHeaderCell>@L["Name"]</TableHeaderCell>
            <TableHeaderCell>@L["Association"]</TableHeaderCell>
            <TableHeaderCell>@L["Date"] / @L["Location"]</TableHeaderCell>
            <TableHeaderCell></TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @if (PageLoading)
        {
            <TableRow>
                <TableRowCell ColumnSpan="4" TextAlignment="@TextAlignment.Center"><Icon Name="FontAwesomeIcons.AnimationSpinner2x" /></TableRowCell>
            </TableRow>
        }
        else
        {
            @if (matches.Count == 0)
            {
                <TableRow>
                    <TableRowCell ColumnSpan="4" TextAlignment="@TextAlignment.Center">@L["NoData"]</TableRowCell>
                </TableRow>
            }
            else
            {
                <Virtualize Items="@matches" Context="match">
                    <TableRow>
                        <TableRowHeader><NavLink href="@(RouteHelper.GetUrl<MatchDetail>(new {id = match.MatchId}))">@match.Name</NavLink></TableRowHeader>
                        <TableRowCell>@match.Association.Name</TableRowCell>
                        <TableRowCell>@match.MatchDateTime.ToString("d")<br />@match.Place.Name</TableRowCell>
                        <TableRowCell>
                            @if (MainServiceLayer.Online && AuthService.CheckPermissions(AdministrationPermissions.ManageMatches.AndList(EntityPermissions.EditMatch), match.MatchId))
                            {
                                <Button class="me-2" Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<MatchEdit>(new {id = match.MatchId}))"><Icon Name="IconName.Pen" /></Button>
                            }
                            <Button class="me-2" Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<MatchDetail>(new {id = match.MatchId}))"><Icon Name="IconName.Search" /></Button>
                            @if (MainServiceLayer.Online && AuthService.CheckPermissions(AdministrationPermissions.ManageMatches.AndList(EntityPermissions.DeleteMatch), match.MatchId))
                            {
                                <Button class="me-2" Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteEntity(match))"><Icon Name="IconName.Delete" /></Button>
                            }
                            <Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Link" To="@($"app/stats/{match.ShortLink}")"><Icon Name="FontAwesomeIcons.ChartBar" /></Button>
                        </TableRowCell>
                    </TableRow>
                </Virtualize>
            }
        }
    </TableBody>
</Table>
<Modal @ref="modalRefEntityToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteMatch"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (entityToDelete != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@entityToDelete.Name</Text>
                </Field>
                <Field>
                    <FieldLabel>@L["Association"]</FieldLabel>
                    <Text>@entityToDelete.Association.Name</Text>
                </Field>
                <Field>
                    <FieldLabel>@L["Date"]</FieldLabel>
                    <Text>@entityToDelete.MatchDateTime.ToString("d")</Text>
                </Field>
            }
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalEntityToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalEntityToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    IList<MatchContract> matches = new List<MatchContract>();

    private Modal modalRefEntityToDelete;
    MatchContract entityToDelete = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEntities();

        await base.OnInitializedAsync();
    }

    private async Task LoadEntities()
    {
        matches = await Post(() => MainServiceLayer.GetMatches());
    }

    void DeleteEntity(MatchContract entity)
    {
        if (entity == null)
            return;
        entityToDelete = entity;
        modalRefEntityToDelete.Show();
    }

    private async Task HideModalEntityToDelete(bool choice)
    {
        if (choice && entityToDelete != null)
        {
            await Post<MatchContract>("/api/Match/DeleteMatch", new MatchRequest
            {
                MatchId = entityToDelete.MatchId
            });

            await LoadEntities();
        }
        entityToDelete = new();
        await modalRefEntityToDelete.Hide();
    }
}