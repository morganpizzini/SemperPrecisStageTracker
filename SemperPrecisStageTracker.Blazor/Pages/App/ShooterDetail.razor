@page "/app/shooters/{id}"
@inherits SemperPrecisBaseComponent
@inject IStringLocalizer<ShooterDetail> L

<Heading Size="HeadingSize.Is1">@L["Detail"]</Heading>
<NavLink href="@(RouteHelper.GetUrl<Shooters>())">@L["BackToList"]</NavLink>
<Button Size="Size.Small" Color="Color.Secondary" Type="ButtonType.Link" To="@(RouteHelper.GetUrl<ShooterEdit>(new {id = Id}))"><Icon Name="IconName.Pen" /> @L["EditShooter"]</Button>
<Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Button" Clicked="@(() => NewClassification())"><Icon Name="IconName.PlusSquare" /> @L["NewClassification"]</Button>
<Button Size="Size.Small" Color="Color.Primary" Type="ButtonType.Button" Clicked="@(() => NewTeam())"><Icon Name="IconName.PlusSquare" /> @L["NewTeam"]</Button>
<Divider />
@if (PageLoading)
{
    <p class="text-center">
        <Icon Name="FontAwesomeIcons.AnimationSpinner2x" />
    </p>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <CardTitle>@L["Shooter"]</CardTitle>
                    <CardText>@shooter.LastName @shooter.FirstName</CardText>
                    <CardTitle>@L["BirthDate"]</CardTitle>
                    <CardText>@shooter.BirthDate.ToString("d")</CardText>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <CardTitle>@L["Teams"]</CardTitle>

                    <Table Striped="true" Hoverable="true">
                        <TableHeader ThemeContrast="ThemeContrast.Dark">
                            <TableRow>
                                <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                <TableHeaderCell>@L["RegistrationDate"]</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @if (shooterTeams.Count > 0)
                            {
                                <Virtualize Items="@shooterTeams" Context="shooterTeam">
                                    <TableRow>
                                        <TableRowHeader>@shooterTeam.Team.Name</TableRowHeader>
                                        <TableRowCell>@shooterTeam.RegistrationDate.ToString("d")</TableRowCell>
                                        <TableRowCell>
                                            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => EditTeam(shooterTeam))"><Icon Name="IconName.Pen" /></Button>
                                            <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteTeam(shooterTeam))"><Icon Name="IconName.Delete" /></Button>
                                        </TableRowCell>
                                    </TableRow>
                                </Virtualize>
                            }
                            else
                            {
                                <TableRow>
                                    <TableRowCell ColumnSpan="3" TextAlignment="TextAlignment.Center">
                                        @L["NoTeams"]
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.IsFull">
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <CardTitle>@L["Associations"]</CardTitle>

                    <Table Striped="true" Hoverable="true">
                        <TableHeader ThemeContrast="ThemeContrast.Dark">
                            <TableRow>
                                <TableHeaderCell>@L["Name"]</TableHeaderCell>
                                <TableHeaderCell>@L["Classification"]</TableHeaderCell>
                                <TableHeaderCell>@L["RegistrationDate"]</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @if (shooterClassifications.Count > 0)
                            {
                                <Virtualize Items="@shooterClassifications" Context="classification">
                                    <TableRow>
                                        <TableRowHeader>@classification.Association.Name @classification.SafetyOfficier.ParseBoolean($"({L["SafetyOfficier"]})")</TableRowHeader>
                                        <TableRowCell>@classification.Classification</TableRowCell>
                                        <TableRowCell>@classification.RegistrationDate.ToString("d")</TableRowCell>
                                        <TableRowCell>
                                            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => EditClassification(classification))"><Icon Name="IconName.Pen" /></Button>
                                            <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => DeleteClassification(classification))"><Icon Name="IconName.Delete" /></Button>
                                        </TableRowCell>
                                    </TableRow>
                                </Virtualize>
                            }
                            else
                            {
                                <TableRow>
                                    <TableRowCell ColumnSpan="4" TextAlignment="TextAlignment.Center">
                                        @L["NoAssociations"]
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>

                </CardBody>
            </Card>
        </Column>
    </Row>

}

<Modal @ref="modalRefAssociationToEdit">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["EditAssociation"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@associationToEdit">
                <Validation Validator="@ValidationRule.IsNotEmpty">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Association"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <Select TValue="string" SelectedValue="@associationToEdit.AssociationId" SelectedValueChanged="@OnSelectedAssociationChanged">
                                <ChildContent>
                                    <SelectItem Value="@("")"></SelectItem>
                                    @foreach (var association in associations)
                                    {
                                        <SelectItem Value="@association.AssociationId">@association.Name</SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["WrongAssociation"]</ValidationError>
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.IsNotEmpty">
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["CardNumber"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <TextEdit Placeholder="@L["CardNumber"]" @bind-Text="@associationToEdit.CardNumber">
                                <Feedback>
                                    <ValidationError>@L["WrongCardNumber"]</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.IsNotEmpty">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["classification"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <Select TValue="string" @bind-SelectedValue="@associationToEdit.Classification">
                                <ChildContent>
                                    <SelectItem Value="@("")"></SelectItem>
                                    @foreach (var classification in classifications)
                                    {
                                        <SelectItem Value="@classification">@classification</SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["Wrongclassification"]</ValidationError>
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidationRule.None">
                    <Field Horizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is4">&nbsp;</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <Check TValue="bool" @bind-Checked="@associationToEdit.SafetyOfficier">@L["SafetyOfficier"]</Check>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidateDate">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["RegistrationDate"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <DateEdit TValue="DateTime" @bind-Date="@associationToEdit.RegistrationDate">
                                <Feedback>
                                    <ValidationError>@L["WrongValidRegistrationDate"]</ValidationError>
                                </Feedback>
                            </DateEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalAssociationToEdit(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalAssociationToEdit(true))">@L["Submit"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalRefAssociationToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteAssociation"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (associationToDelete.Association != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@associationToDelete.Association.Name</Text>
                </Field>
            }
            <Field>
                <FieldLabel>@L["Classification"]</FieldLabel>
                <Text>@associationToDelete.Classification</Text>
            </Field>
            <Field>
                <FieldLabel>@L["RegistrationDate"]</FieldLabel>
                <Text>@associationToDelete.RegistrationDate.ToString("d")</Text>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalAssociationToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalAssociationToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalRefTeamToEdit">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["EditTeam"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="teamValidations" Mode="ValidationMode.Manual" Model="@teamToEdit">
                <Validation Validator="@ValidationRule.IsNotEmpty">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Team"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <Select TValue="string" @bind-SelectedValue="@teamToEdit.TeamId">
                                <ChildContent>
                                    <SelectItem Value="@("")"></SelectItem>
                                    @foreach (var team in teams)
                                    {
                                        <SelectItem Value="@team.TeamId">@team.Name</SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>@L["WrongTeam"]</ValidationError>
                                </Feedback>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
                <Validation Validator="@ValidateDate">
                    <Field Horizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["RegistrationDate"]</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                            <DateEdit TValue="DateTime" @bind-Date="@teamToEdit.RegistrationDate">
                                <Feedback>
                                    <ValidationError>@L["WrongValidRegistrationDate"]</ValidationError>
                                </Feedback>
                            </DateEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalTeamToEdit(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalTeamToEdit(true))">@L["Submit"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalRefTeamToDelete">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>@L["DeleteTeam"]</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@L["ConfirmDelete"]</FieldLabel>
            </Field>
            @if (teamToDelete.Team != null)
            {
                <Field>
                    <FieldLabel>@L["Name"]</FieldLabel>
                    <Text>@teamToDelete.Team.Name</Text>
                </Field>
            }
            <Field>
                <FieldLabel>@L["RegistrationDate"]</FieldLabel>
                <Text>@teamToDelete.RegistrationDate.ToString("d")</Text>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Size="Size.Small" Color="Color.Secondary" Clicked="@(() => HideModalTeamToDelete(false))">@L["Close"]</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@(() => HideModalTeamToDelete(true))">@L["Yes"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    [Parameter]
    public string Id { get; set; }

    ShooterContract shooter = new ShooterContract();
    Validations validations;
    Validations teamValidations;
    private Modal modalRefAssociationToDelete;
    ShooterAssociationContract associationToDelete = new ();
    private Modal modalRefAssociationToEdit;
    ShooterAssociationCreateRequest associationToEdit = new ();
    IList<ShooterAssociationContract> shooterClassifications = new List<ShooterAssociationContract>();
    IList<AssociationContract> associations = new List<AssociationContract>();
    IList<string> classifications = new List<string>();

    private Modal modalRefTeamToDelete;

    ShooterTeamContract teamToDelete = new ShooterTeamContract();
    private Modal modalRefTeamToEdit;
    ShooterTeamCreateRequest teamToEdit = new ShooterTeamCreateRequest();
    IList<TeamContract> teams = new List<TeamContract>();
    IList<ShooterTeamContract> shooterTeams = new List<ShooterTeamContract>();
    protected override async Task OnInitializedAsync()
    {
        shooter = await Post<ShooterContract>("api/Shooter/GetShooter", new ShooterRequest() { ShooterId = Id });
        associations = await Post<IList<AssociationContract>>("api/Association/FetchAllAssociations", null);
        teams = await Post<IList<TeamContract>>("api/Team/FetchAllTeams", null);
        await LoadShooterClassifications();
        await LoadShooterTeams();
        await base.OnInitializedAsync();
    }

    async Task LoadShooterTeams()
    {
        shooterTeams = await Post<IList<ShooterTeamContract>>("api/ShooterTeam/FetchShooterTeamByShooter", new ShooterRequest() { ShooterId = Id });
    }
    async Task LoadShooterClassifications()
    {
        shooterClassifications = await Post<IList<ShooterAssociationContract>>("api/ShooterAssociation/FetchShooterAssociation", new ShooterRequest() { ShooterId = Id });
    }

    void ValidateDate(ValidatorEventArgs e)
    {
        var date = e.Value as DateTime?;

        if (date == null)
        {
            e.Status = ValidationStatus.Error;
        }
        else if (date <= new DateTime(1980, 1, 1))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = L["WrongRegistrationDate"];
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    void OnSelectedAssociationChanged(string value)
    {
        associationToEdit.AssociationId = value;
        associationToEdit.Classification = string.Empty;
        associationToEdit.CardNumber = string.Empty;
        SelectClassificationBasedOnAssociationId(value);
    }
    void SelectClassificationBasedOnAssociationId(string value)
    {
        var existingAssociation = associations.FirstOrDefault(x => x.AssociationId == value);
        if (existingAssociation == null)
            return;

        classifications = existingAssociation.Classifications;
    }
    void NewClassification()
    {
        associationToEdit = new ShooterAssociationCreateRequest { ShooterId = shooter.ShooterId };
        modalRefAssociationToEdit.Show();
    }
    void EditClassification(ShooterAssociationContract shooterAssociation)
    {

        SelectClassificationBasedOnAssociationId(shooterAssociation.Association.AssociationId);
        associationToEdit = new ShooterAssociationCreateRequest
        {
            ShooterId = shooter.ShooterId,
            AssociationId = shooterAssociation.Association.AssociationId,
            Classification = shooterAssociation.Classification,
            RegistrationDate = shooterAssociation.RegistrationDate,
            CardNumber = shooterAssociation.CardNumber
        };

        modalRefAssociationToEdit.Show();
    }

    private async Task HideModalAssociationToEdit(bool choice)
    {
        if (choice)
        {
            if (!validations.ValidateAll())
                return;
            validations.ClearAll();
            var response = await Post<OkResponse>("/api/ShooterAssociation/UpsertShooterAssociation", associationToEdit);
            await LoadShooterClassifications();
        }
        associationToEdit = new ShooterAssociationCreateRequest();
        modalRefAssociationToEdit.Hide();
    }

    void DeleteClassification(ShooterAssociationContract association)
    {
        if (association == null)
            return;
        associationToDelete = association;
        modalRefAssociationToDelete.Show();
    }
    private async Task HideModalAssociationToDelete(bool choice)
    {
        if (choice && associationToDelete.Association != null)
        {
            await Post<GroupContract>("/api/ShooterAssociation/DeleteShooterAssociation", new ShooterAssociationDeleteRequest
            {
                AssociationId = associationToDelete.Association.AssociationId,
                ShooterId = shooter.ShooterId
            });
            await LoadShooterClassifications();
        }
        associationToDelete = new ShooterAssociationContract();
        modalRefAssociationToDelete.Hide();
    }

    void NewTeam()
    {
        teamToEdit = new ShooterTeamCreateRequest { ShooterId = shooter.ShooterId };
        modalRefTeamToEdit.Show();
    }
    void EditTeam(ShooterTeamContract shooterTeam)
    {

        teamToEdit = new ShooterTeamCreateRequest
        {
            ShooterId = shooter.ShooterId,
            TeamId = shooterTeam.Team.TeamId,
            RegistrationDate = shooterTeam.RegistrationDate
        };
        modalRefTeamToEdit.Show();
    }

    private async Task HideModalTeamToEdit(bool choice)
    {
        if (choice)
        {
            if (!teamValidations.ValidateAll())
                return;
            teamValidations.ClearAll();
            var response = await Post<OkResponse>("/api/ShooterTeam/UpsertShooterTeam", teamToEdit);
            await LoadShooterTeams();
        }
        teamToEdit = new ShooterTeamCreateRequest();
        modalRefTeamToEdit.Hide();
    }
    void DeleteTeam(ShooterTeamContract team)
    {
        if (team == null)
            return;
        teamToDelete = team;
        modalRefTeamToDelete.Show();
    }
    private async Task HideModalTeamToDelete(bool choice)
    {
        if (choice && teamToDelete.Team != null)
        {
            await Post<GroupContract>("/api/ShooterTeam/DeleteShooterTeam", new ShooterTeamDeleteRequest
            {
                TeamId = teamToDelete.Team.TeamId,
                ShooterId = shooter.ShooterId
            });
            await LoadShooterTeams();
        }
        teamToDelete = new ShooterTeamContract();
        modalRefTeamToDelete.Hide();
    }
}