@page "/app"
@using SemperPrecisStageTracker.Blazor.Services.IndexDB
@inject ClientConfiguration config
@inject MatchServiceIndexedDb matchServiceIndexDb


@if (config.IsLocal)
{
    <Button Clicked="@Add">aggiungi</Button>
    <Button Clicked="@Get">get</Button>
    <Button Clicked="@Clear">clear</Button>
    @matches.Count

    <ul>
        verificare in prod:
        <li>quando cambio lingua manda errore</li>
        <li>Gestione DNF (quando non ho punteggi per 1 stage)</li>
        
        app/shooters/2 tabella associazioni controllare lo span del non trovare risultati
        alla cancellazione di un shooterassociationInfo cancellare anche le shooterassociation (inserire anche test)
        controllare tutti i test che aggiungono/rimuovono permessi
        controllare ed aggiornare i permessi quando accedo all'applicazione e sono già loggato
        l'installazione dell'applicazione deve essere possibile tramite un menù nel setting, lavorando sull'oggetto nel local storage
        <li>/matches/:id/stats
            <ul>
                <li>caricare gli stage per nome e non per indice (metodo GetMatchStats)</li>
                <li>controllare assegnazione delle classificazioni, non deve dipendere da shooterassociation ma da groupshooter (metodo GetMatchStats)</li>
            </ul>
        </li>
        <li>/app/shooters/new
            <ul>
                <li>gli errori 500 bloccano l'interfaccia</li>
                <li>aggiungere visita medica, non obbligatoria</li>
            </ul>
        </li>
        <li>creare interfaccia per creare più di un gruppo alla volta</li>
        <li>/app/matches/:id/groups/:id
            <ul>
                <li>mostrare la classificazione nella tabella</li>
                <li>aggiungere campo pagato/non pagato al momento dell'aggiunta del tiratore</li>
                <li>nella lista degli shooter mostrare classificazione e divisione e il pagamento, aggiungere bottone per aggiornare stato pagamento e possibilità di cambiare la categoria senza dover eliminare il tiratore</li>
                <li>tra gli shooter estrapolare solo quelli con classificazione attiva nell'associazione del match</li>
            </ul>
        </li>
        <li>app/matches/:id/stages/:id/group/:id
            <ul>
                <li>mostrare classificazione e divisione, probabilmente con un toggle che abilita/disabilita</li>
            </ul>
        </li>


        <li>Gestire parimerito con punti down</li>
        <li>Togliere gruppi quando offline</li>
        <li>Spostamento tiratore in altra squadra</li>
        <li>Controllare top bar in mobile</li>

        <li>Creare un test UI per verificare l'aggiunta di uno shooter in un gruppo</li>
        <li>Inserire state management per controllare il tema -> impostato in settings, ma utilizzato in AppLayout</li>
        
        @*rimuovere i Validator="@ValidationRule.IsNotEmpty"*@
        <li>Nelle associazioni e società inserire regolamento, link e allegato (creare un servizio che carica su blob storage e uno mock che salva in locale)</li>
        <li>All'aggiunta di un punteggio inviare una notifica al tiratore, ogni match ha una flag che permette di disabilitare questo meccanismo, aggiungere anche un pulsante che permette di aggiornare tutti i tiratori in 1 colpo solo</li>
        <li>Form di iscrizione alla gara, con squad</li>
        <li>Gestire le string multiple sugli stage</li>
        <li>Bloccare possibilità di reason in shooterteampayment (??)</li>
        <li>Verificare UI per divisione shooter association</li>
        <li>UI per assegnazione teamHolder</li>
        <li>assegnazione permessi accesso teamHolder</li>
        <li>UI per assegnazione permessi manuale</li>
        <li>Correggere test che danno rosso per permessi, guardare MatchControllerTest per esempi, mancano tutti i test di update/delete</li>

        <li>Nella action UpsertShooterAssociation gestire il doppio salvataggio con una transazione</li>

        <li>Ogni stage ordine randomico dei tiratori, ma stabile sullo stesso stage</li>
        <li>Possibilità di mescolare l'ordine direttamente sulla pagina</li>
        <li>Se entro come SO ho link rapido per stage</li>

        <li>Creare punti di ritrovo per sparare (sicuro/forse/poco probabile) con piccola chat di messaggi</li>

        <li>uniformare customauthservice pescando le informazioni da localstorage https://github.com/Naveen512/Blazor-webassembly-authentication-scratch/tree/main/BlazorWasm.JwtAuthLearning</li>

        <li>Abilitare la modifica dello shooter stage (team e categoria)</li>

        <li>upload foto https://www.aspitalia.com/script/1376/Effettuare-Upload-File-Blazor-Azure-Blob-Storage.aspx</li>


        <li>Gestire classificazione multipla: ogni associazione può consentire classificazione generica o per categoria d'armi</li>
        <li>Rimuovere PSO da classificazione e farne entità a parte</li>

        <li>Alla creazione dello stage controllare che l'indice sia consecutivo all'ultimo inserito</li>
        <li>all'aggiunta dello shooter al gruppo, popolare la lista dei team prendendoli dai team dell'utente</li>
        <li>all'aggiunta dello shooter al gruppo, verificare la correttezza dell'associazione -aggiungere check in salvataggio-</li>

        <li>Evidenziare Migliori 3 (oro/argento/bronzo) per ogni stage</li>
        <li>Inserimento link per download immagini</li>
        <li>esportazione in csv</li>
        <li>caricamento immagini per posizione stage</li>
        <li>Opzione lotteria /elimina all'uscita o mantieni</li>
        <li>Caricare configurazione dal server in startup.cs</li>
        <li>virtualization sulle liste e loading dinamico https://docs.microsoft.com/it-it/aspnet/core/blazor/components/virtualization?view=aspnetcore-5.0 </li>

        <li>Dividere la creazione di un match con un wizard, in modo che prima possa settare l'associazione e poi tutto il resto</li>

        <li>Font MV boli</li>

        <li>?? Controllare tastierino numerico su Ios ??</li>
    </ul>
}

@code
{
    private IList<MatchContract> matches = new List<MatchContract>();

    private async Task Add()
    {
        var openResult = await matchServiceIndexDb.OpenIndexedDb();
        await matchServiceIndexDb.AddItems(new List<MatchContract> { new() { MatchId = Guid.NewGuid().ToString(), Name = "Match01" } });
    }

    private async Task Get()
    {
        var openResult = await matchServiceIndexDb.OpenIndexedDb();

        matches = await matchServiceIndexDb.GetAll<MatchContract>();

    }
    private async Task Clear()
    {
        var openResult = await matchServiceIndexDb.OpenIndexedDb();

        await matchServiceIndexDb.DeleteAll<MatchContract>();

    }
}
