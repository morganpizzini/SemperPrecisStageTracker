@page "/app"
@using SemperPrecisStageTracker.Blazor.Services.IndexDB
@inject ClientConfiguration config
@inject MatchServiceIndexedDb matchServiceIndexDb


@if (config.IsLocal)
{
    <Button Clicked="@Add">aggiungi</Button>
    <Button Clicked="@Get">get</Button>
    <Button Clicked="@Clear">clear</Button>
    @matches.Count

    <ul>
        <li>UI per assegnazione permessi manuale</li>

        <li>Un utente può avere più classificazioni per la stessa associazione</li>

        <li>Ogni stage ordine randomico dei tiratori, ma stabile sullo stesso stage</li>
        <li>Possibilità di mescolare l'ordine direttamente sulla pagina</li>
        <li>Se entro come SO ho link rapido per stage</li>

        <li>Creare punti di ritrovo per sparare (sicuro/forse/poco probabile) con piccola chat di messaggi</li>

        <li>uniformare customauthservice pescando le informazioni da localstorage https://github.com/Naveen512/Blazor-webassembly-authentication-scratch/tree/main/BlazorWasm.JwtAuthLearning</li>

        <li>Abilitare la modifica dello shooter stage (team e categoria)</li>

        <li>upload foto https://www.aspitalia.com/script/1376/Effettuare-Upload-File-Blazor-Azure-Blob-Storage.aspx</li>

        <li>Index db http://www.quadaph.com/BlazorIndexDB https://github.com/amuste/DnetIndexedDb</li>

        <li>Gestire classificazione multipla: ogni associazione può consentire classificazione generica o per categoria d'armi</li>
        <li>Rimuovere PSO da classificazione e farne entità a parte</li>

        <li>Alla creazione dello stage controllare che l'indice sia consecutivo all'ultimo inserito</li>
        <li>all'aggiunta dello shooter al gruppo, popolare la lista dei team prendendoli dai team dell'utente</li>
        <li>all'aggiunta dello shooter al gruppo, verificare la correttezza dell'associazione -aggiungere check in salvataggio-</li>

        <li>Evidenziare Migliori 3 (oro/argento/bronzo) per ogni stage</li>
        <li>Inserimento link per download immagini</li>
        <li>esportazione in csv</li>
        <li>caricamento immagini per posizione stage</li>
        <li>Opzione lotteria /elimina all'uscita o mantieni</li>
        <li>Caricare configurazione dal server in startup.cs</li>
        <li>virtualization sulle liste e loading dinamico https://docs.microsoft.com/it-it/aspnet/core/blazor/components/virtualization?view=aspnetcore-5.0 </li>

        <li>Dividere la creazione di un match con un wizard, in modo che prima possa settare l'associazione e poi tutto il resto</li>

        <li>Font MV boli</li>

        <li>?? Controllare tastierino numerico su Ios ??</li>
    </ul>
}

@code
{
    private IList<MatchContract> matches = new List<MatchContract>();

    private async Task Add()
    {
        var openResult = await matchServiceIndexDb.OpenIndexedDb();
        await matchServiceIndexDb.AddItems(new List<MatchContract> { new() { MatchId = Guid.NewGuid().ToString(), Name = "Match01" } });
    }

    private async Task Get()
    {
        var openResult = await matchServiceIndexDb.OpenIndexedDb();

        matches = await matchServiceIndexDb.GetAll<MatchContract>();

    }
    private async Task Clear()
    {
        var openResult = await matchServiceIndexDb.OpenIndexedDb();

        await matchServiceIndexDb.DeleteAll<MatchContract>();

    }
}
