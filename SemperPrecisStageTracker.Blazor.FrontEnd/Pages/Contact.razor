@page "/contact"
@using  System.ComponentModel
@using System.Text.Json

@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Localization
@using SemperPrecisStageTracker.Blazor.Services

@using Icon = Blazorise.Icon
@inject IJSRuntime JSRuntime;
@inject ClientConfiguration config
@inject IStringLocalizer<Contact> L
@inject IHttpService service

<section class="py-5">
    <div class="container px-5">
        <!-- Contact form-->
        <div class="bg-light rounded-3 py-5 px-4 px-md-5 mb-5">
            <div class="text-center mb-5">
                <h1 class="fw-bolder">@L["Title"]</h1>
                <p class="lead fw-normal text-muted mb-0">@L["SubTitle"]</p>
            </div>
            <div class="row gx-5 justify-content-center">
                <div class="col-lg-8 col-xl-6">
                    <Validations @ref="validations" Mode="ValidationMode.Manual" Model="@model">
                        <Validation Validator="@ValidationRule.IsNotEmpty">
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Name"]</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <TextEdit Placeholder="@L["Name"]" @bind-Text="@model.Name">
                                        <Feedback>
                                            <ValidationError>@L["WrongName"]</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation Validator="@ValidationRule.IsNotEmpty">
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Email"]</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <TextEdit Placeholder="@L["Email"]" @bind-Text="@model.Email" InputMode="TextInputMode.Email">
                                        <Feedback>
                                            <ValidationError>@L["WrongEmail"]</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation Validator="@ValidationRule.IsNotEmpty">
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Subject"]</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <TextEdit Placeholder="@L["Subject"]" @bind-Text="@model.Subject">
                                        <Feedback>
                                            <ValidationError>@L["WrongSubject"]</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation Validator="@ValidationRule.IsNotEmpty">
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">@L["Description"]</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <MemoEdit Rows="5" Placeholder="@L["Description"]" @bind-Text="@model.Description">
                                        <Feedback>
                                            <ValidationError>@L["WrongDescription"]</ValidationError>
                                        </Feedback>
                                    </MemoEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation Validator="@ValidationRule.None">
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">&nbsp;</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <Check TValue="bool" @bind-Checked="@model.AcceptPolicy">@L["AllowPrivacy"]</Check>
                                </FieldBody>
                            </Field>
                            <Text>@L["AcceptPrivacy"]</Text>
                        </Validation>
                        <a href="@(RouteHelper.GetUrl<PrivacyPolicy>())" target="_blank">@L["Privacy page"]</a>
                        <Field Horizontal="true" JustifyContent="JustifyContent.End">
                            <Button Size="Size.Medium" Color="Color.Primary" Clicked="@Submit" Loading="loading" Disabled="loading">
                                <LoadingTemplate><Icon Name="FontAwesomeIcons.AnimationSpinner" />&nbsp;@L["Submit"]</LoadingTemplate>
                                <ChildContent>@L["Submit"]</ChildContent>
                            </Button>
                        </Field>
                        <Text>@resultMessage</Text>
                    </Validations>
                   
                </div>
            </div>
        </div>
    </div>
</section>

@code {

    Validations validations;
    ContactCreateRequest model = new();
    bool loading = false;
    string resultMessage = string.Empty;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            ((IJSInProcessRuntime)JSRuntime).InvokeVoid("loadScript", $"https://www.google.com/recaptcha/api.js?render={config.Recaptcha.RecaptchaToken}");
        }

    }


    async Task Submit()
    {
        //https://stackoverflow.com/questions/66471037/how-to-integrate-google-recaptcha-v2-for-blazor-webassembly-with-an-asp-net-core
        // https://developers.google.com/recaptcha/docs/v3

        resultMessage = string.Empty;
        if (! (await validations.ValidateAll()))
            return;
        await validations.ClearAll();
        //loading = true;

        model.Token = ((IJSInProcessRuntime)JSRuntime).Invoke<string>("grecaptcha.execute", config.Recaptcha.RecaptchaToken, new { action = "contactSubmit" });
        var response = await service.Post<OkResponse>("/api/Contact/CreateContact", model);
        if (response is { WentWell: true } && response.Result.Status)
        {
            resultMessage = L["ContactOk"];
            model = new ContactCreateRequest();
        }
        else
        {
            resultMessage = L["ContactFailed"];
        }
        //loading = false;
    }
}