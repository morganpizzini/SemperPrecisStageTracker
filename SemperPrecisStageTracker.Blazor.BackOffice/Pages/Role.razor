@page "/roles/{id}"
@inherits SemperPrecisBaseComponent<RoleContract>
@inject NavigationManager UriHelper
<PageTitle>Roles</PageTitle>

<h1><Icon class="me-2 pointer" Name="IconName.ArrowLeft" IconSize="IconSize.ExtraSmall" @onclick="GoBackClick" />Role detail</h1>

<Card Margin="Margin.Is4.OnY">
    <CardHeader>
        <CardTitle>Details</CardTitle>
    </CardHeader>
    <CardBody>
        <Paragraph>
            This is the detail for the role
        </Paragraph>
    </CardBody>
    <CardBody>
        <Row>
            <Column>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit @bind-Text="@Model.Name" Disabled />
                 </Field>
                 <Field>
                     <FieldLabel>Description</FieldLabel>
                     <TextEdit @bind-Text="@Model.Description" Disabled />
                 </Field>
             </Column>
             <Column>
                 <Label>Permissions</Label>
                 <DataGrid TItem="PermissionContract"
                           Data="Model.Permissions"
                           Sortable="false"
                          Responsive
                          Editable
                          ShowPager
                           ShowPageSizes="false"
                           EditMode="DataGridEditMode.Form"
                           CommandMode="DataGridCommandMode.ButtonRow"
                           @bind-SelectedRow="@selectedEntity"
                           RowInserting="@OnRowInsertingAsync"
                           ShowCaptions="false">
                     <DataGridColumns>
                         <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false" CancelCommandAllowed>
                            <SaveCommandTemplate>
                                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                                </SaveCommandTemplate>
                                <CancelCommandTemplate>
                                    <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                                </CancelCommandTemplate>
                            </DataGridCommandColumn>
                            <DataGridColumn Field="@nameof(PermissionContract.PermissionId)" Displayable="false"/>
                            <DataGridColumn Field="@nameof(PermissionContract.Name)" Caption="Name" Editable>
                            <EditTemplate>
                                <Select TValue="string" SelectedValueChanged="@(v => {
                                        context.CellValue = availablePermissions.FirstOrDefault(x=>x.PermissionId == v)?.Name ?? string.Empty;
                                        context.UpdateCell( nameof( PermissionContract.PermissionId ), v);
                                    })">
                                    <ChildContent>
                                        <SelectItem Value="@("")"></SelectItem>
                                        @foreach (var permission in availablePermissions)
                                        {
                                            <SelectItem Value="@permission.PermissionId">@permission.Name</SelectItem>
                                        }
                                    </ChildContent>
                                    <Feedback>
                                        <ValidationError>Select a permission</ValidationError>
                                    </Feedback>
                                </Select>
                            </EditTemplate>
                        </DataGridColumn>
                    </DataGridColumns>
                    <ButtonRowTemplate>
                        <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
                        <Button Color="Color.Danger" Disabled="(selectedEntity is null)" Clicked="()=>DeleteEntity(context)">Delete</Button>
                    </ButtonRowTemplate>
                </DataGrid>
            </Column>
        </Row>
    </CardBody>
</Card>

@code {
    private IList<PermissionContract> availablePermissions;
    private PermissionContract selectedEntity;

    override protected async Task LoadModel()
    {
        Model = (await Call<RoleContract>(RequestType.Get, $"api/Roles/{Id}")).Data;
        availablePermissions = (await Call<List<PermissionContract>>(RequestType.Get, $"api/Permissions")).Data;
    }

    private void GoBackClick()
    {
        UriHelper.NavigateTo("/roles");
    }

    protected async Task OnRowInsertingAsync(CancellableRowChange<PermissionContract, Dictionary<string, object>> e)
    {
        var selectedPermission = availablePermissions.FirstOrDefault(x => x.Name == e.NewItem.Name);
        if(selectedPermission is null)
        {
            e.Cancel = true;
            return;
        }

        if ((await Call<PermissionContract>(RequestType.Post, $"api/permissions/{selectedPermission.PermissionId}/role/{Model.RoleId}", null, null, "Permission added correctly")).Errors.Any())
        {
            e.Cancel = true;
        }
    }

    private async Task DeleteEntity(ButtonRowContext<PermissionContract> context)
    {
        var request = await Call<object>(RequestType.Delete, $"api/permissions/{selectedEntity.PermissionId}/role/{Model.RoleId}", null, null, "Permission deleted correctly");
        if (!request.Errors.Any())
        {
            await context.DeleteCommand.Clicked.InvokeAsync();
        }
    }
} 