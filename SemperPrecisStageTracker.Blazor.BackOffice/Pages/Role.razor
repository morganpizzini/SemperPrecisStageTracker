@page "/roles/{id}"
@using SemperPrecisStageTracker.Shared.Permissions
@inherits SemperPrecisBaseComponent<RoleContract>
@inject NavigationManager UriHelper
<PageTitle>Roles</PageTitle>

<h1><Icon class="me-2 pointer" Name="IconName.ArrowLeft" IconSize="IconSize.ExtraSmall" @onclick="GoBackClick" />Role detail</h1>

<Card Margin="Margin.Is4.OnY">
    <CardHeader>
        <CardTitle>Details</CardTitle>
    </CardHeader>
    <CardBody>
        <Paragraph>
            This is the detail for the role
        </Paragraph>
        <Row>
            <Column>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit @bind-Text="@Model.Name" Disabled />
                 </Field>
                 <Field>
                     <FieldLabel>Description</FieldLabel>
                     <TextEdit @bind-Text="@Model.Description" Disabled />
                 </Field>
             </Column>
             <Column>
                <Label>Permissions</Label>
                <DataGrid TItem="PermissionsEnumViewModel"
                            Data="currentPermissionViewModel"
                            Sortable="false"
                            Responsive
                            Editable
                            ShowPager
                            ShowPageSizes="false"
                            EditMode="DataGridEditMode.Form"
                            CommandMode="DataGridCommandMode.ButtonRow"
                            @bind-SelectedRow="@selectedEntity"
                            RowInserting="@OnRowInsertingAsync"
                            ShowCaptions="false">
                     <DataGridColumns>
                         <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false" CancelCommandAllowed>
                            <SaveCommandTemplate>
                                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </SaveCommandTemplate>
                            <CancelCommandTemplate>
                                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </CancelCommandTemplate>
                        </DataGridCommandColumn>
                        <DataGridColumn Field="@(nameof(PermissionsEnumViewModel.IntValue))" Displayable="false"></DataGridColumn>
                        <DataGridColumn Caption="Name" Field="@(nameof(PermissionsEnumViewModel.StringValue))" Editable>
                            <EditTemplate>
                                <Select TValue="int" SelectedValueChanged="@(v => {
                                        var selected =  PermissionsEnumViewModel.List.FirstOrDefault(x=>x.IntValue == v);
                                        if(selected == null) return;
                                        context.UpdateCell(nameof(PermissionsEnumViewModel.IntValue), v);
                                        context.CellValue = selected.StringValue;
                                    })">
                                    <ChildContent>
                                        <SelectItem Value="@(0)" Disabled="true"></SelectItem>
                                        @foreach (var permission in PermissionsEnumViewModel.List)
                                        {
                                            <SelectItem Value="@permission.IntValue">@permission.StringValue</SelectItem>
                                        }
                                    </ChildContent>
                                    <Feedback>
                                        <ValidationError>Select a permission</ValidationError>
                                    </Feedback>
                                </Select>
                            </EditTemplate>
                        </DataGridColumn>
                    </DataGridColumns>
                    <ButtonRowTemplate>
                        <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
                        <Button Color="Color.Danger" Disabled="(selectedEntity is null)" Clicked="()=>DeleteEntity(context)">Delete</Button>
                    </ButtonRowTemplate>
                </DataGrid>
            </Column>
        </Row>
    </CardBody>
</Card>

@code {
    private PermissionsEnumViewModel selectedEntity;
    private IList<PermissionsEnumViewModel> currentPermissionViewModel = new List<PermissionsEnumViewModel>();

    override protected async Task LoadModel()
    {
        Model = (await Call<RoleContract>(RequestType.Get, $"api/Roles/{Id}")).Data;
        currentPermissionViewModel = Model.Permissions.Select(p => new PermissionsEnumViewModel((int)p,p.ToDescriptionString())).ToList();
    }

    private void GoBackClick()
    {
        UriHelper.NavigateTo("/roles");
    }

    protected async Task OnRowInsertingAsync(CancellableRowChange<PermissionsEnumViewModel, Dictionary<string, object>> e)
    {
        var currentEntity = PermissionsEnumViewModel.List.FirstOrDefault(x => x.StringValue == e.NewItem.StringValue);
        if (currentEntity is null)
        {
            e.Cancel = true;
            return;
        }
        if ((await Call<object>(RequestType.Post, $"api/permissions/{currentEntity.IntValue}/role/{Model.RoleId}", null, null, "Permission added correctly")).Errors.Any())
        {
            e.Cancel = true;
            return;
        }
    }

    private async Task DeleteEntity(ButtonRowContext<PermissionsEnumViewModel> context)
    {
        if (!(await Call<object>(RequestType.Delete, $"api/permissions/{selectedEntity.IntValue}/role/{Model.RoleId}", null, null, "Permission deleted correctly")).Errors.Any())
        {
            await context.DeleteCommand.Clicked.InvokeAsync();
        }
    }
} 