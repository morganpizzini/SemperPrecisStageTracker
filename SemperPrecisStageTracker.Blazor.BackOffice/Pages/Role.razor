@page "/roles/{id}"
@inherits SemperPrecisBaseComponent<RoleContract>
@inject NavigationManager UriHelper
<PageTitle>Roles</PageTitle>

<h1><Icon class="me-2 pointer" Name="IconName.ArrowLeft" IconSize="IconSize.ExtraSmall" @onclick="GoBackClick" />Role detail</h1>

<Card Margin="Margin.Is4.OnY">
    <CardHeader>
        <CardTitle>Details</CardTitle>
    </CardHeader>
    <CardBody>
        <Paragraph>
            This is the detail for the role
        </Paragraph>
    </CardBody>
    <CardBody>
        <Row>
            <Column>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit @bind-Text="@Model.Name" Disabled />
                 </Field>
                 <Field>
                     <FieldLabel>Description</FieldLabel>
                     <TextEdit @bind-Text="@Model.Description" Disabled />
                 </Field>
            </Column>
            <Column>
                <DataGrid TItem="PermissionContract"
                          Data="Model.Permissions"
                          Sortable="false"
                          Responsive
                          Editable
                            EditMode="DataGridEditMode.Form"
                            CommandMode="DataGridCommandMode.ButtonRow"
                           RowInserting="@OnRowInsertingAsync"
                          ShowCaptions="false">
                    <DataGridColumns>
                         <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false" CancelCommandAllowed>
                            <SaveCommandTemplate>
                                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </SaveCommandTemplate>
                            <CancelCommandTemplate>
                                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </CancelCommandTemplate>
                        </DataGridCommandColumn>
                        <DataGridColumn TItem="PermissionContract" Field="@nameof(PermissionContract.Name)" Caption="Name">
                            <EditTemplate>
                                <Select TValue="string"
                                    @* ValueChanged="@( v => {
                                        context.CellValue = v;
                                        })" *@>
                                    <ChildContent>
                                        <SelectItem Value="@("")"></SelectItem>
                                            @foreach (var permission in availablePermissions)
                                    {
                                        <SelectItem Value="@permission.PermissionId">@permission.Name</SelectItem>
                                    }
                                </ChildContent>
                                    <Feedback>
                                        <ValidationError>Select a permission</ValidationError>
                                    </Feedback>
                                </Select>
                            </EditTemplate>
                        </DataGridColumn>
                    </DataGridColumns>
                     <ButtonRowTemplate>
                         <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
                         <Button Color="Color.Danger" Disabled="(selectedEntity is null)" Clicked="modalRef.Show">Delete</Button>
                     </ButtonRowTemplate>
                </DataGrid>
            </Column>
        </Row>
    </CardBody>
</Card>


@code {
    private IList<PermissionContract> availablePermissions;
    private PermissionContract selectedEntity;
    private Modal modalRef;



    override protected async Task LoadModel()
    {
        Model = (await Call<RoleContract>(RequestType.Get, $"api/Roles/{Id}")).Data;
    }

    private void GoBackClick()
    {
        UriHelper.NavigateTo("/roles");
    }

    private async Task SaveClick(MouseEventArgs _)
    {
        await Call(RequestType.Post, $"api/Roles", null, new UserCreateRequest
            {
            }, "User update correctly");
    }

    protected async Task OnRowInsertingAsync(CancellableRowChange<PermissionContract, Dictionary<string, object>> e)
    {
        // FIX API CALL
        var request = await Call<object>(RequestType.Put, $"api/Roles/{e.OldItem.PermissionId}", null, new RoleUpdateRequestV2
            {
                Name = e.NewItem.Name,
            }, "Role update correctly");

        if (request.Errors.Any())
        {
            e.Cancel = true;
        }
    }
} 