@page "/place/{id}"
@inherits SemperPrecisBaseComponent<PlaceContract>
@inject NavigationManager UriHelper
<PageTitle>Users</PageTitle>

<h1><Icon class="me-2 pointer" Name="IconName.ArrowLeft" IconSize="IconSize.ExtraSmall" @onclick="GoBackClick"/>Place detail</h1>

<Card Margin="Margin.Is4.OnY">
    <CardHeader>
        <CardTitle>General data</CardTitle>
    </CardHeader>
    <CardBody>
        <Paragraph>
            This is the data for place.
        </Paragraph>
    </CardBody>
    <CardBody>
        <Row>
            <Column>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit @bind-Text="@Model.Name" Disabled="_disableEdit" />
                </Field>
                <Field>
                    <FieldLabel>Holder</FieldLabel>
                    <TextEdit @bind-Text="@Model.Holder" Disabled="_disableEdit" />
                </Field>
                <Field>
                    <FieldLabel>Phone</FieldLabel>
                    <TextEdit @bind-Text="@Model.Phone" Disabled="_disableEdit" />
                </Field>
                <Field>
                    <FieldLabel>Is active</FieldLabel>
                    <Check TValue="bool" Checked="Model.IsActive" Disabled="_disableEdit" />
                </Field>
            </Column>
            <Column>
                 <Field>
                     <FieldLabel>Email</FieldLabel>
                     <TextEdit @bind-Text="@Model.Email" Disabled="_disableEdit" />
                 </Field>
                 <Field>
                     <FieldLabel>Full address</FieldLabel>
                     <TextEdit Text="@Model.CompleteAddress" Disabled/>
                 </Field>
                <CollapseComponent class="ps-3">
                     <ChildContent>
                         <Field>
                             <FieldLabel>Address</FieldLabel>
                             <TextEdit @bind-Text="@Model.Address" Disabled="_disableEdit" />
                         </Field>
                         <Field>
                             <FieldLabel>City</FieldLabel>
                             <TextEdit @bind-Text="@Model.City" Disabled="_disableEdit" />
                         </Field>
                         <Field>
                             <FieldLabel>Province</FieldLabel>
                             <TextEdit @bind-Text="@Model.Region" Disabled="_disableEdit" />
                         </Field>
                         <Field>
                             <FieldLabel>Postal code</FieldLabel>
                             <TextEdit @bind-Text="@Model.PostalCode" Disabled="_disableEdit" />
                         </Field>
                         <Field>
                             <FieldLabel>Country</FieldLabel>
                             <TextEdit @bind-Text="@Model.Country" Disabled="_disableEdit" />
                         </Field>
                     </ChildContent>
                 </CollapseComponent>
            </Column>
        </Row>
        <Div Class="text-end">
            @if (_disableEdit) {
                <Button Color="Color.Primary" Clicked="()=>{
                        CloneModel = Model.Clone();
                        _disableEdit = !_disableEdit;
                    }">Edit</Button>
            } else {
                if (IsNewElement)
                {
                    <Button Color="Color.Default" Clicked="()=>{
                        Model = CloneModel;
                        _disableEdit = !_disableEdit;
                    }">
                        Abort
                    </Button>
                }
                <Button Color="Color.Success" Clicked="SaveClick">Save</Button>
            }
        </Div>
    </CardBody>
</Card>

@code {
    private DialogComponent dialogRef;
    private RoleContract selectedEntity;

    override protected async Task LoadModel()
    {
        if (IsNewElement)
        {
            Model = new PlaceContract();
            _disableEdit = false;
            return;
        }
        var baseAddress = $"api/Places/{Id}";
        Model = (await Call<PlaceContract>(RequestType.Get, baseAddress)).Data;
    }

    private void GoBackClick()
    {
        UriHelper.NavigateTo("/places");
    }

    private async Task SaveClick(MouseEventArgs _)
    {
        if (IsNewElement)
        {
            await Call(RequestType.Post, $"api/Places", null, new PlaceCreateRequest
                {
                    Name = Model.Name,
                    Holder = Model.Holder,
                    Email = Model.Email,
                    Address = Model.Address,
                    City = Model.City,
                    PostalCode = Model.PostalCode,
                    Region = Model.Region,
                    Country = Model.Country,
                    Phone = Model.Phone,
                    IsActive = Model.IsActive
                }, "Place update correctly");
            GoBackClick();
        }
        else
        {
            await Call(RequestType.Put, $"api/Places/{Id}", null, new PlaceUpdateRequest
                {
                    Name = Model.Name,
                    Holder = Model.Holder,
                    Email = Model.Email,
                    Address = Model.Address,
                    City = Model.City,
                    PostalCode = Model.PostalCode,
                    Region = Model.Region,
                    Country = Model.Country,
                    Phone = Model.Phone,
                    IsActive = Model.IsActive
                }, "Place update correctly");
            CloneModel = new();
            _disableEdit = true;
            await LoadModel();
        }
    }
} 