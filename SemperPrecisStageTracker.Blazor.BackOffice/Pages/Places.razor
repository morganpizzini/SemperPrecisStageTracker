@page "/places"
@inherits SemperPrecisBaseComponent
@inject NavigationManager UriHelper
<PageTitle>Places</PageTitle>

<h1>Places</h1>
<DataGrid TItem="PlaceContract"
          Data="data"
          TotalItems="total"
          ReadData="OnReadData"
          Responsive
           CommandMode="DataGridCommandMode.ButtonRow"
           @bind-SelectedRow="@selectedEntity"
           @bind-PageSize="@pageSize"
          ShowPager
          ShowPageSizes>
    <DataGridColumns>
        <DataGridColumn TextAlignment="TextAlignment.Center" TItem="PlaceContract" Field="@nameof( PlaceContract.PlaceId )" Caption="#" Width="60px" />
        <DataGridColumn TItem="PlaceContract" Field="@nameof( PlaceContract.Name )" Caption="Name" />
        <DataGridColumn TItem="PlaceContract" Field="@nameof( PlaceContract.Holder )" Caption="Holder" />
        <DataGridColumn TItem="PlaceContract" Field="@nameof( PlaceContract.Email )" Caption="Email" />
        <DataGridColumn TItem="PlaceContract" Field="@nameof( PlaceContract.CompleteAddress )" Caption="Address" />
        <DataGridCheckColumn TItem="PlaceContract" Field="@nameof(PlaceContract.IsActive)" Caption="Active" Editable Filterable="false">
             <DisplayTemplate>
                 <Check TValue="bool" Checked="context.IsActive" Disabled ReadOnly />
             </DisplayTemplate>
         </DataGridCheckColumn>
        <DataGridCommandColumn />
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Success" Clicked="(_) => GoToDetail(string.Empty)">New</Button>
        <Button Color="Color.Primary" Disabled="(selectedEntity is null)" Clicked="(_) => GoToDetail(selectedEntity.PlaceId)">Edit</Button>
        <Button Color="Color.Danger" Disabled="(selectedEntity is null)" Clicked="modalRef.Show">Delete</Button>
    </ButtonRowTemplate>
</DataGrid>
<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Delete place</ModalTitle>
            <CloseButton />
        </ModalHeader>
        @if (selectedEntity is not null)
        {
            <ModalBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit Text="@selectedEntity.Name" Disabled />
                 </Field>
                 <Field>
                     <FieldLabel>Holder</FieldLabel>
                     <TextEdit Text="@selectedEntity.Holder" Disabled />
                 </Field>
             </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@modalRef.Hide">Close</Button>
                <Button Color="Color.Primary" Clicked="(_)=>DeleteEntity(selectedEntity.PlaceId)">Delete</Button>
            </ModalFooter>
        }
    </ModalContent>
</Modal>


@code {
    private Modal modalRef;
    private IEnumerable<PlaceContract> data;
    int total;
    int pageSize = 10;
    int pagePosition = 1;

    private PlaceContract selectedEntity;

    private Task<BaseResponse<List<PlaceContract>>> LoadData() =>
                    Call<List<PlaceContract>>(RequestType.Get, "api/Places", new Dictionary<string, string>
                                    {{ "take", pageSize.ToString() }, {"skip", ((pagePosition - 1) * pageSize).ToString() } });

    /// <summary>
    /// Standard pattern for handling Datagrid data on demand according to pagination.
    /// Filtering and Sorting are omitted for simplicity.
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnReadData(DataGridReadDataEventArgs<PlaceContract> e)
    {
        if (!e.CancellationToken.IsCancellationRequested)
        {
            pagePosition = e.Page;
            var response = await LoadData();

            if (!e.CancellationToken.IsCancellationRequested)
            {
                data = response.Data;
                total = response.Total;
            }
        }
    }

    private void GoToDetail(string id) =>
        UriHelper.NavigateTo(RouteHelper.GetUrl<Place>(new { id = string.IsNullOrEmpty(id) ? CommonVariables.NewUrlEndpoint : id }));

    private async Task DeleteEntity(string id)
    {
        await Call(RequestType.Delete, $"api/Places/{id}", "place delete succesfully");
        await modalRef.Hide();

        // reload data
        var response = await LoadData();
        data = response.Data;
        total = response.Total;
    }


}