@page "/roles"
@inherits SemperPrecisBaseComponent
@inject NavigationManager UriHelper
<PageTitle>Roles</PageTitle>

<h1>Roles</h1>
<DataGrid TItem="RoleContract"
          Data="data"
          TotalItems="total"
          ReadData="OnReadData"
          Responsive
          Editable
          EditMode="DataGridEditMode.Form"
          CommandMode="DataGridCommandMode.ButtonRow"
          @bind-SelectedRow="@selectedEntity"
          @bind-PageSize="@pageSize"
           RowUpdated="@OnRowUpdatedAsync"
           RowInserting="@OnRowInsertingAsync"
          ShowPager
           DetailRowTrigger="@((e) => e.Item.Permissions?.Count > 0 && e.Item.RoleId == selectedEntity?.RoleId)"
          ShowPageSizes>
    <DataGridColumns>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false" CancelCommandAllowed>
            <SaveCommandTemplate>
                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn TextAlignment="TextAlignment.Center" TItem="RoleContract" Field="@nameof( RoleContract.RoleId)" Caption="#" Width="60px" />
        <DataGridColumn TItem="RoleContract" Field="@nameof( RoleContract.Name)" Caption="Name" Editable/>
        <DataGridColumn TItem="RoleContract" Field="@nameof(RoleContract.Description)" Caption="Description" Editable />
         <DataGridNumericColumn Field="@nameof(RoleContract.Permissions)" Caption="Permission">
            <DisplayTemplate>
                @((context as RoleContract)?.Permissions?.Count ?? 0)
            </DisplayTemplate>
        </DataGridNumericColumn>

     </DataGridColumns>
     <DetailRowTemplate>
         @{
            var permissions = (context as RoleContract).Permissions;
            <Label>Permissions</Label>
            <DataGrid TItem="PermissionContract"
                      Data="permissions"
                      Sortable="false"
                      ShowCaptions="false">
                <DataGridCommandColumn />
                <DataGridColumn TItem="PermissionContract" Field="@nameof(PermissionContract.Name)" Caption="Name" />
            </DataGrid>
        }
    </DetailRowTemplate>
     <ButtonRowTemplate>
         <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
         <Button Color="Color.Primary" Disabled="(selectedEntity is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
         <Button Color="Color.Secondary" Disabled="(selectedEntity is null)" Clicked="(_) => GoToDetail(selectedEntity.RoleId)">Manage</Button>
         <Button Color="Color.Danger" Disabled="(selectedEntity is null)" Clicked="modalRef.Show">Delete</Button>
     </ButtonRowTemplate>
 </DataGrid>
 <Modal @ref="modalRef">
     <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Delete role</ModalTitle>
            <CloseButton />
        </ModalHeader>
        @if(selectedEntity is not null)
        {
            <ModalBody>
                    <Field>
                        <FieldLabel>Name</FieldLabel>
                        <TextEdit Text="@selectedEntity.Name" Disabled />
                     </Field>
                    <Field>
                        <FieldLabel>Username</FieldLabel>
                        <TextEdit Text="@selectedEntity.Description" Disabled />
                     </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@modalRef.Hide">Close</Button>
                <Button Color="Color.Primary" Clicked="(_)=>DeleteEntity(selectedEntity.RoleId)">Delete</Button>
            </ModalFooter>
        }
    </ModalContent>
</Modal>

@code {
    private Modal modalRef;
    private IEnumerable<RoleContract> data;
    int total;
    int pageSize = 10;
    int pagePosition = 1;

    private RoleContract selectedEntity;

    private Task<BaseResponse<List<RoleContract>>> LoadData() => 
                    Call<List<RoleContract>>(RequestType.Get, "api/Roles", new Dictionary<string, string>
                                {{ "take", pageSize.ToString() }, {"skip", ((pagePosition - 1) * pageSize).ToString() } });

    /// <summary>
    /// Standard pattern for handling Datagrid data on demand according to pagination.
    /// Filtering and Sorting are omitted for simplicity.
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnReadData(DataGridReadDataEventArgs<RoleContract> e)
    {
        if (!e.CancellationToken.IsCancellationRequested)
        {
            pagePosition = e.Page;
            var response = await LoadData();

            if (!e.CancellationToken.IsCancellationRequested)
            {
                data = response.Data;
                total = response.Total;
            }
        }
    }
    protected Task OnRowUpdatedAsync(SavedRowItem<RoleContract, Dictionary<string, object>> e)=>
        Call(RequestType.Put, $"api/Roles/{e.OldItem.RoleId}", null, new RoleUpdateRequestV2
            {
                Name = e.NewItem.Name,
                Description = e.NewItem.Description
            }, "Role update correctly");

    protected async Task OnRowInsertingAsync(CancellableRowChange<RoleContract, Dictionary<string, object>> e)
    {
        var request = await Call<object>(RequestType.Put, $"api/Roles/{e.OldItem.RoleId}", null, new RoleUpdateRequestV2
            {
                Name = e.NewItem.Name,
                Description = e.NewItem.Description
            }, "Role update correctly");

        if (request.Errors.Any())
        {
            e.Cancel = true;
        }
    }

    private async Task DeleteEntity(string id)
    {
        await Call(RequestType.Delete, $"api/Roles/{id}", "Role delete succesfully");
        await modalRef.Hide();
        var response = await LoadData();
        data = response.Data.Take(1);
        total = response.Total;
    }

    private void GoToDetail(string id) =>
        UriHelper.NavigateTo(RouteHelper.GetUrl<Role>(new { id = id }));
}